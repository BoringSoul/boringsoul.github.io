{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u7528 mkdocs \u751f\u6210\u7684\u7b14\u8bb0 \u4e3b\u9898 \u00b6 \u8be5\u7b14\u8bb0\u4e3b\u9898\u4e3a readthedocs \u65e0\u9700\u5b89\u88c5\uff0c \u6846\u67b6\u81ea\u5e26 Copyright \u00b6 \u9075\u5faa MIT License","title":"Home"},{"location":"#_1","text":"\u7528 mkdocs \u751f\u6210\u7684\u7b14\u8bb0","title":"\u7b80\u4ecb"},{"location":"#_2","text":"\u8be5\u7b14\u8bb0\u4e3b\u9898\u4e3a readthedocs \u65e0\u9700\u5b89\u88c5\uff0c \u6846\u67b6\u81ea\u5e26","title":"\u4e3b\u9898"},{"location":"#copyright","text":"\u9075\u5faa MIT License","title":"Copyright"},{"location":"database/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/","text":"","title":"\u9ad8\u6027\u80fdMySQL-\u7b2c\u4e09\u7248"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/","text":"\u7b14\u8bb0-\u6df1\u5165\u7406\u89e3Kafka\uff1a\u6838\u5fc3\u8bbe\u8ba1\u4e0e\u5b9e\u8df5\u539f\u7406 \u00b6 \u7b80\u5355\u8bb0\u4e0b\u7b14\u8bb0 \u7b2c\u4e00\u7ae0 \u521d\u8bc6Kafka \u00b6 \u9996\u5148\u77e5\u9053\u4ed6\u662f\u5565\uff1a \u6d88\u606f\u7cfb\u7edf\uff1a \u5c31\u662f\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u7cfb\u7edf\uff0c\u4f5c\u7528\u65e0\u975e\u5c31\u90a3\u51e0\u4e2a-\u89e3\u8026\uff0c\u524a\u5cf0\u3001\u5f02\u6b65\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u81ea\u5df1\u7684\u96c6\u7fa4\u7279\u6027\uff0c\u505a\u5230\u53ef\u6269\u5c55\u3001\u53ef\u6062\u590d \u6301\u4e45\u5316\uff1a log\u6587\u4ef6\u5b58\u6d88\u606f \u6d41\u5f0f\u5904\u7406\u5e73\u53f0\uff1a\u63d0\u4f9b\u63a5\u53e3\u6765\u505a\u7a97\u53e3\u3001\u8fde\u63a5\u3001\u53d8\u6362\u548c\u805a\u5408\u7b49\u7b49\u7684\u64cd\u4f5c 1.1 \u57fa\u672c\u6982\u5ff5 \u00b6 \u770b\u4e0b\u56fe\u5c31\u597d\uff1a Producer : \u751f\u4ea7\u8005 Broker : \u5c31\u662f Kafka Server Consumer : \u6d88\u8d39\u8005 Message.Topic : \u6d88\u606f\u662f\u6309Topic\u53bb\u5206\u7684 Message.Topic.Partition : Topic \u5212\u5206\u4e3a\u4e0d\u540c\u7684\u5206\u533a\u5b58\u50a8\uff0c\u5206\u533a\u7684\u6570\u91cf\u3001\u5206\u914d\u89c4\u5219\uff0c\u80fd\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\uff0c\u540c\u65f6\u8fd8\u80fd\u5728\u8fd0\u884c\u65f6\uff0c\u52a8\u6001\u4fee\u6539\u521b\u5efa\u4e3b\u9898\u65f6\u7684\u5206\u533a\u6570\u91cf\uff08\u53ea\u80fd\u589e\uff0c\u4e0d\u80fd\u51cf\uff09\u3001\u5206\u914d\u89c4\u5219 Message.Topic.Partition.Replicas : \u5206\u533a\u65f6\u6709\u526f\u672c\u7684\uff0c\u6bcf\u4e2a\u5206\u533a\u7684\u526f\u672c\u6570\u91cf\uff0c\u5206\u914d\u89c4\u5219\u4e5f\u662f\u8ddf\u4e0a\u9762\u4e00\u6837\uff0c\u53ef\u4ee5\u9759\u6001\u8bbe\u7f6e\uff0c\u52a8\u6001\u4fee\u6539 AR( Assigned Replicas ) , ISR (In-Sync Replicas) , OSR (Out-Sync Replicas) => AR = ISR + OSR \"Leader Replicas\": \u4e3b\u526f\u672c\uff0c \u8d1f\u8d23\u8bfb\u5199 \"Follower Replica\": \u4ece\u526f\u672c\uff0c\u8d1f\u8d23\u8bb0\u5f55\u732a\u526f\u672c\u6570\u636e\uff0c\u6709\u4e00\u5b9a\u6ede\u540e\u6027 Message.Topic.Partition.Replica.LEO : \u8be5\u5206\u533a\u4e0b\u4e00\u6761\u6d88\u606f\u5f85\u5199\u5165\u7684 Offset Message.Topic.Partition.Replica.HW : HW - 1 = \u6d88\u8d39\u8005\u80fd\u6d88\u8d39\u5230\u7684\u6700\u5927 Offset Message.Topic.Partition.Log : \u5728\u6301\u4e45\u5316\u5c42\u4e0a\u53ef\u4ee5\u628a\u5206\u533a\u770b\u6210\u4e00\u4e2a\u8ffd\u52a0\u7684 Log \u6587\u4ef6 Message.Topic.Partition.Offset : \u6307\u6d88\u606f\u5728\u5206\u533a\u4e2d\u7684\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u4e14\u662f\u5206\u533a\u4e2d\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u4e5f\u5c31\u662f Kafka \u662f\u5206\u533a\u5185\u6709\u5e8f\u7684 1.2 \u5b89\u88c5\u548c\u914d\u7f6e \u00b6 3.x \u7248\u672c\u5b89\u88c5\u6bd4\u8f83\u7b80\u5355\uff0c windows/linux \u7248\u672c\u90fd\u662f\u76f4\u63a5\u4e0b\u4e2a\u5305\uff0c\u5728\u672c\u5730\u8dd1\u811a\u672c\u5c31\u597d\u4e86 1.3 \u751f\u4ea7\u548c\u6d88\u8d39 \u00b6 \u8fd9\u90e8\u5206\u4ee3\u7801\u5728\u540e\u9762\u7684\u7ae0\u8282\u662f\u4f1a\u8d34\u51fa\u6765\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86 1.4 \u670d\u52a1\u7aef\u53c2\u6570\u914d\u7f6e \u00b6 \u8fd9\u91cc\u8d34\u51fa\u6700\u5e38\u89c1\u7684\u51e0\u4e2a\u53c2\u6570\u8bf4\u660e\u4e00\u4e0b\uff0c\u914d\u7f6e\u7684\u5185\u5bb9\u90fd\u662f\u5728 config/server.properties \u91cc\u9762\uff0c3.x \u7248\u672c\u7684\u8bdd\uff0c\u5982\u679c\u8981\u7528 kraft \u7684\u8bdd\uff0c\u5219\u770b config/kraft/server.properties \u6587\u4ef6 process.roles : \u8fdb\u7a0b\u7684\u89d2\u8272\u5217\u8868\uff0c\u9017\u53f7\u5206\u5272\uff0c\u9ed8\u8ba4\uff1a broker,controller node.id : \u8282\u70b9 id \uff0c\u7528\u6765\u6807\u8bc6\u8282\u70b9\uff0c\u5728\u65e5\u5fd7\u53ef\u4ee5\u7528\u6765\u6392\u67e5\u95ee\u9898 listeners : broker \u76d1\u542c\u5ba2\u6237\u7aef\u7684\u534f\u8bae+\u5730\u5740+\u7aef\u53e3,\u683c\u5f0f\u4e3a : \u534f\u8bae://\u5730\u5740:\u7aef\u53e3\uff0c\u534f\u8bae\u503c\u4e3a\uff1a PLAINTEXT, SSL, SASL_SSL log.dirs : \u6301\u4e45\u5316\u76ee\u5f55\uff0c log.dirs \u4f18\u5148\u7ea7\u5927\u4e8e log.dir \u7b2c\u4e8c\u7ae0\uff1a\u751f\u4ea7\u8005 \u00b6 2.1 \u5ba2\u6237\u7aef\u5f00\u53d1 \u00b6 \u8fd9\u91cc\u6211\u5148\u8d34\u6574\u4f53\u7684\u4ee3\u7801\uff0c\u7136\u540e\u518d\u7ec6\u8bf4 package org.example; import org.apache.kafka.clients.producer.KafkaProducer; import org.apache.kafka.clients.producer.ProducerRecord; import java.util.Properties; public class KafkaProducerDemo { public static final String brokerList = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String topic = \"test\"; public static Properties initConfig() { Properties props = new Properties(); props.put(\"bootstrap.servers\", brokerList); props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\"); props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\"); props.put(\"client.id\", \"producer.client.id.demo\"); return props; } public static void main(String[] args) { Properties props = initConfig(); try (KafkaProducer<String, String> producer = new KafkaProducer<>(props)) { ProducerRecord<String, String> record = new ProducerRecord<>(topic, \"hello kafka\"); producer.send(record); } catch (Exception e) { System.out.println(e.getMessage()); } } } 2.1.1 \u62e6\u622a\u5668 \u00b6 ProducerInterceptor \u63a5\u53e3\u662f\u8fd9\u6837\u7684 public interface ProducerInterceptor<K, V> extends Configurable, AutoCloseable { ProducerRecord<K, V> onSend(ProducerRecord<K, V> var1); void onAcknowledgement(RecordMetadata var1, Exception var2); void close(); } \u62e6\u622a\u5668\u7684\u6ce8\u5165\u65b9\u5f0f\u662f\u8fd9\u6837\u7684\uff0c\u6e90\u7801\u7528\u53cd\u5c04 (getDeclaredConstructor().newInstance()) \u53bb\u5b9e\u4f8b\u5316\u5bf9\u8c61 props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaProducerInterceptor.class.getName()); \u4ee5 kafka-client 3.7.0 \u4e3a\u4f8b onSend \u65b9\u6cd5\u662f\u5728 KafkaProducer \u6e90\u7801 357 \u884c\u6267\u884c\u7684 public Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback) { ProducerRecord<K, V> interceptedRecord = this.interceptors.onSend(record); return this.doSend(interceptedRecord, callback); } onAcknoledgement \u5219\u662f\u5728 703 \u884c\u89e6\u53d1\uff0c\u5c31\u662f\u5728 onComplete \u7684\u65f6\u5019\u8c03\u7528 public void onCompletion(RecordMetadata metadata, Exception exception) { if (metadata == null) { metadata = new RecordMetadata(this.topicPartition(), -1L, -1, -1L, -1, -1); } this.interceptors.onAcknowledgement(metadata, exception); if (this.userCallback != null) { this.userCallback.onCompletion(metadata, exception); } } 2.1.2 \u5e8f\u5217\u5316\u5668 \u00b6 StringSerializer \u6e90\u7801\u5982\u4e0b package org.apache.kafka.common.serialization; import java.io.UnsupportedEncodingException; import java.nio.charset.StandardCharsets; import java.util.Map; import org.apache.kafka.common.errors.SerializationException; public class StringSerializer implements Serializer<String> { private String encoding; public StringSerializer() { this.encoding = StandardCharsets.UTF_8.name(); } public void configure(Map<String, ?> configs, boolean isKey) { String propertyName = isKey ? \"key.serializer.encoding\" : \"value.serializer.encoding\"; Object encodingValue = configs.get(propertyName); if (encodingValue == null) { encodingValue = configs.get(\"serializer.encoding\"); } if (encodingValue instanceof String) { this.encoding = (String)encodingValue; } } public byte[] serialize(String topic, String data) { try { return data == null ? null : data.getBytes(this.encoding); } catch (UnsupportedEncodingException var4) { throw new SerializationException(\"Error when serializing string to byte[] due to unsupported encoding \" + this.encoding); } } } \u6ca1\u5565\u7279\u522b\uff0c\u5c31\u662f serialize \u91cc\u8fd4\u56de\u4e86 string.getBytes() \u81ea\u5b9a\u4e49\u7684\u4e5f\u662f\u4e00\u6837\uff0c\u8fd4\u56de byte[] \u5c31\u597d\uff0c\u53cd\u5e8f\u5217\u5316\u9053\u7406\u4e00\u6837 2.1.3 \u5206\u533a\u5668 \u00b6 \u5148\u770b\u770b\u6e90\u7801\u5b9a\u4e49 package org.apache.kafka.clients.producer; import java.io.Closeable; import org.apache.kafka.common.Cluster; import org.apache.kafka.common.Configurable; public interface Partitioner extends Configurable, Closeable { int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster); void close(); /** @deprecated */ @Deprecated default void onNewBatch(String topic, Cluster cluster, int prevPartition) { } } \u9ed8\u8ba4\u5206\u533a\u5668 DefaultPartioner \u6e90\u7801\u662f\u8fd9\u6837\u7684 public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster, int numPartitions) { return keyBytes == null ? this.stickyPartitionCache.partition(topic, cluster) : BuiltInPartitioner.partitionForKey(keyBytes, numPartitions); } \u4e3b\u8981\u770bkey\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u7a7a\u7684\u8bdd\u8c03\u7528 stickyPartitionCache.partition \uff0c \u968f\u673a\u4e00\u4e2a\u53ef\u7528\u7684\u5206\u533a\u6765\u5199\u5165 \u975e\u7a7a\u5c31\u7528\u5185\u7f6e\u5206\u533a\u5668\uff0c\u5148\u7528 Utils.murmur2 \u6765 hash \uff0c \u6700\u540e % numPartitions 2.1.4 \u6d88\u606f\u53d1\u9001 \u00b6 \u53d1\u9001\u6a21\u5f0f\u6709\u4e09\u79cd: \u53d1\u540e\u5373\u5fd8( fire-and-forget )\u3001 \u540c\u6b65 ( sync )\u3001 \u5f02\u6b65( async )\uff0c\u5176\u5b9e send \u8fd4\u56de\u7684\u662f Future \u5bf9\u8c61\uff0c\u6240\u4ee5\u4f20\u53c2\u80af\u5b9a\u6709 Callback \u7684\u5165\u53c2\uff0c\u8981\u540c\u6b65\u6a21\u5f0f\u7684\u8bdd\uff0c\u76f4\u63a5 Future.get \u5373\u53ef\u3002 \u8fd9\u91cc\u8bb2\u8bb2\u589e\u52a0\u53ef\u9760\u6027\u7684\u5957\u8def \u6ce8\u610f\uff1a \u63d0\u9ad8\u53ef\u9760\u6027\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d props.put(ProducerConfig.RETRIES_CONFIG, 10); // \u589e\u52a0\u91cd\u8bd5\u6b21\u6570 props.put(ProducerConfig.ACKS_CONFIG, -1); // \u786e\u4fdd\u6240\u6709\u526f\u672c\u6709\u54cd\u5e94\u4e86\u624d\u5f53\u6210\u529f 2.2 \u539f\u7406\u5206\u6790 \u00b6 2.2.1 \u6574\u4f53\u67b6\u6784 \u00b6 \u5b8c\u6574\u7684\u53d1\u9001\u6d41\u7a0b\u56fe\u5982\u4e0b: \u6574\u4f53\u6d41\u7a0b\u5206\u4e24\u4e2a\u7ebf\u7a0b\u5b8c\u6210\uff0c\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u4e00\u4e2a\u53d1\u9001\u7ebf\u7a0b, 1-5 \u4e3b\u7ebf\u7a0b\u5b8c\u6210 \u4e3b\u7ebf\u7a0b\u901a\u8fc7 KafkaProducer \u521b\u5efa\u6d88\u606f \u770b\u5ba2\u6237\u7aef\u6709\u6ca1\u6709\u5b9e\u73b0 ProducerIntercepter \u8fd9\u4e2a\u63a5\u53e3\uff0c\u5982\u679c\u6709\u5c31\u5bf9\u6d88\u606f\u8fdb\u884c\u62e6\u622a\u5904\u7406\uff0c\u4e00\u822c\u62e6\u622a\u662f\u4e3a\u4e86\u5bf9\u6d88\u606f\u505a\u7b80\u5355\u5904\u7406\uff0c\u56e0\u4e3a\u592a\u590d\u6742\u4f1a\u5f71\u54cd\u53d1\u9001\u901f\u5ea6\uff0c\u540c\u65f6\u8fd9\u73a9\u610f\u662f\u53ef\u4ee5\u94fe\u5f0f\u7f16\u7a0b\u7684\uff0c\u91cc\u9762\u7684 onSend() \u5728\u53d1\u9001\u524d\u89e6\u53d1, onAcknowleagement() \u5728 Selector \u8fd4\u56de Response \u540e\u9a6c\u4e0a\u89e6\u53d1\uff1f \u5bf9\u6d88\u606f\u7684 key , value \u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u8981\u81ea\u5b9a\u4e49\uff0c\u5c31\u5b9e\u73b0 org.apache.kafka.common.serlization.Seralizer \u63a5\u53e3\uff0c configure() \u914d\u7f6e\u5f53\u524d\u7c7b\uff0c serialize(String topic, T data) \u5c31\u662f\u5e8f\u5217\u5316\u65b9\u6cd5\uff0c\u8fd4\u56de byte[] , close() \u7528\u6765\u5173\u95ed\u5e8f\u5217\u5316\u5668 \u77e5\u9053 Topic \u4e86\uff0c\u5c31\u5f97\u77e5\u9053\u6d88\u606f\u5f80\u54ea\u4e2a\u5206\u533a\u53d1\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u81ea\u5b9a\u4e49\u5206\u533a\u5668\uff0c\u90a3\u4e48\u5c31\u7528\u9ed8\u8ba4\u65b9\u6cd5\u6765\u786e\u5b9a\u53d1\u9001\u7684\u5206\u533a\uff0c\u5982\u679c\u6709\u5c31\u6839\u636e\u81ea\u5b9a\u4e49\u7684\u7ed3\u679c\u786e\u5b9a\u5206\u533a\u53f7 \u4e3b\u7ebf\u7a0b\u628a\u6d88\u606f\u7f13\u5b58\u5230\u5bf9\u5e94\u7684 RecordAccumulator \u4e2d\uff0c \u6570\u636e\u7ed3\u6784\u662f Map<Partiion, Deque\\ > \uff0c buffer.memory \u63a7\u5236\u5927\u5c0f\uff0c\u6d88\u606f\u592a\u591a\u4f1a\u963b\u585e\u53d1\u9001\u65b9\u6cd5\uff0c max.block.ms \u63a7\u5236\u963b\u585e\u7b49\u5f85\u65f6\u95f4\uff0c batch.size \u63a7\u5236 ProducerBatch \u5927\u5c0f Sender \u7ebf\u7a0b\u521b\u5efa Sender \u5bf9\u8c61\uff0c\u628a RecordAccumulator . Map<Partiion, Deque\\ > \u8f6c\u6362\u6210 Map<Node, List\\ > \uff0c\u6700\u540e\u5c01\u6210 \u5bf9\u8c61 \u8f6c\u6210 Map<NodeId, Deque\\ > \u653e\u5230 InFlightRequests \u4e2d, \u8fd9\u73a9\u610f\u662f\u7528\u6765\u8bb0\u5f55\u53d1\u4e86\uff0c\u4f46\u6ca1\u6709\u54cd\u5e94\u7684 Request \uff0c max.in.flight.requests.per.connection \u9ed8\u8ba4\u4e3a5\uff0c\u8868\u793a\u6bcf\u4e2a\u8fde\u63a5\u6700\u5927\u7b49\u5f85\u54cd\u5e94\u7684\u8bf7\u6c42\u6570\u662f5\uff0c\u8d85\u8fc75\u5c31\u4e0d\u80fd\u53d1\u9001\u4e86\u3002\u8fd8\u80fd\u6839\u636e Deque .size() \u6765\u5224\u65ad\u6bcf\u4e2a Node \u7684\u8d1f\u8f7d\u60c5\u51b5 2.2.2 \u5143\u6570\u636e\u66f4\u65b0 \u00b6 \u5143\u6570\u636e\u6307\u7684\u662f\u5404\u4e2a\u8282\u70b9\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u8282\u70b9\u5730\u5740\u3001\u8282\u70b9\u4e3b\u9898\u3001\u8282\u70b9\u7684\u5206\u533a\u3001\u5206\u533a leader/follower \u526f\u672c\u4fe1\u606f\uff0c AR/ISR , Controller \u8282\u70b9 \u4e0a\u8ff0\u7684\u5143\u6570\u636e\u662f\u901a\u8fc7 Sender \u7ebf\u7a0b\u6765\u66f4\u65b0\u7684\uff0c\u66f4\u65b0\u6b65\u9aa4\u5982\u4e0b 1. \u627e\u51fa leastLoadedNode ( count \u4e00\u4e0b InFlightRequests . Deque .size() ) 2. \u53d1\u9001 MetadataRequest \uff0c\u7136\u540e\u7f13\u5b58\u5230 InFlightRequests 2.3 \u91cd\u8981\u7684\u751f\u4ea7\u8005\u53c2\u6570 \u00b6 \u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u5728\u521b\u5efa Producer \u7684\u65f6\u5019\u653e\u5230 props \u91cc\u9762\u7684 ack : = 1 \u8868\u793a leader \u526f\u672c\u6210\u529f\u5199\u5165\uff0c\u5c31\u4f1a\u6536\u5230\u6765\u81ea\u670d\u52a1\u7aef\u7684\u5199\u5165\u6210\u529f\u54cd\u5e94\uff0c\u6570\u636e\u6709\u53ef\u80fd\u4f1a\u4e22 = 0 \u8868\u793a\u4e0d\u7528\u7b49\u670d\u52a1\u7aef\u4efb\u4f55\u54cd\u5e94\u3002\u901f\u5ea6\u6700\u5feb\u662f\u5b83\u4e86, \u4f46\u5b83\u6700\u5bb9\u6613\u4e22\u6570\u636e =-1 \u8868\u793a\u6240\u6709 ISR \u6210\u529f\u5199\u5165\u624d\u8fd4\u56de\u6210\u529f, \u6700\u5927\u53ef\u9760\u6027\u662f\u5b83\u4e86 max.request.size : \u5ba2\u6237\u7aef\u80fd\u53d1\u9001\u6d88\u606f\u7684\u6700\u5927\u503c\uff0c\u9ed8\u8ba4 1048576 B =1 M \uff0c\u5fc5\u987b <= broker . message.max.size retries : \u751f\u4ea7\u8005\u91cd\u8bd5\u6b21\u6570 retry.backoff.ms : \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4 100 compression.type : \u6d88\u606f\u538b\u7f29\u65b9\u5f0f\uff0c\u9ed8\u8ba4 none \uff0c\u53ef\u4ee5\u4e3a gzip snappy lz4 connections.max.idle.ms : \u6bcf\u4e2a\u9650\u5236\u8fde\u63a5\u6700\u5927\u5b58\u6d3b\u65f6\u95f4 linger.ms : \u53d1\u9001 ProducerBacth \u4e4b\u524d\u7b49\u5f85\u66f4\u591a\u6d88\u606f\u7684\u65f6\u95f4\uff0c\u7528\u6765\u63a7\u5236\u541e\u5410\u91cf\u7684 recieve.buffer.byte : \u63a7\u5236 Socket \u63a5\u6536\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 32768( B )=32 KB send.buffer.byte : \u63a7\u5236 Socket \u53d1\u9001\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 131072( B )=128 KB \u7b2c\u4e09\u7ae0 \u6d88\u8d39\u8005 \u00b6 3.1 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4 \u00b6 \u770b\u4e0b\u56fe\u5c31\u77e5\u9053\u5927\u6982\u610f\u601d\u4e86 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4\u3001\u5206\u533a\u7684\u5173\u7cfb\u5c31\u4ee5\u4e0b\u51e0\u70b9\uff1a \u6d88\u8d39\u8005\u662f\u4ee5\u5206\u533a\u4e3a\u5355\u4f4d\u8fdb\u884c\u6d88\u8d39 \u540c\u4e00 Topic \u4e0b\u7684\u6d88\u8d39\u7ec4\uff0c\u91cc\u9762\u7684\u6d88\u8d39\u8005\u4f1a\u5747\u644a Topic \u5185\u7684 partition \uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u51fa\u73b0 partition \u4e0d\u591f\u5206\u7684\u60c5\u51b5 \u6d88\u8d39\u7ec4\u5185\u7684\u6d88\u8d39\u8005\uff0c\u5728\u6d88\u8d39\u540c\u4e00 topic \u4e0b\u7684\u6d88\u606f\uff0c\u663e\u7136\u53ea\u4f1a\u6d88\u8d39\u4e00\u6b21\uff0c\u76f8\u5f53\u4e8e p2p \u6a21\u5f0f \u5982\u679c\u662f\u4e0d\u540c\u7ec4\u7684\u6d88\u8d39\u8005\uff0c\u5c31\u76f8\u5f53\u4e8e\u5e7f\u64ad\u6a21\u5f0f\u4e86 3.2 \u5ba2\u6237\u7aef\u5f00\u53d1 \u00b6 \u8001\u89c4\u77e9\uff0c\u5148\u628a\u6284\u7684\u4ee3\u7801\u8d34\u51fa\u6765 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.clients.consumer.KafkaConsumer; import java.time.Duration; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.concurrent.atomic.AtomicBoolean; public class KafkaConsumerDemo { public static final String BROKER_LIST = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String TOPIC = \"test\"; private static final String GROUP_ID = \"group.demo\"; public static final AtomicBoolean IS_RUNNING = new AtomicBoolean(true); public static Map<String, Object> initConfig() { Map<String, Object> props = new HashMap<>(); props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); props.put(ConsumerConfig.CLIENT_ID_CONFIG, \"producer.client.id.demo\"); props.put(ConsumerConfig.GROUP_ID_CONFIG, GROUP_ID); return props; } public static void main(String[] args) { try (KafkaConsumer<String, String> consumer = new KafkaConsumer<>(initConfig())) { consumer.subscribe(List.of(TOPIC)); while (IS_RUNNING.get()) { ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, String> record : records) { System.out.printf(\" TOPIC = %s, partition = %s, offset = %s, key = %s, value = %s \\n\", record.topic(), record.partition(), record.offset(), record.key(), record.value()); } } } catch (Exception e) { System.out.println(e.getMessage()); } } } 3.2.1 \u5fc5\u8981\u7684\u53c2\u6570\u914d\u7f6e \u00b6 \u4e00\u822c\u90fd\u662f\u90a3\u51e0\u4e2a\u4e86\uff0c\u6709\u4e86\u751f\u4ea7\u8005\u4ee3\u7801\u7684\u7ecf\u9a8c\u4e4b\u540e\uff0c\u7784\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u8fd8\u6709\u5c31\u662f\u751f\u4ea7\u4e0a\u6700\u597d\u7528 ConsumerConfig \u7684\u679a\u4e3e\uff0c\u81ea\u5df1\u5199\u5bb9\u6613\u51fa\u9519 bootstrap.server : \u8fde\u7684 kafka.brokers \u7684\u5217\u8868 group.id : \u5c31\u662f\u6d88\u8d39\u8005\u7ec4 id , \u5982\u679c\u662f\u7a7a\u7684\uff0c \u4f1a\u63d0\u793a To use the group management or offset commit APIs, you must provide a valid group.id in the consumer configuration. ( kafka-client v 3.7.0 ) key.deserializer : key \u7684\u53cd\u5e8f\u5217\u5316\u5668\uff0c \u8ddf\u751f\u4ea7\u8005\u7684 key.serializer \u53cd\u8fc7\u6765\u5c31\u884c value.deserializer : value \u7684\u53cd\u5e8f\u5217\u5316\u5668\uff0c \u8ddf\u751f\u4ea7\u8005\u7684 value.serializer \u53cd\u8fc7\u6765\u5c31\u884c 3.2.2 KafkaConsumer \u521d\u59cb\u5316\u6e90\u7801 \u00b6 \u8fd9\u90e8\u5206\u5e72\u8d27\uff0c\u539f\u4e66\u6ca1\u6709\u7684\uff0c\u6211\u662f\u5728\u627e\u62e6\u622a\u5668\u89e6\u53d1\u65f6\u673a\u7684\u65f6\u5019\u770b\u6e90\u7801\uff0c\u89c9\u5f97\u633a\u6709\u610f\u601d\u7684\uff0c\u635e\u51fa\u6765\u7ed9\u5927\u5bb6\u5206\u4eab KafkaConsumer \u8fd9\u4e2a\u7c7b\u5176\u5b9e\u662f\u7528\u4e86\u4ee3\u7406\u6a21\u5f0f\u751f\u6210\u4e86\u5b9e\u9645\u6267\u884c\u7684 KafkaConsumer \u5bf9\u8c61 public class KafkaConsumer<K, V> implements Consumer<K, V>{ KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { this.delegate = CREATOR.create(config, keyDeserializer, valueDeserializer); } KafkaConsumer(LogContext logContext, Time time, ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer, KafkaClient client, SubscriptionState subscriptions, ConsumerMetadata metadata, List<ConsumerPartitionAssignor> assignors) { this.delegate = CREATOR.create(logContext, time, config, keyDeserializer, valueDeserializer, client, subscriptions, metadata, assignors); } } \u91cc\u9762\u6839\u636e group.protocol \u751f\u6210\u4e24\u79cd\u6d88\u8d39\u8005\u5bf9\u8c61\uff0c\u4e00\u4e2a\u662f AsyncKafkaConsumer , \u4e00\u4e2a\u662f legacyKafkaConsumer public <K, V> ConsumerDelegate<K, V> create(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { try { GroupProtocol groupProtocol = GroupProtocol.valueOf(config.getString(\"group.protocol\").toUpperCase(Locale.ROOT)); return (ConsumerDelegate)(groupProtocol == GroupProtocol.CONSUMER ? new AsyncKafkaConsumer(config, keyDeserializer, valueDeserializer) : new LegacyKafkaConsumer(config, keyDeserializer, valueDeserializer)); } catch (KafkaException var5) { throw var5; } catch (Throwable var6) { throw new KafkaException(\"Failed to construct Kafka consumer\", var6); } } 3.2.4 \u8ba2\u9605\u4e3b\u9898\u4e0e\u5206\u533a \u00b6 \u8fd9\u4e00\u4e2a\u7ae0\u8282\u4e3b\u8981\u8bb2\u7684\u662f subsribe() \u548c assign() \u65b9\u6cd5 \u4e3b\u9898\u8ba2\u9605\u652f\u6301\u7684\u6a21\u5f0f: AUTO_TOPICS : \u5168\u540d\u79f0\u5339\u914d\uff0c\u4f46\u662f\u9700\u8981\u4f20\u4e3b\u9898\u6570\u7ec4\u505a\u4e3a\u4f20\u53c2, AUTO_PATTERN : \u6b63\u5219\u5339\u914d\u6a21\u5f0f USER_ASSIGNED : \u7528\u6237\u5206\u914d\u6a21\u5f0f\uff0c\u5206\u914d\u6307\u5b9a topic \u4e0b\u7684 partition \u4e3b\u9898\u8ba2\u9605\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u518d\u5e73\u8861\u7684\u56de\u8c03\u65b9\u6cd5 3.2.5 \u6d88\u8d39\u8005\u62e6\u622a\u5668 \u00b6 \u8ddf\u539f\u4e66\u987a\u5e8f\u4e0d\u4e00\u6837\uff0c\u6211\u662f\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\u6765\u8bb2\u7684 \u62e6\u622a\u5668\u7684\u4f5c\u7528\u5176\u5b9e\u8ddf\u5176\u4ed6\u6846\u67b6\u90fd\u4e00\u6837\uff0c\u90fd\u662f\u7ed9\u76ee\u6807\u5bf9\u8c61\u4e00\u4e2a\u5207\u9762\uff0c\u5728\u89e6\u53d1\u67d0\u4e9b\u4e8b\u4ef6/\u52a8\u4f5c\u7684\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\uff0c\u5148\u8d34\u4e00\u4e0b ConsumerInterceptor \u7684\u63a5\u53e3\u6e90\u7801 public interface ConsumerInterceptor<K, V> extends Configurable, AutoCloseable { ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> var1); void onCommit(Map<TopicPartition, OffsetAndMetadata> var1); void close(); } OnConsume \u65b9\u6cd5\u89e6\u53d1\u65f6\u673a\u5728 AsyncKafkaConsumer.poll()/LegacyKafakConsumer.poll() \u4e2d\uff0c\u5f53\u6267\u884c\u4e86 pollForFethces \u4e4b\u540e\u4f1a\u8fd4\u56de fetch \u63a5\u7740\u5c31\u6267\u884c onConsume(fetch.records()) \u4f8b\u5b50 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerInterceptor; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.common.TopicPartition; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class KafkaConsumerInterceptor implements ConsumerInterceptor<String, String> { private static final long EXPIRE_INTERVAL = 10 * 1000; @Override public ConsumerRecords<String, String> onConsume(ConsumerRecords<String, String> records) { long now = System.currentTimeMillis(); Map<TopicPartition, List<ConsumerRecord<String, String>>> newRecords = new HashMap<>(); for (TopicPartition tp : records.partitions()) { List<ConsumerRecord<String, String>> list = records.records(tp); List<ConsumerRecord<String, String>> filter = new ArrayList<>(); for (ConsumerRecord<String, String> i : list) { if(now - i.timestamp() < EXPIRE_INTERVAL){ filter.add(i); } } newRecords.put(tp, filter); } return new ConsumerRecords<>(newRecords); } @Override public void close() { } @Override public void onCommit(Map map) { } /** * configure\u4e0d\u662f\u76f4\u63a5\u7ee7\u627f\u81eaInterceptor\u7684 * * @param map \u914d\u7f6emap */ @Override public void configure(Map<String, ?> map) { } } 3.2.6 \u53cd\u5e8f\u5217\u5316 \u00b6","title":"\u6df1\u5165\u7406\u89e3Kafka\uff1a\u6838\u5fc3\u8bbe\u8ba1\u4e0e\u5b9e\u8df5\u539f\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#-kafka","text":"\u7b80\u5355\u8bb0\u4e0b\u7b14\u8bb0","title":"\u7b14\u8bb0-\u6df1\u5165\u7406\u89e3Kafka\uff1a\u6838\u5fc3\u8bbe\u8ba1\u4e0e\u5b9e\u8df5\u539f\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#kafka","text":"\u9996\u5148\u77e5\u9053\u4ed6\u662f\u5565\uff1a \u6d88\u606f\u7cfb\u7edf\uff1a \u5c31\u662f\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u7cfb\u7edf\uff0c\u4f5c\u7528\u65e0\u975e\u5c31\u90a3\u51e0\u4e2a-\u89e3\u8026\uff0c\u524a\u5cf0\u3001\u5f02\u6b65\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u81ea\u5df1\u7684\u96c6\u7fa4\u7279\u6027\uff0c\u505a\u5230\u53ef\u6269\u5c55\u3001\u53ef\u6062\u590d \u6301\u4e45\u5316\uff1a log\u6587\u4ef6\u5b58\u6d88\u606f \u6d41\u5f0f\u5904\u7406\u5e73\u53f0\uff1a\u63d0\u4f9b\u63a5\u53e3\u6765\u505a\u7a97\u53e3\u3001\u8fde\u63a5\u3001\u53d8\u6362\u548c\u805a\u5408\u7b49\u7b49\u7684\u64cd\u4f5c","title":"\u7b2c\u4e00\u7ae0 \u521d\u8bc6Kafka"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#11","text":"\u770b\u4e0b\u56fe\u5c31\u597d\uff1a Producer : \u751f\u4ea7\u8005 Broker : \u5c31\u662f Kafka Server Consumer : \u6d88\u8d39\u8005 Message.Topic : \u6d88\u606f\u662f\u6309Topic\u53bb\u5206\u7684 Message.Topic.Partition : Topic \u5212\u5206\u4e3a\u4e0d\u540c\u7684\u5206\u533a\u5b58\u50a8\uff0c\u5206\u533a\u7684\u6570\u91cf\u3001\u5206\u914d\u89c4\u5219\uff0c\u80fd\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\uff0c\u540c\u65f6\u8fd8\u80fd\u5728\u8fd0\u884c\u65f6\uff0c\u52a8\u6001\u4fee\u6539\u521b\u5efa\u4e3b\u9898\u65f6\u7684\u5206\u533a\u6570\u91cf\uff08\u53ea\u80fd\u589e\uff0c\u4e0d\u80fd\u51cf\uff09\u3001\u5206\u914d\u89c4\u5219 Message.Topic.Partition.Replicas : \u5206\u533a\u65f6\u6709\u526f\u672c\u7684\uff0c\u6bcf\u4e2a\u5206\u533a\u7684\u526f\u672c\u6570\u91cf\uff0c\u5206\u914d\u89c4\u5219\u4e5f\u662f\u8ddf\u4e0a\u9762\u4e00\u6837\uff0c\u53ef\u4ee5\u9759\u6001\u8bbe\u7f6e\uff0c\u52a8\u6001\u4fee\u6539 AR( Assigned Replicas ) , ISR (In-Sync Replicas) , OSR (Out-Sync Replicas) => AR = ISR + OSR \"Leader Replicas\": \u4e3b\u526f\u672c\uff0c \u8d1f\u8d23\u8bfb\u5199 \"Follower Replica\": \u4ece\u526f\u672c\uff0c\u8d1f\u8d23\u8bb0\u5f55\u732a\u526f\u672c\u6570\u636e\uff0c\u6709\u4e00\u5b9a\u6ede\u540e\u6027 Message.Topic.Partition.Replica.LEO : \u8be5\u5206\u533a\u4e0b\u4e00\u6761\u6d88\u606f\u5f85\u5199\u5165\u7684 Offset Message.Topic.Partition.Replica.HW : HW - 1 = \u6d88\u8d39\u8005\u80fd\u6d88\u8d39\u5230\u7684\u6700\u5927 Offset Message.Topic.Partition.Log : \u5728\u6301\u4e45\u5316\u5c42\u4e0a\u53ef\u4ee5\u628a\u5206\u533a\u770b\u6210\u4e00\u4e2a\u8ffd\u52a0\u7684 Log \u6587\u4ef6 Message.Topic.Partition.Offset : \u6307\u6d88\u606f\u5728\u5206\u533a\u4e2d\u7684\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u4e14\u662f\u5206\u533a\u4e2d\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u4e5f\u5c31\u662f Kafka \u662f\u5206\u533a\u5185\u6709\u5e8f\u7684","title":"1.1 \u57fa\u672c\u6982\u5ff5"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#12","text":"3.x \u7248\u672c\u5b89\u88c5\u6bd4\u8f83\u7b80\u5355\uff0c windows/linux \u7248\u672c\u90fd\u662f\u76f4\u63a5\u4e0b\u4e2a\u5305\uff0c\u5728\u672c\u5730\u8dd1\u811a\u672c\u5c31\u597d\u4e86","title":"1.2 \u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#13","text":"\u8fd9\u90e8\u5206\u4ee3\u7801\u5728\u540e\u9762\u7684\u7ae0\u8282\u662f\u4f1a\u8d34\u51fa\u6765\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86","title":"1.3 \u751f\u4ea7\u548c\u6d88\u8d39"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#14","text":"\u8fd9\u91cc\u8d34\u51fa\u6700\u5e38\u89c1\u7684\u51e0\u4e2a\u53c2\u6570\u8bf4\u660e\u4e00\u4e0b\uff0c\u914d\u7f6e\u7684\u5185\u5bb9\u90fd\u662f\u5728 config/server.properties \u91cc\u9762\uff0c3.x \u7248\u672c\u7684\u8bdd\uff0c\u5982\u679c\u8981\u7528 kraft \u7684\u8bdd\uff0c\u5219\u770b config/kraft/server.properties \u6587\u4ef6 process.roles : \u8fdb\u7a0b\u7684\u89d2\u8272\u5217\u8868\uff0c\u9017\u53f7\u5206\u5272\uff0c\u9ed8\u8ba4\uff1a broker,controller node.id : \u8282\u70b9 id \uff0c\u7528\u6765\u6807\u8bc6\u8282\u70b9\uff0c\u5728\u65e5\u5fd7\u53ef\u4ee5\u7528\u6765\u6392\u67e5\u95ee\u9898 listeners : broker \u76d1\u542c\u5ba2\u6237\u7aef\u7684\u534f\u8bae+\u5730\u5740+\u7aef\u53e3,\u683c\u5f0f\u4e3a : \u534f\u8bae://\u5730\u5740:\u7aef\u53e3\uff0c\u534f\u8bae\u503c\u4e3a\uff1a PLAINTEXT, SSL, SASL_SSL log.dirs : \u6301\u4e45\u5316\u76ee\u5f55\uff0c log.dirs \u4f18\u5148\u7ea7\u5927\u4e8e log.dir","title":"1.4 \u670d\u52a1\u7aef\u53c2\u6570\u914d\u7f6e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#_1","text":"","title":"\u7b2c\u4e8c\u7ae0\uff1a\u751f\u4ea7\u8005"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#21","text":"\u8fd9\u91cc\u6211\u5148\u8d34\u6574\u4f53\u7684\u4ee3\u7801\uff0c\u7136\u540e\u518d\u7ec6\u8bf4 package org.example; import org.apache.kafka.clients.producer.KafkaProducer; import org.apache.kafka.clients.producer.ProducerRecord; import java.util.Properties; public class KafkaProducerDemo { public static final String brokerList = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String topic = \"test\"; public static Properties initConfig() { Properties props = new Properties(); props.put(\"bootstrap.servers\", brokerList); props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\"); props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\"); props.put(\"client.id\", \"producer.client.id.demo\"); return props; } public static void main(String[] args) { Properties props = initConfig(); try (KafkaProducer<String, String> producer = new KafkaProducer<>(props)) { ProducerRecord<String, String> record = new ProducerRecord<>(topic, \"hello kafka\"); producer.send(record); } catch (Exception e) { System.out.println(e.getMessage()); } } }","title":"2.1 \u5ba2\u6237\u7aef\u5f00\u53d1"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#211","text":"ProducerInterceptor \u63a5\u53e3\u662f\u8fd9\u6837\u7684 public interface ProducerInterceptor<K, V> extends Configurable, AutoCloseable { ProducerRecord<K, V> onSend(ProducerRecord<K, V> var1); void onAcknowledgement(RecordMetadata var1, Exception var2); void close(); } \u62e6\u622a\u5668\u7684\u6ce8\u5165\u65b9\u5f0f\u662f\u8fd9\u6837\u7684\uff0c\u6e90\u7801\u7528\u53cd\u5c04 (getDeclaredConstructor().newInstance()) \u53bb\u5b9e\u4f8b\u5316\u5bf9\u8c61 props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaProducerInterceptor.class.getName()); \u4ee5 kafka-client 3.7.0 \u4e3a\u4f8b onSend \u65b9\u6cd5\u662f\u5728 KafkaProducer \u6e90\u7801 357 \u884c\u6267\u884c\u7684 public Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback) { ProducerRecord<K, V> interceptedRecord = this.interceptors.onSend(record); return this.doSend(interceptedRecord, callback); } onAcknoledgement \u5219\u662f\u5728 703 \u884c\u89e6\u53d1\uff0c\u5c31\u662f\u5728 onComplete \u7684\u65f6\u5019\u8c03\u7528 public void onCompletion(RecordMetadata metadata, Exception exception) { if (metadata == null) { metadata = new RecordMetadata(this.topicPartition(), -1L, -1, -1L, -1, -1); } this.interceptors.onAcknowledgement(metadata, exception); if (this.userCallback != null) { this.userCallback.onCompletion(metadata, exception); } }","title":"2.1.1 \u62e6\u622a\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#212","text":"StringSerializer \u6e90\u7801\u5982\u4e0b package org.apache.kafka.common.serialization; import java.io.UnsupportedEncodingException; import java.nio.charset.StandardCharsets; import java.util.Map; import org.apache.kafka.common.errors.SerializationException; public class StringSerializer implements Serializer<String> { private String encoding; public StringSerializer() { this.encoding = StandardCharsets.UTF_8.name(); } public void configure(Map<String, ?> configs, boolean isKey) { String propertyName = isKey ? \"key.serializer.encoding\" : \"value.serializer.encoding\"; Object encodingValue = configs.get(propertyName); if (encodingValue == null) { encodingValue = configs.get(\"serializer.encoding\"); } if (encodingValue instanceof String) { this.encoding = (String)encodingValue; } } public byte[] serialize(String topic, String data) { try { return data == null ? null : data.getBytes(this.encoding); } catch (UnsupportedEncodingException var4) { throw new SerializationException(\"Error when serializing string to byte[] due to unsupported encoding \" + this.encoding); } } } \u6ca1\u5565\u7279\u522b\uff0c\u5c31\u662f serialize \u91cc\u8fd4\u56de\u4e86 string.getBytes() \u81ea\u5b9a\u4e49\u7684\u4e5f\u662f\u4e00\u6837\uff0c\u8fd4\u56de byte[] \u5c31\u597d\uff0c\u53cd\u5e8f\u5217\u5316\u9053\u7406\u4e00\u6837","title":"2.1.2 \u5e8f\u5217\u5316\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#213","text":"\u5148\u770b\u770b\u6e90\u7801\u5b9a\u4e49 package org.apache.kafka.clients.producer; import java.io.Closeable; import org.apache.kafka.common.Cluster; import org.apache.kafka.common.Configurable; public interface Partitioner extends Configurable, Closeable { int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster); void close(); /** @deprecated */ @Deprecated default void onNewBatch(String topic, Cluster cluster, int prevPartition) { } } \u9ed8\u8ba4\u5206\u533a\u5668 DefaultPartioner \u6e90\u7801\u662f\u8fd9\u6837\u7684 public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster, int numPartitions) { return keyBytes == null ? this.stickyPartitionCache.partition(topic, cluster) : BuiltInPartitioner.partitionForKey(keyBytes, numPartitions); } \u4e3b\u8981\u770bkey\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u7a7a\u7684\u8bdd\u8c03\u7528 stickyPartitionCache.partition \uff0c \u968f\u673a\u4e00\u4e2a\u53ef\u7528\u7684\u5206\u533a\u6765\u5199\u5165 \u975e\u7a7a\u5c31\u7528\u5185\u7f6e\u5206\u533a\u5668\uff0c\u5148\u7528 Utils.murmur2 \u6765 hash \uff0c \u6700\u540e % numPartitions","title":"2.1.3 \u5206\u533a\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#214","text":"\u53d1\u9001\u6a21\u5f0f\u6709\u4e09\u79cd: \u53d1\u540e\u5373\u5fd8( fire-and-forget )\u3001 \u540c\u6b65 ( sync )\u3001 \u5f02\u6b65( async )\uff0c\u5176\u5b9e send \u8fd4\u56de\u7684\u662f Future \u5bf9\u8c61\uff0c\u6240\u4ee5\u4f20\u53c2\u80af\u5b9a\u6709 Callback \u7684\u5165\u53c2\uff0c\u8981\u540c\u6b65\u6a21\u5f0f\u7684\u8bdd\uff0c\u76f4\u63a5 Future.get \u5373\u53ef\u3002 \u8fd9\u91cc\u8bb2\u8bb2\u589e\u52a0\u53ef\u9760\u6027\u7684\u5957\u8def \u6ce8\u610f\uff1a \u63d0\u9ad8\u53ef\u9760\u6027\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d props.put(ProducerConfig.RETRIES_CONFIG, 10); // \u589e\u52a0\u91cd\u8bd5\u6b21\u6570 props.put(ProducerConfig.ACKS_CONFIG, -1); // \u786e\u4fdd\u6240\u6709\u526f\u672c\u6709\u54cd\u5e94\u4e86\u624d\u5f53\u6210\u529f","title":"2.1.4 \u6d88\u606f\u53d1\u9001"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#22","text":"","title":"2.2 \u539f\u7406\u5206\u6790"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#221","text":"\u5b8c\u6574\u7684\u53d1\u9001\u6d41\u7a0b\u56fe\u5982\u4e0b: \u6574\u4f53\u6d41\u7a0b\u5206\u4e24\u4e2a\u7ebf\u7a0b\u5b8c\u6210\uff0c\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u4e00\u4e2a\u53d1\u9001\u7ebf\u7a0b, 1-5 \u4e3b\u7ebf\u7a0b\u5b8c\u6210 \u4e3b\u7ebf\u7a0b\u901a\u8fc7 KafkaProducer \u521b\u5efa\u6d88\u606f \u770b\u5ba2\u6237\u7aef\u6709\u6ca1\u6709\u5b9e\u73b0 ProducerIntercepter \u8fd9\u4e2a\u63a5\u53e3\uff0c\u5982\u679c\u6709\u5c31\u5bf9\u6d88\u606f\u8fdb\u884c\u62e6\u622a\u5904\u7406\uff0c\u4e00\u822c\u62e6\u622a\u662f\u4e3a\u4e86\u5bf9\u6d88\u606f\u505a\u7b80\u5355\u5904\u7406\uff0c\u56e0\u4e3a\u592a\u590d\u6742\u4f1a\u5f71\u54cd\u53d1\u9001\u901f\u5ea6\uff0c\u540c\u65f6\u8fd9\u73a9\u610f\u662f\u53ef\u4ee5\u94fe\u5f0f\u7f16\u7a0b\u7684\uff0c\u91cc\u9762\u7684 onSend() \u5728\u53d1\u9001\u524d\u89e6\u53d1, onAcknowleagement() \u5728 Selector \u8fd4\u56de Response \u540e\u9a6c\u4e0a\u89e6\u53d1\uff1f \u5bf9\u6d88\u606f\u7684 key , value \u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u8981\u81ea\u5b9a\u4e49\uff0c\u5c31\u5b9e\u73b0 org.apache.kafka.common.serlization.Seralizer \u63a5\u53e3\uff0c configure() \u914d\u7f6e\u5f53\u524d\u7c7b\uff0c serialize(String topic, T data) \u5c31\u662f\u5e8f\u5217\u5316\u65b9\u6cd5\uff0c\u8fd4\u56de byte[] , close() \u7528\u6765\u5173\u95ed\u5e8f\u5217\u5316\u5668 \u77e5\u9053 Topic \u4e86\uff0c\u5c31\u5f97\u77e5\u9053\u6d88\u606f\u5f80\u54ea\u4e2a\u5206\u533a\u53d1\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u81ea\u5b9a\u4e49\u5206\u533a\u5668\uff0c\u90a3\u4e48\u5c31\u7528\u9ed8\u8ba4\u65b9\u6cd5\u6765\u786e\u5b9a\u53d1\u9001\u7684\u5206\u533a\uff0c\u5982\u679c\u6709\u5c31\u6839\u636e\u81ea\u5b9a\u4e49\u7684\u7ed3\u679c\u786e\u5b9a\u5206\u533a\u53f7 \u4e3b\u7ebf\u7a0b\u628a\u6d88\u606f\u7f13\u5b58\u5230\u5bf9\u5e94\u7684 RecordAccumulator \u4e2d\uff0c \u6570\u636e\u7ed3\u6784\u662f Map<Partiion, Deque\\ > \uff0c buffer.memory \u63a7\u5236\u5927\u5c0f\uff0c\u6d88\u606f\u592a\u591a\u4f1a\u963b\u585e\u53d1\u9001\u65b9\u6cd5\uff0c max.block.ms \u63a7\u5236\u963b\u585e\u7b49\u5f85\u65f6\u95f4\uff0c batch.size \u63a7\u5236 ProducerBatch \u5927\u5c0f Sender \u7ebf\u7a0b\u521b\u5efa Sender \u5bf9\u8c61\uff0c\u628a RecordAccumulator . Map<Partiion, Deque\\ > \u8f6c\u6362\u6210 Map<Node, List\\ > \uff0c\u6700\u540e\u5c01\u6210 \u5bf9\u8c61 \u8f6c\u6210 Map<NodeId, Deque\\ > \u653e\u5230 InFlightRequests \u4e2d, \u8fd9\u73a9\u610f\u662f\u7528\u6765\u8bb0\u5f55\u53d1\u4e86\uff0c\u4f46\u6ca1\u6709\u54cd\u5e94\u7684 Request \uff0c max.in.flight.requests.per.connection \u9ed8\u8ba4\u4e3a5\uff0c\u8868\u793a\u6bcf\u4e2a\u8fde\u63a5\u6700\u5927\u7b49\u5f85\u54cd\u5e94\u7684\u8bf7\u6c42\u6570\u662f5\uff0c\u8d85\u8fc75\u5c31\u4e0d\u80fd\u53d1\u9001\u4e86\u3002\u8fd8\u80fd\u6839\u636e Deque .size() \u6765\u5224\u65ad\u6bcf\u4e2a Node \u7684\u8d1f\u8f7d\u60c5\u51b5","title":"2.2.1 \u6574\u4f53\u67b6\u6784"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#222","text":"\u5143\u6570\u636e\u6307\u7684\u662f\u5404\u4e2a\u8282\u70b9\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u8282\u70b9\u5730\u5740\u3001\u8282\u70b9\u4e3b\u9898\u3001\u8282\u70b9\u7684\u5206\u533a\u3001\u5206\u533a leader/follower \u526f\u672c\u4fe1\u606f\uff0c AR/ISR , Controller \u8282\u70b9 \u4e0a\u8ff0\u7684\u5143\u6570\u636e\u662f\u901a\u8fc7 Sender \u7ebf\u7a0b\u6765\u66f4\u65b0\u7684\uff0c\u66f4\u65b0\u6b65\u9aa4\u5982\u4e0b 1. \u627e\u51fa leastLoadedNode ( count \u4e00\u4e0b InFlightRequests . Deque .size() ) 2. \u53d1\u9001 MetadataRequest \uff0c\u7136\u540e\u7f13\u5b58\u5230 InFlightRequests","title":"2.2.2 \u5143\u6570\u636e\u66f4\u65b0"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#23","text":"\u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u5728\u521b\u5efa Producer \u7684\u65f6\u5019\u653e\u5230 props \u91cc\u9762\u7684 ack : = 1 \u8868\u793a leader \u526f\u672c\u6210\u529f\u5199\u5165\uff0c\u5c31\u4f1a\u6536\u5230\u6765\u81ea\u670d\u52a1\u7aef\u7684\u5199\u5165\u6210\u529f\u54cd\u5e94\uff0c\u6570\u636e\u6709\u53ef\u80fd\u4f1a\u4e22 = 0 \u8868\u793a\u4e0d\u7528\u7b49\u670d\u52a1\u7aef\u4efb\u4f55\u54cd\u5e94\u3002\u901f\u5ea6\u6700\u5feb\u662f\u5b83\u4e86, \u4f46\u5b83\u6700\u5bb9\u6613\u4e22\u6570\u636e =-1 \u8868\u793a\u6240\u6709 ISR \u6210\u529f\u5199\u5165\u624d\u8fd4\u56de\u6210\u529f, \u6700\u5927\u53ef\u9760\u6027\u662f\u5b83\u4e86 max.request.size : \u5ba2\u6237\u7aef\u80fd\u53d1\u9001\u6d88\u606f\u7684\u6700\u5927\u503c\uff0c\u9ed8\u8ba4 1048576 B =1 M \uff0c\u5fc5\u987b <= broker . message.max.size retries : \u751f\u4ea7\u8005\u91cd\u8bd5\u6b21\u6570 retry.backoff.ms : \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4 100 compression.type : \u6d88\u606f\u538b\u7f29\u65b9\u5f0f\uff0c\u9ed8\u8ba4 none \uff0c\u53ef\u4ee5\u4e3a gzip snappy lz4 connections.max.idle.ms : \u6bcf\u4e2a\u9650\u5236\u8fde\u63a5\u6700\u5927\u5b58\u6d3b\u65f6\u95f4 linger.ms : \u53d1\u9001 ProducerBacth \u4e4b\u524d\u7b49\u5f85\u66f4\u591a\u6d88\u606f\u7684\u65f6\u95f4\uff0c\u7528\u6765\u63a7\u5236\u541e\u5410\u91cf\u7684 recieve.buffer.byte : \u63a7\u5236 Socket \u63a5\u6536\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 32768( B )=32 KB send.buffer.byte : \u63a7\u5236 Socket \u53d1\u9001\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 131072( B )=128 KB","title":"2.3 \u91cd\u8981\u7684\u751f\u4ea7\u8005\u53c2\u6570"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#_2","text":"","title":"\u7b2c\u4e09\u7ae0 \u6d88\u8d39\u8005"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#31","text":"\u770b\u4e0b\u56fe\u5c31\u77e5\u9053\u5927\u6982\u610f\u601d\u4e86 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4\u3001\u5206\u533a\u7684\u5173\u7cfb\u5c31\u4ee5\u4e0b\u51e0\u70b9\uff1a \u6d88\u8d39\u8005\u662f\u4ee5\u5206\u533a\u4e3a\u5355\u4f4d\u8fdb\u884c\u6d88\u8d39 \u540c\u4e00 Topic \u4e0b\u7684\u6d88\u8d39\u7ec4\uff0c\u91cc\u9762\u7684\u6d88\u8d39\u8005\u4f1a\u5747\u644a Topic \u5185\u7684 partition \uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u51fa\u73b0 partition \u4e0d\u591f\u5206\u7684\u60c5\u51b5 \u6d88\u8d39\u7ec4\u5185\u7684\u6d88\u8d39\u8005\uff0c\u5728\u6d88\u8d39\u540c\u4e00 topic \u4e0b\u7684\u6d88\u606f\uff0c\u663e\u7136\u53ea\u4f1a\u6d88\u8d39\u4e00\u6b21\uff0c\u76f8\u5f53\u4e8e p2p \u6a21\u5f0f \u5982\u679c\u662f\u4e0d\u540c\u7ec4\u7684\u6d88\u8d39\u8005\uff0c\u5c31\u76f8\u5f53\u4e8e\u5e7f\u64ad\u6a21\u5f0f\u4e86","title":"3.1 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#32","text":"\u8001\u89c4\u77e9\uff0c\u5148\u628a\u6284\u7684\u4ee3\u7801\u8d34\u51fa\u6765 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.clients.consumer.KafkaConsumer; import java.time.Duration; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.concurrent.atomic.AtomicBoolean; public class KafkaConsumerDemo { public static final String BROKER_LIST = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String TOPIC = \"test\"; private static final String GROUP_ID = \"group.demo\"; public static final AtomicBoolean IS_RUNNING = new AtomicBoolean(true); public static Map<String, Object> initConfig() { Map<String, Object> props = new HashMap<>(); props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); props.put(ConsumerConfig.CLIENT_ID_CONFIG, \"producer.client.id.demo\"); props.put(ConsumerConfig.GROUP_ID_CONFIG, GROUP_ID); return props; } public static void main(String[] args) { try (KafkaConsumer<String, String> consumer = new KafkaConsumer<>(initConfig())) { consumer.subscribe(List.of(TOPIC)); while (IS_RUNNING.get()) { ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, String> record : records) { System.out.printf(\" TOPIC = %s, partition = %s, offset = %s, key = %s, value = %s \\n\", record.topic(), record.partition(), record.offset(), record.key(), record.value()); } } } catch (Exception e) { System.out.println(e.getMessage()); } } }","title":"3.2 \u5ba2\u6237\u7aef\u5f00\u53d1"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#321","text":"\u4e00\u822c\u90fd\u662f\u90a3\u51e0\u4e2a\u4e86\uff0c\u6709\u4e86\u751f\u4ea7\u8005\u4ee3\u7801\u7684\u7ecf\u9a8c\u4e4b\u540e\uff0c\u7784\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u8fd8\u6709\u5c31\u662f\u751f\u4ea7\u4e0a\u6700\u597d\u7528 ConsumerConfig \u7684\u679a\u4e3e\uff0c\u81ea\u5df1\u5199\u5bb9\u6613\u51fa\u9519 bootstrap.server : \u8fde\u7684 kafka.brokers \u7684\u5217\u8868 group.id : \u5c31\u662f\u6d88\u8d39\u8005\u7ec4 id , \u5982\u679c\u662f\u7a7a\u7684\uff0c \u4f1a\u63d0\u793a To use the group management or offset commit APIs, you must provide a valid group.id in the consumer configuration. ( kafka-client v 3.7.0 ) key.deserializer : key \u7684\u53cd\u5e8f\u5217\u5316\u5668\uff0c \u8ddf\u751f\u4ea7\u8005\u7684 key.serializer \u53cd\u8fc7\u6765\u5c31\u884c value.deserializer : value \u7684\u53cd\u5e8f\u5217\u5316\u5668\uff0c \u8ddf\u751f\u4ea7\u8005\u7684 value.serializer \u53cd\u8fc7\u6765\u5c31\u884c","title":"3.2.1 \u5fc5\u8981\u7684\u53c2\u6570\u914d\u7f6e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#322_kafkaconsumer","text":"\u8fd9\u90e8\u5206\u5e72\u8d27\uff0c\u539f\u4e66\u6ca1\u6709\u7684\uff0c\u6211\u662f\u5728\u627e\u62e6\u622a\u5668\u89e6\u53d1\u65f6\u673a\u7684\u65f6\u5019\u770b\u6e90\u7801\uff0c\u89c9\u5f97\u633a\u6709\u610f\u601d\u7684\uff0c\u635e\u51fa\u6765\u7ed9\u5927\u5bb6\u5206\u4eab KafkaConsumer \u8fd9\u4e2a\u7c7b\u5176\u5b9e\u662f\u7528\u4e86\u4ee3\u7406\u6a21\u5f0f\u751f\u6210\u4e86\u5b9e\u9645\u6267\u884c\u7684 KafkaConsumer \u5bf9\u8c61 public class KafkaConsumer<K, V> implements Consumer<K, V>{ KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { this.delegate = CREATOR.create(config, keyDeserializer, valueDeserializer); } KafkaConsumer(LogContext logContext, Time time, ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer, KafkaClient client, SubscriptionState subscriptions, ConsumerMetadata metadata, List<ConsumerPartitionAssignor> assignors) { this.delegate = CREATOR.create(logContext, time, config, keyDeserializer, valueDeserializer, client, subscriptions, metadata, assignors); } } \u91cc\u9762\u6839\u636e group.protocol \u751f\u6210\u4e24\u79cd\u6d88\u8d39\u8005\u5bf9\u8c61\uff0c\u4e00\u4e2a\u662f AsyncKafkaConsumer , \u4e00\u4e2a\u662f legacyKafkaConsumer public <K, V> ConsumerDelegate<K, V> create(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { try { GroupProtocol groupProtocol = GroupProtocol.valueOf(config.getString(\"group.protocol\").toUpperCase(Locale.ROOT)); return (ConsumerDelegate)(groupProtocol == GroupProtocol.CONSUMER ? new AsyncKafkaConsumer(config, keyDeserializer, valueDeserializer) : new LegacyKafkaConsumer(config, keyDeserializer, valueDeserializer)); } catch (KafkaException var5) { throw var5; } catch (Throwable var6) { throw new KafkaException(\"Failed to construct Kafka consumer\", var6); } }","title":"3.2.2 KafkaConsumer \u521d\u59cb\u5316\u6e90\u7801"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#324","text":"\u8fd9\u4e00\u4e2a\u7ae0\u8282\u4e3b\u8981\u8bb2\u7684\u662f subsribe() \u548c assign() \u65b9\u6cd5 \u4e3b\u9898\u8ba2\u9605\u652f\u6301\u7684\u6a21\u5f0f: AUTO_TOPICS : \u5168\u540d\u79f0\u5339\u914d\uff0c\u4f46\u662f\u9700\u8981\u4f20\u4e3b\u9898\u6570\u7ec4\u505a\u4e3a\u4f20\u53c2, AUTO_PATTERN : \u6b63\u5219\u5339\u914d\u6a21\u5f0f USER_ASSIGNED : \u7528\u6237\u5206\u914d\u6a21\u5f0f\uff0c\u5206\u914d\u6307\u5b9a topic \u4e0b\u7684 partition \u4e3b\u9898\u8ba2\u9605\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u518d\u5e73\u8861\u7684\u56de\u8c03\u65b9\u6cd5","title":"3.2.4 \u8ba2\u9605\u4e3b\u9898\u4e0e\u5206\u533a"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#325","text":"\u8ddf\u539f\u4e66\u987a\u5e8f\u4e0d\u4e00\u6837\uff0c\u6211\u662f\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\u6765\u8bb2\u7684 \u62e6\u622a\u5668\u7684\u4f5c\u7528\u5176\u5b9e\u8ddf\u5176\u4ed6\u6846\u67b6\u90fd\u4e00\u6837\uff0c\u90fd\u662f\u7ed9\u76ee\u6807\u5bf9\u8c61\u4e00\u4e2a\u5207\u9762\uff0c\u5728\u89e6\u53d1\u67d0\u4e9b\u4e8b\u4ef6/\u52a8\u4f5c\u7684\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5\uff0c\u5148\u8d34\u4e00\u4e0b ConsumerInterceptor \u7684\u63a5\u53e3\u6e90\u7801 public interface ConsumerInterceptor<K, V> extends Configurable, AutoCloseable { ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> var1); void onCommit(Map<TopicPartition, OffsetAndMetadata> var1); void close(); } OnConsume \u65b9\u6cd5\u89e6\u53d1\u65f6\u673a\u5728 AsyncKafkaConsumer.poll()/LegacyKafakConsumer.poll() \u4e2d\uff0c\u5f53\u6267\u884c\u4e86 pollForFethces \u4e4b\u540e\u4f1a\u8fd4\u56de fetch \u63a5\u7740\u5c31\u6267\u884c onConsume(fetch.records()) \u4f8b\u5b50 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerInterceptor; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.common.TopicPartition; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class KafkaConsumerInterceptor implements ConsumerInterceptor<String, String> { private static final long EXPIRE_INTERVAL = 10 * 1000; @Override public ConsumerRecords<String, String> onConsume(ConsumerRecords<String, String> records) { long now = System.currentTimeMillis(); Map<TopicPartition, List<ConsumerRecord<String, String>>> newRecords = new HashMap<>(); for (TopicPartition tp : records.partitions()) { List<ConsumerRecord<String, String>> list = records.records(tp); List<ConsumerRecord<String, String>> filter = new ArrayList<>(); for (ConsumerRecord<String, String> i : list) { if(now - i.timestamp() < EXPIRE_INTERVAL){ filter.add(i); } } newRecords.put(tp, filter); } return new ConsumerRecords<>(newRecords); } @Override public void close() { } @Override public void onCommit(Map map) { } /** * configure\u4e0d\u662f\u76f4\u63a5\u7ee7\u627f\u81eaInterceptor\u7684 * * @param map \u914d\u7f6emap */ @Override public void configure(Map<String, ?> map) { } }","title":"3.2.5 \u6d88\u8d39\u8005\u62e6\u622a\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#326","text":"","title":"3.2.6 \u53cd\u5e8f\u5217\u5316"}]}