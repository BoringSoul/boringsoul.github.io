{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u7528 mkdocs \u751f\u6210\u7684\u7b14\u8bb0 \u4e3b\u9898 \u00b6 \u8be5\u7b14\u8bb0\u4e3b\u9898\u4e3a readthedocs \u65e0\u9700\u5b89\u88c5\uff0c \u6846\u67b6\u81ea\u5e26 Copyright \u00b6 \u9075\u5faa MIT License","title":"Home"},{"location":"#_1","text":"\u7528 mkdocs \u751f\u6210\u7684\u7b14\u8bb0","title":"\u7b80\u4ecb"},{"location":"#_2","text":"\u8be5\u7b14\u8bb0\u4e3b\u9898\u4e3a readthedocs \u65e0\u9700\u5b89\u88c5\uff0c \u6846\u67b6\u81ea\u5e26","title":"\u4e3b\u9898"},{"location":"#copyright","text":"\u9075\u5faa MIT License","title":"Copyright"},{"location":"database/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/","text":"","title":"\u9ad8\u6027\u80fdMySQL-\u7b2c\u4e09\u7248"},{"location":"interview/","text":"","title":"Index"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/","text":"\u7b14\u8bb0-\u6df1\u5165\u7406\u89e3Kafka: \u6838\u5fc3\u8bbe\u8ba1\u4e0e\u5b9e\u8df5\u539f\u7406 \u00b6 \u7b80\u5355\u8bb0\u4e0b\u7b14\u8bb0 \u7b2c\u4e00\u7ae0 \u521d\u8bc6Kafka \u00b6 \u9996\u5148\u77e5\u9053\u4ed6\u662f\u5565: \u6d88\u606f\u7cfb\u7edf: \u5c31\u662f\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u7cfb\u7edf, \u4f5c\u7528\u65e0\u975e\u5c31\u90a3\u51e0\u4e2a-\u89e3\u8026, \u524a\u5cf0\u3001\u5f02\u6b65, \u7136\u540e\u518d\u52a0\u4e0a\u81ea\u5df1\u7684\u96c6\u7fa4\u7279\u6027, \u505a\u5230\u53ef\u6269\u5c55\u3001\u53ef\u6062\u590d \u6301\u4e45\u5316: log\u6587\u4ef6\u5b58\u6d88\u606f \u6d41\u5f0f\u5904\u7406\u5e73\u53f0: \u63d0\u4f9b\u63a5\u53e3\u6765\u505a\u7a97\u53e3\u3001\u8fde\u63a5\u3001\u53d8\u6362\u548c\u805a\u5408\u7b49\u7b49\u7684\u64cd\u4f5c 1.1 \u57fa\u672c\u6982\u5ff5 \u00b6 \u770b\u4e0b\u56fe\u5c31\u597d: Producer : \u751f\u4ea7\u8005 Broker : \u5c31\u662f Kafka Server Consumer : \u6d88\u8d39\u8005 Message.Topic : \u6d88\u606f\u662f\u6309Topic\u53bb\u5206\u7684 Message.Topic.Partition : Topic \u5212\u5206\u4e3a\u4e0d\u540c\u7684\u5206\u533a\u5b58\u50a8, \u5206\u533a\u7684\u6570\u91cf\u3001\u5206\u914d\u89c4\u5219, \u80fd\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e, \u540c\u65f6\u8fd8\u80fd\u5728\u8fd0\u884c\u65f6, \u52a8\u6001\u4fee\u6539\u521b\u5efa\u4e3b\u9898\u65f6\u7684\u5206\u533a\u6570\u91cf\uff08\u53ea\u80fd\u589e, \u4e0d\u80fd\u51cf\uff09\u3001\u5206\u914d\u89c4\u5219 Message.Topic.Partition.Replicas : \u5206\u533a\u65f6\u6709\u526f\u672c\u7684, \u6bcf\u4e2a\u5206\u533a\u7684\u526f\u672c\u6570\u91cf, \u5206\u914d\u89c4\u5219\u4e5f\u662f\u8ddf\u4e0a\u9762\u4e00\u6837, \u53ef\u4ee5\u9759\u6001\u8bbe\u7f6e, \u52a8\u6001\u4fee\u6539 AR( Assigned Replicas ) , ISR (In-Sync Replicas) , OSR (Out-Sync Replicas) => AR = ISR + OSR \"Leader Replicas\": \u4e3b\u526f\u672c, \u8d1f\u8d23\u8bfb\u5199 \"Follower Replica\": \u4ece\u526f\u672c, \u8d1f\u8d23\u8bb0\u5f55\u732a\u526f\u672c\u6570\u636e, \u6709\u4e00\u5b9a\u6ede\u540e\u6027 Message.Topic.Partition.Replica.LEO : \u8be5\u5206\u533a\u4e0b\u4e00\u6761\u6d88\u606f\u5f85\u5199\u5165\u7684 Offset Message.Topic.Partition.Replica.HW : HW - 1 = \u6d88\u8d39\u8005\u80fd\u6d88\u8d39\u5230\u7684\u6700\u5927 Offset Message.Topic.Partition.Log : \u5728\u6301\u4e45\u5316\u5c42\u4e0a\u53ef\u4ee5\u628a\u5206\u533a\u770b\u6210\u4e00\u4e2a\u8ffd\u52a0\u7684 Log \u6587\u4ef6 Message.Topic.Partition.Offset : \u6307\u6d88\u606f\u5728\u5206\u533a\u4e2d\u7684\u4e00\u4e2a\u504f\u79fb\u91cf, \u4e14\u662f\u5206\u533a\u4e2d\u7684\u552f\u4e00\u6807\u8bc6, \u4e5f\u5c31\u662f Kafka \u662f\u5206\u533a\u5185\u6709\u5e8f\u7684 1.2 \u5b89\u88c5\u548c\u914d\u7f6e \u00b6 3.x \u7248\u672c\u5b89\u88c5\u6bd4\u8f83\u7b80\u5355, windows/linux \u7248\u672c\u90fd\u662f\u76f4\u63a5\u4e0b\u4e2a\u5305, \u5728\u672c\u5730\u8dd1\u811a\u672c\u5c31\u597d\u4e86 1.3 \u751f\u4ea7\u548c\u6d88\u8d39 \u00b6 \u8fd9\u90e8\u5206\u4ee3\u7801\u5728\u540e\u9762\u7684\u7ae0\u8282\u662f\u4f1a\u8d34\u51fa\u6765\u4e86, \u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86 1.4 \u670d\u52a1\u7aef\u53c2\u6570\u914d\u7f6e \u00b6 \u8fd9\u91cc\u8d34\u51fa\u6700\u5e38\u89c1\u7684\u51e0\u4e2a\u53c2\u6570\u8bf4\u660e\u4e00\u4e0b, \u914d\u7f6e\u7684\u5185\u5bb9\u90fd\u662f\u5728 config/server.properties \u91cc\u9762, 3.x \u7248\u672c\u7684\u8bdd, \u5982\u679c\u8981\u7528 kraft \u7684\u8bdd, \u5219\u770b config/kraft/server.properties \u6587\u4ef6 process.roles : \u8fdb\u7a0b\u7684\u89d2\u8272\u5217\u8868, \u9017\u53f7\u5206\u5272, \u9ed8\u8ba4: broker,controller node.id : \u8282\u70b9 id , \u7528\u6765\u6807\u8bc6\u8282\u70b9, \u5728\u65e5\u5fd7\u53ef\u4ee5\u7528\u6765\u6392\u67e5\u95ee\u9898 listeners : broker \u76d1\u542c\u5ba2\u6237\u7aef\u7684\u534f\u8bae+\u5730\u5740+\u7aef\u53e3,\u683c\u5f0f\u4e3a : \u534f\u8bae://\u5730\u5740:\u7aef\u53e3, \u534f\u8bae\u503c\u4e3a: PLAINTEXT, SSL, SASL_SSL log.dirs : \u6301\u4e45\u5316\u76ee\u5f55, log.dirs \u4f18\u5148\u7ea7\u5927\u4e8e log.dir \u7b2c\u4e8c\u7ae0 \u751f\u4ea7\u8005 \u00b6 2.1 \u5ba2\u6237\u7aef\u5f00\u53d1 \u00b6 \u8fd9\u91cc\u6211\u5148\u8d34\u6574\u4f53\u7684\u4ee3\u7801, \u7136\u540e\u518d\u7ec6\u8bf4 package org.example.producer; import org.apache.kafka.clients.producer.KafkaProducer; import org.apache.kafka.clients.producer.ProducerConfig; import org.apache.kafka.clients.producer.ProducerRecord; import org.example.entity.UserProto; import java.util.Properties; public class KafkaProducerDemo { public static final String BROKER_LIST = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String TOPIC = \"test\"; public static Properties initConfig() { Properties props = new Properties(); props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\"); props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaProducerSerializer.class.getName()); props.put(ProducerConfig.CLIENT_ID_CONFIG, \"producer.client.id.demo\"); props.put(ProducerConfig.RETRIES_CONFIG, 10); props.put(ProducerConfig.ACKS_CONFIG, \"-1\"); props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaProducerInterceptor.class.getName()); return props; } public static void main(String[] args) { Properties props = initConfig(); try (KafkaProducer<String, UserProto.User> producer = new KafkaProducer<>(props)) { UserProto.User user = UserProto.User.newBuilder().setName(\"andrew\").setSex(1).setCode(\"c1\").build(); ProducerRecord<String, UserProto.User> record = new ProducerRecord<>(TOPIC, user); producer.send(record); } catch (Exception e) { System.out.println(e.getMessage()); } } } 2.1.1 \u62e6\u622a\u5668 \u00b6 ProducerInterceptor \u63a5\u53e3\u662f\u8fd9\u6837\u7684 public interface ProducerInterceptor<K, V> extends Configurable, AutoCloseable { ProducerRecord<K, V> onSend(ProducerRecord<K, V> var1); void onAcknowledgement(RecordMetadata var1, Exception var2); void close(); } \u62e6\u622a\u5668\u7684\u6ce8\u5165\u65b9\u5f0f\u662f\u8fd9\u6837\u7684, \u6e90\u7801\u7528\u53cd\u5c04 (getDeclaredConstructor().newInstance()) \u53bb\u5b9e\u4f8b\u5316\u5bf9\u8c61 props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaProducerInterceptor.class.getName()); \u4ee5 kafka-client 3.7.0 \u4e3a\u4f8b onSend \u65b9\u6cd5\u662f\u5728 KafkaProducer \u6e90\u7801 357 \u884c\u6267\u884c\u7684 public Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback) { ProducerRecord<K, V> interceptedRecord = this.interceptors.onSend(record); return this.doSend(interceptedRecord, callback); } onAcknoledgement \u5219\u662f\u5728 703 \u884c\u89e6\u53d1, \u5c31\u662f\u5728 onComplete \u7684\u65f6\u5019\u8c03\u7528 public void onCompletion(RecordMetadata metadata, Exception exception) { if (metadata == null) { metadata = new RecordMetadata(this.topicPartition(), -1L, -1, -1L, -1, -1); } this.interceptors.onAcknowledgement(metadata, exception); if (this.userCallback != null) { this.userCallback.onCompletion(metadata, exception); } } 2.1.2 \u5e8f\u5217\u5316\u5668 \u00b6 StringSerializer \u6e90\u7801\u5982\u4e0b package org.apache.kafka.common.serialization; import java.io.UnsupportedEncodingException; import java.nio.charset.StandardCharsets; import java.util.Map; import org.apache.kafka.common.errors.SerializationException; public class StringSerializer implements Serializer<String> { private String encoding; public StringSerializer() { this.encoding = StandardCharsets.UTF_8.name(); } public void configure(Map<String, ?> configs, boolean isKey) { String propertyName = isKey ? \"key.serializer.encoding\" : \"value.serializer.encoding\"; Object encodingValue = configs.get(propertyName); if (encodingValue == null) { encodingValue = configs.get(\"serializer.encoding\"); } if (encodingValue instanceof String) { this.encoding = (String)encodingValue; } } public byte[] serialize(String topic, String data) { try { return data == null ? null : data.getBytes(this.encoding); } catch (UnsupportedEncodingException var4) { throw new SerializationException(\"Error when serializing string to byte[] due to unsupported encoding \" + this.encoding); } } } \u6ca1\u5565\u7279\u522b, \u5c31\u662f serialize \u91cc\u8fd4\u56de\u4e86 string.getBytes() \u81ea\u5b9a\u4e49\u7684\u4e5f\u662f\u4e00\u6837, \u8fd4\u56de byte[] \u5c31\u597d, \u53cd\u5e8f\u5217\u5316\u9053\u7406\u4e00\u6837 \u4e00\u822c\u516c\u53f8\u90fd\u662fpb\u6765\u5f04\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684, \u4ee5\u4e0b\u662f\u6211\u81ea\u5df1\u7684demo\u4ee3\u7801, \u5341\u5206\u7b80\u5355 package org.example.producer; import org.apache.kafka.common.serialization.Serializer; import org.example.entity.UserProto; public class KafkaProducerSerializer implements Serializer<UserProto.User> { @Override public byte[] serialize(String s, UserProto.User user) { return user.toByteArray(); } } 2.1.3 \u5206\u533a\u5668 \u00b6 \u5148\u770b\u770b\u6e90\u7801\u5b9a\u4e49 package org.apache.kafka.clients.producer; import java.io.Closeable; import org.apache.kafka.common.Cluster; import org.apache.kafka.common.Configurable; public interface Partitioner extends Configurable, Closeable { int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster); void close(); /** @deprecated */ @Deprecated default void onNewBatch(String topic, Cluster cluster, int prevPartition) { } } \u9ed8\u8ba4\u5206\u533a\u5668 DefaultPartioner \u6e90\u7801\u662f\u8fd9\u6837\u7684 public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster, int numPartitions) { return keyBytes == null ? this.stickyPartitionCache.partition(topic, cluster) : BuiltInPartitioner.partitionForKey(keyBytes, numPartitions); } \u4e3b\u8981\u770bkey\u662f\u5426\u4e3a\u7a7a, \u5982\u679c\u7a7a\u7684\u8bdd\u8c03\u7528 stickyPartitionCache.partition , \u968f\u673a\u4e00\u4e2a\u53ef\u7528\u7684\u5206\u533a\u6765\u5199\u5165 \u975e\u7a7a\u5c31\u7528\u5185\u7f6e\u5206\u533a\u5668, \u5148\u7528 Utils.murmur2 \u6765 hash , \u6700\u540e % numPartitions 2.1.4 \u6d88\u606f\u53d1\u9001 \u00b6 \u53d1\u9001\u6a21\u5f0f\u6709\u4e09\u79cd: \u53d1\u540e\u5373\u5fd8( fire-and-forget )\u3001 \u540c\u6b65 ( sync )\u3001 \u5f02\u6b65( async ), \u5176\u5b9e send \u8fd4\u56de\u7684\u662f Future \u5bf9\u8c61, \u6240\u4ee5\u4f20\u53c2\u80af\u5b9a\u6709 Callback \u7684\u5165\u53c2, \u8981\u540c\u6b65\u6a21\u5f0f\u7684\u8bdd, \u76f4\u63a5 Future.get \u5373\u53ef\u3002 \u8fd9\u91cc\u8bb2\u8bb2\u589e\u52a0\u53ef\u9760\u6027\u7684\u5957\u8def \u6ce8\u610f: \u63d0\u9ad8\u53ef\u9760\u6027\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d props.put(ProducerConfig.RETRIES_CONFIG, 10); // \u589e\u52a0\u91cd\u8bd5\u6b21\u6570 props.put(ProducerConfig.ACKS_CONFIG, -1); // \u786e\u4fdd\u6240\u6709\u526f\u672c\u6709\u54cd\u5e94\u4e86\u624d\u5f53\u6210\u529f 2.2 \u539f\u7406\u5206\u6790 \u00b6 2.2.1 \u6574\u4f53\u67b6\u6784 \u00b6 \u5b8c\u6574\u7684\u53d1\u9001\u6d41\u7a0b\u56fe\u5982\u4e0b: \u6574\u4f53\u6d41\u7a0b\u5206\u4e24\u4e2a\u7ebf\u7a0b\u5b8c\u6210, \u4e00\u4e2a\u4e3b\u7ebf\u7a0b, \u4e00\u4e2a\u53d1\u9001\u7ebf\u7a0b, 1-5 \u4e3b\u7ebf\u7a0b\u5b8c\u6210 \u4e3b\u7ebf\u7a0b\u901a\u8fc7 KafkaProducer \u521b\u5efa\u6d88\u606f \u770b\u5ba2\u6237\u7aef\u6709\u6ca1\u6709\u5b9e\u73b0 ProducerIntercepter \u8fd9\u4e2a\u63a5\u53e3, \u5982\u679c\u6709\u5c31\u5bf9\u6d88\u606f\u8fdb\u884c\u62e6\u622a\u5904\u7406, \u4e00\u822c\u62e6\u622a\u662f\u4e3a\u4e86\u5bf9\u6d88\u606f\u505a\u7b80\u5355\u5904\u7406, \u56e0\u4e3a\u592a\u590d\u6742\u4f1a\u5f71\u54cd\u53d1\u9001\u901f\u5ea6, \u540c\u65f6\u8fd9\u73a9\u610f\u662f\u53ef\u4ee5\u94fe\u5f0f\u7f16\u7a0b\u7684, \u91cc\u9762\u7684 onSend() \u5728\u53d1\u9001\u524d\u89e6\u53d1, onAcknowleagement() \u5728 Selector \u8fd4\u56de Response \u540e\u9a6c\u4e0a\u89e6\u53d1\uff1f \u5bf9\u6d88\u606f\u7684 key , value \u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c, \u8981\u81ea\u5b9a\u4e49, \u5c31\u5b9e\u73b0 org.apache.kafka.common.serlization.Seralizer \u63a5\u53e3, configure() \u914d\u7f6e\u5f53\u524d\u7c7b, serialize(String topic, T data) \u5c31\u662f\u5e8f\u5217\u5316\u65b9\u6cd5, \u8fd4\u56de byte[] , close() \u7528\u6765\u5173\u95ed\u5e8f\u5217\u5316\u5668 \u77e5\u9053 Topic \u4e86, \u5c31\u5f97\u77e5\u9053\u6d88\u606f\u5f80\u54ea\u4e2a\u5206\u533a\u53d1\u4e86, \u5982\u679c\u6ca1\u6709\u81ea\u5b9a\u4e49\u5206\u533a\u5668, \u90a3\u4e48\u5c31\u7528\u9ed8\u8ba4\u65b9\u6cd5\u6765\u786e\u5b9a\u53d1\u9001\u7684\u5206\u533a, \u5982\u679c\u6709\u5c31\u6839\u636e\u81ea\u5b9a\u4e49\u7684\u7ed3\u679c\u786e\u5b9a\u5206\u533a\u53f7 \u4e3b\u7ebf\u7a0b\u628a\u6d88\u606f\u7f13\u5b58\u5230\u5bf9\u5e94\u7684 RecordAccumulator \u4e2d, \u6570\u636e\u7ed3\u6784\u662f Map<Partiion, Deque\\ > , buffer.memory \u63a7\u5236\u5927\u5c0f, \u6d88\u606f\u592a\u591a\u4f1a\u963b\u585e\u53d1\u9001\u65b9\u6cd5, max.block.ms \u63a7\u5236\u963b\u585e\u7b49\u5f85\u65f6\u95f4, batch.size \u63a7\u5236 ProducerBatch \u5927\u5c0f Sender \u7ebf\u7a0b\u521b\u5efa Sender \u5bf9\u8c61, \u628a RecordAccumulator . Map<Partiion, Deque\\ > \u8f6c\u6362\u6210 Map<Node, List\\ > , \u6700\u540e\u5c01\u6210 \u5bf9\u8c61 \u8f6c\u6210 Map<NodeId, Deque\\ > \u653e\u5230 InFlightRequests \u4e2d, \u8fd9\u73a9\u610f\u662f\u7528\u6765\u8bb0\u5f55\u53d1\u4e86, \u4f46\u6ca1\u6709\u54cd\u5e94\u7684 Request , max.in.flight.requests.per.connection \u9ed8\u8ba4\u4e3a5, \u8868\u793a\u6bcf\u4e2a\u8fde\u63a5\u6700\u5927\u7b49\u5f85\u54cd\u5e94\u7684\u8bf7\u6c42\u6570\u662f5, \u8d85\u8fc75\u5c31\u4e0d\u80fd\u53d1\u9001\u4e86\u3002\u8fd8\u80fd\u6839\u636e Deque .size() \u6765\u5224\u65ad\u6bcf\u4e2a Node \u7684\u8d1f\u8f7d\u60c5\u51b5 2.2.2 \u5143\u6570\u636e\u66f4\u65b0 \u00b6 \u5143\u6570\u636e\u6307\u7684\u662f\u5404\u4e2a\u8282\u70b9\u7684\u57fa\u672c\u4fe1\u606f, \u5305\u62ec\u8282\u70b9\u5730\u5740\u3001\u8282\u70b9\u4e3b\u9898\u3001\u8282\u70b9\u7684\u5206\u533a\u3001\u5206\u533a leader/follower \u526f\u672c\u4fe1\u606f, AR/ISR , Controller \u8282\u70b9 \u4e0a\u8ff0\u7684\u5143\u6570\u636e\u662f\u901a\u8fc7 Sender \u7ebf\u7a0b\u6765\u66f4\u65b0\u7684, \u66f4\u65b0\u6b65\u9aa4\u5982\u4e0b 1. \u627e\u51fa leastLoadedNode ( count \u4e00\u4e0b InFlightRequests . Deque .size() ) 2. \u53d1\u9001 MetadataRequest , \u7136\u540e\u7f13\u5b58\u5230 InFlightRequests 2.3 \u91cd\u8981\u7684\u751f\u4ea7\u8005\u53c2\u6570 \u00b6 \u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u5728\u521b\u5efa Producer \u7684\u65f6\u5019\u653e\u5230 props \u91cc\u9762\u7684 ack : = 1 \u8868\u793a leader \u526f\u672c\u6210\u529f\u5199\u5165, \u5c31\u4f1a\u6536\u5230\u6765\u81ea\u670d\u52a1\u7aef\u7684\u5199\u5165\u6210\u529f\u54cd\u5e94, \u6570\u636e\u6709\u53ef\u80fd\u4f1a\u4e22 = 0 \u8868\u793a\u4e0d\u7528\u7b49\u670d\u52a1\u7aef\u4efb\u4f55\u54cd\u5e94\u3002\u901f\u5ea6\u6700\u5feb\u662f\u5b83\u4e86, \u4f46\u5b83\u6700\u5bb9\u6613\u4e22\u6570\u636e =-1 \u8868\u793a\u6240\u6709 ISR \u6210\u529f\u5199\u5165\u624d\u8fd4\u56de\u6210\u529f, \u6700\u5927\u53ef\u9760\u6027\u662f\u5b83\u4e86 max.request.size : \u5ba2\u6237\u7aef\u80fd\u53d1\u9001\u6d88\u606f\u7684\u6700\u5927\u503c, \u9ed8\u8ba4 1048576 B =1 M , \u5fc5\u987b <= broker . message.max.size retries : \u751f\u4ea7\u8005\u91cd\u8bd5\u6b21\u6570 retry.backoff.ms : \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694, \u9ed8\u8ba4 100 compression.type : \u6d88\u606f\u538b\u7f29\u65b9\u5f0f, \u9ed8\u8ba4 none , \u53ef\u4ee5\u4e3a gzip snappy lz4 connections.max.idle.ms : \u6bcf\u4e2a\u9650\u5236\u8fde\u63a5\u6700\u5927\u5b58\u6d3b\u65f6\u95f4 linger.ms : \u53d1\u9001 ProducerBacth \u4e4b\u524d\u7b49\u5f85\u66f4\u591a\u6d88\u606f\u7684\u65f6\u95f4, \u7528\u6765\u63a7\u5236\u541e\u5410\u91cf\u7684 recieve.buffer.byte : \u63a7\u5236 Socket \u63a5\u6536\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 32768( B )=32 KB send.buffer.byte : \u63a7\u5236 Socket \u53d1\u9001\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 131072( B )=128 KB \u7b2c\u4e09\u7ae0 \u6d88\u8d39\u8005 \u00b6 3.1 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4 \u00b6 \u770b\u4e0b\u56fe\u5c31\u77e5\u9053\u5927\u6982\u610f\u601d\u4e86 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4\u3001\u5206\u533a\u7684\u5173\u7cfb\u5c31\u4ee5\u4e0b\u51e0\u70b9: \u6d88\u8d39\u8005\u662f\u4ee5\u5206\u533a\u4e3a\u5355\u4f4d\u8fdb\u884c\u6d88\u8d39 \u540c\u4e00 Topic \u4e0b\u7684\u6d88\u8d39\u7ec4, \u91cc\u9762\u7684\u6d88\u8d39\u8005\u4f1a\u5747\u644a Topic \u5185\u7684 partition , \u6240\u4ee5\u53ef\u80fd\u4f1a\u51fa\u73b0 partition \u4e0d\u591f\u5206\u7684\u60c5\u51b5 \u6d88\u8d39\u7ec4\u5185\u7684\u6d88\u8d39\u8005, \u5728\u6d88\u8d39\u540c\u4e00 topic \u4e0b\u7684\u6d88\u606f, \u663e\u7136\u53ea\u4f1a\u6d88\u8d39\u4e00\u6b21, \u76f8\u5f53\u4e8e p2p \u6a21\u5f0f \u5982\u679c\u662f\u4e0d\u540c\u7ec4\u7684\u6d88\u8d39\u8005, \u5c31\u76f8\u5f53\u4e8e\u5e7f\u64ad\u6a21\u5f0f\u4e86 3.2 \u5ba2\u6237\u7aef\u5f00\u53d1 \u00b6 \u8001\u89c4\u77e9, \u5148\u628a\u6284\u7684\u4ee3\u7801\u8d34\u51fa\u6765 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.clients.consumer.KafkaConsumer; import org.example.entity.UserProto; import java.time.Duration; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.concurrent.atomic.AtomicBoolean; public class KafkaConsumerDemo { public static final String BROKER_LIST = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String TOPIC = \"test\"; private static final String GROUP_ID = \"group.demo\"; public static final AtomicBoolean IS_RUNNING = new AtomicBoolean(true); public static Map<String, Object> initConfig() { Map<String, Object> props = new HashMap<>(); props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, KafkaConsumerDeserializer.class.getName()); props.put(ConsumerConfig.CLIENT_ID_CONFIG, \"producer.client.id.demo\"); props.put(ConsumerConfig.GROUP_ID_CONFIG, GROUP_ID); //\u989d\u5916\u529f\u80fd props.put(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaConsumerInterceptor.class.getName()); return props; } public static void main(String[] args) { try (KafkaConsumer<String, UserProto.User> consumer = new KafkaConsumer<>(initConfig())) { consumer.subscribe(List.of(TOPIC)); while (IS_RUNNING.get()) { ConsumerRecords<String, UserProto.User> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, UserProto.User> record : records) { System.out.printf(\" TOPIC = %s, partition = %s, offset = %s, key = %s, value = %s \\n\", record.topic(), record.partition(), record.offset(), record.key(), record.value()); } } } catch (Exception e) { System.out.println(e.getMessage()); } } } 3.2.1 \u5fc5\u8981\u7684\u53c2\u6570\u914d\u7f6e \u00b6 \u4e00\u822c\u90fd\u662f\u90a3\u51e0\u4e2a\u4e86, \u6709\u4e86\u751f\u4ea7\u8005\u4ee3\u7801\u7684\u7ecf\u9a8c\u4e4b\u540e, \u7784\u4e00\u4e0b\u5c31\u597d\u4e86, \u8fd8\u6709\u5c31\u662f\u751f\u4ea7\u4e0a\u6700\u597d\u7528 ConsumerConfig \u7684\u679a\u4e3e, \u81ea\u5df1\u5199\u5bb9\u6613\u51fa\u9519 bootstrap.server : \u8fde\u7684 kafka.brokers \u7684\u5217\u8868 group.id : \u5c31\u662f\u6d88\u8d39\u8005\u7ec4 id , \u5982\u679c\u662f\u7a7a\u7684, \u4f1a\u63d0\u793a To use the group management or offset commit APIs, you must provide a valid group.id in the consumer configuration. ( kafka-client v 3.7.0 ) key.deserializer : key \u7684\u53cd\u5e8f\u5217\u5316\u5668, \u8ddf\u751f\u4ea7\u8005\u7684 key.serializer \u53cd\u8fc7\u6765\u5c31\u884c value.deserializer : value \u7684\u53cd\u5e8f\u5217\u5316\u5668, \u8ddf\u751f\u4ea7\u8005\u7684 value.serializer \u53cd\u8fc7\u6765\u5c31\u884c 3.2.2 KafkaConsumer \u521d\u59cb\u5316\u6e90\u7801 \u00b6 \u8fd9\u90e8\u5206\u5e72\u8d27, \u539f\u4e66\u6ca1\u6709\u7684, \u6211\u662f\u5728\u627e\u62e6\u622a\u5668\u89e6\u53d1\u65f6\u673a\u7684\u65f6\u5019\u770b\u6e90\u7801, \u89c9\u5f97\u633a\u6709\u610f\u601d\u7684, \u635e\u51fa\u6765\u7ed9\u5927\u5bb6\u5206\u4eab KafkaConsumer \u8fd9\u4e2a\u7c7b\u5176\u5b9e\u662f\u7528\u4e86\u4ee3\u7406\u6a21\u5f0f\u751f\u6210\u4e86\u5b9e\u9645\u6267\u884c\u7684 KafkaConsumer \u5bf9\u8c61 public class KafkaConsumer<K, V> implements Consumer<K, V>{ KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { this.delegate = CREATOR.create(config, keyDeserializer, valueDeserializer); } KafkaConsumer(LogContext logContext, Time time, ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer, KafkaClient client, SubscriptionState subscriptions, ConsumerMetadata metadata, List<ConsumerPartitionAssignor> assignors) { this.delegate = CREATOR.create(logContext, time, config, keyDeserializer, valueDeserializer, client, subscriptions, metadata, assignors); } } \u91cc\u9762\u6839\u636e group.protocol \u751f\u6210\u4e24\u79cd\u6d88\u8d39\u8005\u5bf9\u8c61, \u4e00\u4e2a\u662f AsyncKafkaConsumer , \u4e00\u4e2a\u662f legacyKafkaConsumer public <K, V> ConsumerDelegate<K, V> create(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { try { GroupProtocol groupProtocol = GroupProtocol.valueOf(config.getString(\"group.protocol\").toUpperCase(Locale.ROOT)); return (ConsumerDelegate)(groupProtocol == GroupProtocol.CONSUMER ? new AsyncKafkaConsumer(config, keyDeserializer, valueDeserializer) : new LegacyKafkaConsumer(config, keyDeserializer, valueDeserializer)); } catch (KafkaException var5) { throw var5; } catch (Throwable var6) { throw new KafkaException(\"Failed to construct Kafka consumer\", var6); } } 3.2.4 \u8ba2\u9605\u4e3b\u9898\u4e0e\u5206\u533a \u00b6 \u8fd9\u4e00\u4e2a\u7ae0\u8282\u4e3b\u8981\u8bb2\u7684\u662f subsribe() \u548c assign() \u65b9\u6cd5 \u4e3b\u9898\u8ba2\u9605\u652f\u6301\u7684\u6a21\u5f0f: AUTO_TOPICS : \u5168\u540d\u79f0\u5339\u914d, \u4f46\u662f\u9700\u8981\u4f20\u4e3b\u9898\u6570\u7ec4\u505a\u4e3a\u4f20\u53c2, AUTO_PATTERN : \u6b63\u5219\u5339\u914d\u6a21\u5f0f USER_ASSIGNED : \u7528\u6237\u5206\u914d\u6a21\u5f0f, \u5206\u914d\u6307\u5b9a topic \u4e0b\u7684 partition \u4e3b\u9898\u8ba2\u9605\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u518d\u5e73\u8861\u7684\u56de\u8c03\u65b9\u6cd5 3.2.5 \u6d88\u8d39\u8005\u62e6\u622a\u5668 \u00b6 \u8ddf\u539f\u4e66\u987a\u5e8f\u4e0d\u4e00\u6837, \u6211\u662f\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\u6765\u8bb2\u7684 \u62e6\u622a\u5668\u7684\u4f5c\u7528\u5176\u5b9e\u8ddf\u5176\u4ed6\u6846\u67b6\u90fd\u4e00\u6837, \u90fd\u662f\u7ed9\u76ee\u6807\u5bf9\u8c61\u4e00\u4e2a\u5207\u9762, \u5728\u89e6\u53d1\u67d0\u4e9b\u4e8b\u4ef6/\u52a8\u4f5c\u7684\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5, \u5148\u8d34\u4e00\u4e0b ConsumerInterceptor \u7684\u63a5\u53e3\u6e90\u7801 public interface ConsumerInterceptor<K, V> extends Configurable, AutoCloseable { ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> var1); void onCommit(Map<TopicPartition, OffsetAndMetadata> var1); void close(); } OnConsume \u65b9\u6cd5\u89e6\u53d1\u65f6\u673a\u5728 AsyncKafkaConsumer.poll()/LegacyKafakConsumer.poll() \u4e2d, \u5f53\u6267\u884c\u4e86 pollForFethces \u4e4b\u540e\u4f1a\u8fd4\u56de fetch \u63a5\u7740\u5c31\u6267\u884c onConsume(fetch.records()) \u4f8b\u5b50 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerInterceptor; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.common.TopicPartition; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class KafkaConsumerInterceptor implements ConsumerInterceptor<String, String> { private static final long EXPIRE_INTERVAL = 10 * 1000; @Override public ConsumerRecords<String, String> onConsume(ConsumerRecords<String, String> records) { long now = System.currentTimeMillis(); Map<TopicPartition, List<ConsumerRecord<String, String>>> newRecords = new HashMap<>(); for (TopicPartition tp : records.partitions()) { List<ConsumerRecord<String, String>> list = records.records(tp); List<ConsumerRecord<String, String>> filter = new ArrayList<>(); for (ConsumerRecord<String, String> i : list) { if(now - i.timestamp() < EXPIRE_INTERVAL){ filter.add(i); } } newRecords.put(tp, filter); } return new ConsumerRecords<>(newRecords); } @Override public void close() { } @Override public void onCommit(Map map) { } /** * configure\u4e0d\u662f\u76f4\u63a5\u7ee7\u627f\u81eaInterceptor\u7684 * * @param map \u914d\u7f6emap */ @Override public void configure(Map<String, ?> map) { } } 3.2.6 \u53cd\u5e8f\u5217\u5316 \u00b6 \u53cd\u5e8f\u5217\u5316\u7684\u8bdd\u53ea\u9700\u8981\u7ee7\u627f Deserializer \u7684 deserialize(String topic, byte[] data) \u65b9\u6cd5\u5373\u53ef \u4e00\u822c\u751f\u4ea7\u90fd\u662f\u7528 ProtocalBuffer \u53bb\u505a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684, \u6700\u7b80\u5355\u7684 demo \u5982\u4e0b package org.example.consumer; import com.google.protobuf.InvalidProtocolBufferException; import org.apache.kafka.common.serialization.Deserializer; import org.example.entity.UserProto; public class KafkaConsumerDeserializer implements Deserializer<UserProto.User> { @Override public UserProto.User deserialize(String topic, byte[] data) { try { return UserProto.User.parseFrom(data); } catch (InvalidProtocolBufferException e) { throw new RuntimeException(e); } } } 3.2.7 \u6d88\u8d39\u6d88\u606f \u00b6 \u8fd9\u4e00\u8282\u4e3b\u8981\u8bb2\u7684\u662f poll \u65b9\u6cd5 \u8fd9\u4e2a poll() \u65b9\u6cd5\u662f\u4e2a\u8f6e\u8bad\u65b9\u6cd5, \u4f20\u53c2 Duration \u662f\u6307\u62c9\u53bb\u7ebf\u7a0b\u7684\u6700\u5927\u963b\u585e\u65f6\u95f4(\u56e0\u4e3a\u6ca1\u6709\u6d88\u606f\u53ef\u80fd\u5f97\u7b49\u561b) \u7136\u540e\u8fd4\u56de\u7684 ConsumerRecords \u5bf9\u8c61\u5462\u662f\u53ef\u4ee5\u8fed\u4ee3\u7684 3.2.8 \u4f4d\u79fb\u63d0\u4ea4 \u00b6 \u8fd9\u4e00\u8282\u4e3b\u8981\u8bb2\u7684\u662f\u5404\u4e2a offset \u7684\u533a\u522b\u4ee5\u53ca\u63d0\u4ea4 offset \u7684\u4e00\u4e9b\u6280\u5de7 \u6d88\u8d39\u8005\u5728\u5b8c\u6210\u6d88\u8d39\u4e4b\u540e\u5176\u5b9e\u662f\u9700\u8981\u63d0\u4ea4 offset (\u544a\u8bc9 broker \u6d88\u8d39\u5230\u54ea\u91cc\u4e86) offset \u6709\u4e09\u4e2a\u6982\u5ff5 consumed offset = last consumed offset = position() = commited offset - 1 \u6bcf\u6b21\u63d0\u4ea4\u7684\u90fd\u662f\u4e0b\u4e2a\u6d88\u8d39\u7684 offset \u5176\u5b9e\u65e0\u8bba\u600e\u4e48\u63d0\u4ea4\u4f4d\u79fb\u91cf, \u90fd\u5b58\u5728\u7740\u91cd\u590d\u6d88\u8d39\u548c\u6d88\u606f\u4e22\u5931\u7684\u98ce\u9669 commit \u5206 sync \u548c async , async \u65f6\u6709\u4e2a\u56de\u8c03\u65b9\u6cd5, \u662f\u5728 commit \u5b8c\u6210\u540e\u89e6\u53d1, \u751f\u4ea7\u4e00\u822c\u7528\u4e8e\u66f4\u6539\u7f13\u5b58/\u6570\u636e\u5e93\u4e2d\u5bf9\u5e94\u6570\u636e\u72b6\u6001 \u964d\u4f4e\u4e0a\u9762\u4e24\u4e2a\u98ce\u9669\u7684\u505a\u6cd5\u5c31\u662f \u81ea\u5df1\u624b\u52a8\u63d0\u4ea4, enable.auto.commit = false \u63d0\u4ea4 offset \u9700\u8981\u6709\u91cd\u8bd5\u673a\u5236\uff08\u53ef\u4ee5\u5728 finally \u5757\u4e2d\u4f7f\u7528\u540c\u6b65\u63d0\u4ea4\uff09, \u9632\u6b62\u63d0\u4ea4\u5931\u8d25 \uff08\u4f46\u4f1a\u6709\u91cd\u590d\u6d88\u8d39\u7684\u98ce\u9669\uff09 \u81ea\u5df1\u505a\u5e42\u7b49\u6027\u5904\u7406, \u5373\u4f7f\u91cd\u590d\u6d88\u8d39\u4e5f\u4e0d\u614c 3.2.9 \u63a7\u5236\u6216\u5173\u95ed\u6d88\u8d39 \u00b6 \u5176\u5b9e\u5c31\u662f\u8bb2\u4e86 pause() / resume() / close() / wakeup() \u65b9\u6cd5 \u56e0\u4e3a idea \u4f1a\u63d0\u793a\u521b\u5efa KafkaConsumer \u5b9e\u4f8b\u5efa\u8bae\u7528 try(resource) \u521b\u5efa, \u6240\u4ee5\u53ef\u4ee5\u4f18\u96c5\u5173\u95ed consumer \u56e0\u4e3a\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684\u65e0\u9650\u5faa\u73af\u7684\u5224\u65ad\u6761\u4ef6\u662f running.get() , \u6240\u4ee5\u4e5f\u53ef\u4ee5\u4f18\u96c5\u9000\u51fa\u5faa\u73af wakeup() \u662f\u901a\u8fc7\u629b\u51fa\u5f02\u5e38( WakeupException )\u6765\u4e2d\u65ad\u6d88\u8d39\u7684, \u6240\u4ee5\u8981\u6ce8\u610f 3.2.10 \u6307\u5b9a\u4f4d\u79fb\u6d88\u8d39 \u00b6 auto.offset.reset \u7c97\u7c92\u5ea6\u63a7\u5236\u6d88\u8d39\u8d77\u59cb\u4f4d\u7f6e, consumer.seek() seek() \u65b9\u6cd5\u53ef\u4ee5\u6307\u5b9a\u4ece\u67d0\u4e2a\u4e3b\u9898\u4e0b\u7684\u67d0\u4e2a\u5206\u533a\u7684 offfset \u8fdb\u884c\u6d88\u8d39, \u5982\u679c\u627e\u4e0d\u5230\u4f4d\u79fb, \u5c31\u89e6\u53d1 auto.offset.reset auto.offset.reset = earliest / latest / none earliest \u4ece 0 \u5f00\u59cb\u6d88\u8d39 latest \u4ece\u5206\u533a\u672b\u5c3e\u5f00\u59cb\u6d88\u8d39 none \u627e\u4e0d\u5230\u6d88\u8d39\u4f4d\u79fb\u7684\u65f6\u5019\u5c31\u629b\u5f02\u5e38 \u53ef\u4ee5\u901a\u8fc7 beginOffsets() / endOffsets() / seekToBegin() / seekToEnd() \u627e\u5230\u5934\u5c3e\u4f4d\u7f6e\u8fdb\u884c\u6d88\u8d39 \u53ef\u901a\u8fc7 consuemr.offsetForTimess( Map ) \u67e5\u627e\u5bf9\u5e94\u7684 offset , \u7136\u540e\u901a\u8fc7 seek() \u5b9a\u4f4d\u6d88\u8d39 3.2.11 \u518d\u5747\u8861 \u00b6 \u6307\u7684\u662f\u5206\u533a\u6240\u5c5e\u6743\u4ece\u4e00\u4e2a\u6d88\u8d39\u8005\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u6d88\u8d39\u8005\u7684\u884c\u4e3a, \u5176\u5b9e\u5c31\u662f\u53d1\u751f\u5728\u6d88\u8d39\u8005\u7ec4\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff08\u7ec4\u5185\u6210\u5458\u6709\u589e\u51cf\uff09, \u5e94\u8be5\u600e\u4e48\u5904\u7406 \u518d\u5747\u8861\u53d1\u751f\u671f\u95f4, \u76f8\u5173\u7684\u6d88\u8d39\u8005\u662f\u65e0\u6cd5\u6d88\u8d39\u7684\uff08\u5373\u5bf9\u5e94\u6d88\u8d39\u8005\u7ec4\u5185\u7684\u6d88\u8d39\u8005\u4e0d\u53ef\u7528\uff09 \u5206\u533a\u91cd\u5206\u914d\u7684\u65f6\u5019, \u5f53\u524d\u6d88\u8d39\u8005\u7684\u72b6\u6001\u4f1a\u4e22\u5931, \u5176\u5b9e\u5c31\u662f A \u6d88\u8d39\u5230\u4e00\u534a\u7684\u65f6\u5019, \u5206\u533a\u53c8\u7ed9 B \u6d88\u8d39, \u5982\u679c\u6d88\u8d39\u4f4d\u79fb\u6ca1\u63d0\u4ea4, \u5c31\u53ef\u80fd\u91cd\u590d\u6d88\u8d39 \u518d\u5747\u8861\u76d1\u542c\u5668\u6709\u4e24\u4e2a\u65b9\u6cd5\u6765\u89c4\u907f\u8fd9\u79cd\u95ee\u9898 1) onPartitionsRevoke(Collcetion ) \u6d88\u8d39\u8005\u505c\u6b62\u6d88\u8d39\u540e, \u91cd\u5206\u914d\u4e4b\u524d\u89e6\u53d1 (\u8fd9\u91cc\u63d0\u4ea4\u5df2\u6d88\u8d39\u5b8c\u7684 offset , \u672c\u5730\u4fdd\u5b58) 2) onPartitionsAssigned(partitions) \u91cd\u5206\u914d\u4e4b\u540e, \u6d88\u8d39\u8005\u5f00\u59cb\u6d88\u8d39\u4e4b\u524d\u89e6\u53d1 (\u672c\u5730\u4fdd\u5b58\u7684 *offset* \u627e\u51fa\u6765, \u518d *seek* ) 3.2.12 \u591a\u7ebf\u7a0b\u5b9e\u73b0 \u00b6 KafkaProducer \u662f\u7ebf\u7a0b\u5b89\u5168\u7684, KafkaConsumer \u662f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684, \u8fd9\u4e00\u8282\u4e3b\u8981\u8bb2\u6d88\u8d39\u8005\u5982\u4f55\u591a\u7ebf\u7a0b\u6d88\u8d39 \u6ce8\u610f, \u5982\u679c\u751f\u4ea7\u4e2d\u5bf9\u6d88\u606f\u7684\u987a\u5e8f\u6027\u6709\u8981\u6c42, \u4e0d\u5efa\u8bae\u4f7f\u7528\u591a\u7ebf\u7a0b\u6d88\u8d39\u540c\u4e00\u5206\u533a\u7684\u6570\u636e, \u56e0\u4e3a\u8fd8\u5f97\u81ea\u5df1\u7ef4\u62a4\u6570\u636e\u7684\u6709\u5e8f\u6027 \u5b9e\u73b0\u65b9\u5f0f\u5206\u4ee5\u4e0b\u51e0\u79cd \u7ebf\u7a0b\u5c01\u95ed, \u5b9e\u4f8b\u5316\u591a\u4e2a Consumer \u5bf9\u8c61\u8fdb\u884c\u6d88\u8d39 \u591a\u7ebf\u7a0b\u6d88\u8d39\u540c\u4e00\u4e2a\u5206\u533a\uff08\u4e0d\u63a8\u8350\uff09 \u5305\u88c5 ThreadPool \u548c Consumer , \u628a poll() \u5230\u7684 Record \u6254\u5230 ThreadPool \u91cc\u9762, \u5c31\u662f\u4e00\u4e2a Consumer \u62c9\u53d6\u67d0\u4e2a\u4e3b\u9898, \u591a\u7ebf\u7a0b\u6d88\u8d39 \u7b2c\u4e09\u4e2a\u65b9\u6848\u9700\u8981\u6ce8\u610f\u7684\u662f offset \u63d0\u4ea4\u95ee\u9898, \u53ef\u4ee5\u7528\u6ed1\u7a97/ AQS \u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 3.2.13 \u91cd\u8981\u7684\u6d88\u8d39\u8005\u53c2\u6570 \u00b6 fetch.min.bytes = \u6bcf\u6b21\u62c9\u53d6\u6700\u5c0f\u6570\u636e\u91cf, \u63a7\u5236\u541e\u5410\u7528\u7684 fetch.max.bytes = \u6bcf\u6b21\u62c9\u53d6\u6700\u5927\u6570\u636e\u91cf, \u6d88\u606f\u5927\u4e8e\u8be5\u503c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u6d88\u606f\u4e0d\u53ef\u8bfb fetch.max.wait.ms = \u6bcf\u6b21\u62c9\u53d6\u6700\u5927\u7b49\u5f85\u65f6\u95f4, \u4e5f\u662f\u63a7\u5236\u541e\u5410, \u5177\u4f53\u770b\u5b9e\u9645\u5e94\u7528\u573a\u666f max.partition.fetch.bytes = \u6bcf\u4e2a\u5206\u533a\u6bcf\u6b21\u8fd4\u56de\u7ed9 Consumer \u7684\u6700\u5927\u6570\u636e\u91cf, \u6307\u7684\u662f fetch.bytes / partition_num max.poll.record = \u62c9\u53d6\u6700\u5927\u6d88\u606f\u6570, \u9ed8\u8ba4500\u6761 connections.max.idle.ms = \u591a\u4e45\u4e4b\u540e\u5173\u95ed\u9650\u5236\u8fde\u63a5, \u9ed8\u8ba4 540000 ms , \u5c31\u662f 9 min exclude.internal.topics = \u662f\u5426\u5c4f\u853d\u5185\u90e8\u4e3b\u9898, \u9ed8\u8ba4\u662f true , \u8868\u793a\u4e0d\u80fd\u7528\u6b63\u5219\u53bb\u8ba2\u9605\u4e3b\u9898, false \u5219\u76f8\u53cd receives.buffer.bytes = \u63a5\u6536\u7f13\u51b2\u533a\u5927\u5c0f, \u9ed8\u8ba4 65536 B , \u5c31\u662f 64 KB send.buffer.size = \u53d1\u9001\u7f13\u51b2\u533a\u5927\u5c0f, \u9ed8\u8ba4 131072 B , \u5c31\u662f 128 KB request.timeout.ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms metadata.max.age.ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms reconnect.backoff.ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms retry.backo ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms isolation.level = \u4e8b\u52a1\u9694\u79bb\u7b49\u7ea7, value = \"read_uncommitted/read_commiitted\" , \u9ed8\u8ba4\u662f read_uncommitted , \u53ef\u4ee5\u6d88\u8d39\u5230 HW \u7b2c\u56db\u7ae0 \u4e3b\u9898\u4e0e\u5206\u533a \u00b6 4.1 \u4e3b\u9898\u7684\u7ba1\u7406 \u00b6 \u4e3b\u9898\u7ba1\u7406\u53ef\u4ee5\u7528 kafka-topics.sh(bat) \u6765\u7ba1\u7406, \u5f53\u7136\u8fd8\u80fd\u7528 KafkaAdminClient \u6765\u5b9e\u73b0\u3002 4.1.1 \u521b\u5efa\u4e3b\u9898 \u00b6 \u5982\u679c auto.create.otpics.enable = true , \u5ba2\u6237\u7aef(\u751f\u4ea7\u8005/\u6d88\u8d39\u8005)\u4f1a\u5728\u6ca1\u6709\u521b\u5efa\u5bf9\u5e94\u4e3b\u9898\u7684\u4e0b, \u6839\u636e num.partitions \u548c default.replication.facotr \u6765\u521b\u5efa\u4e3b\u9898, \u547d\u4ee4\u5982\u4e0b kafka-topics.sh --zookeeper <String : hosts> -create topic [String: topic] --partitions <\u5206\u533a\u6570\u91cf> replication-factor <\u526f\u672c\u6570\u91cf> replica-assignment \u547d\u4ee4, \u8fd8\u80fd\u6307\u5b9a\u526f\u672c\u5206\u914d ## \u5047\u5982 partition_num = 3, replica_nums = 2, \u683c\u5f0f\u5982\u4e0b, \u7b2c\u4e00\u4e2a\u662f *part1* \u6240\u5728\u7684 *broker*, \u4ee5\u6b64\u7c7b\u63a8 --replica-assignment <brokerId1:brokerId2, brokerId2:brokerId3, brokerId3:brokerId1......> \u5206\u533a\u540c\u4e00 part \u5fc5\u987b\u653e\u5728\u4e0d\u540c broker \u4e2d, \u5426\u5219\u4f1a\u62a5\u5f02\u5e38 --config \u4e3a\u6307\u5b9a topic \u8bbe\u7f6e\u53c2\u6570 --config <key=value> --config <key=value>... \u5efa\u5b8c\u4e3b\u9898\u540e, \u5b83\u4f1a\u5728 dir.logs / dir.log \u521b\u4e0b\u5bf9\u5e94\u7684\u4e3b\u9898\u548c\u5206\u533a, \u4e00\u822c\u547d\u540d\u683c\u5f0f\u4e3a \\<topic>-\\<partition> topic \u5177\u6709\u552f\u4e00\u6027 \u83b7\u53d6\u5143\u6570\u636e\u4fe1\u606f\u5c31\u80fd\u77e5\u9053\u4e3b\u9898\u3001\u5206\u533a\u3001\u914d\u7f6e\u60c5\u51b5, \u5982\u679c\u662f\u8fde\u4e86 zookeeper \u7684\u8bdd, \u5219\u53ef\u4ee5\u770b\u8282\u70b9\u4fe1\u606f\u83b7\u53d6\u8fd9\u4e9b\u60c5\u51b5 4.1.2 \u5206\u533a\u526f\u672c\u7684\u521b\u5efa \u00b6 \u81ea\u52a8\u521b\u5efa\u7684\u539f\u7406 \u8f6e\u8be2 partition , \u7136\u540e\u6bcf\u6b21\u5148\u968f\u673a\u4e2a startIndex , nextReplicaShift startIndex \u7b97\u51fa\u7b2c\u4e00\u4e2a\u526f\u672c\u7d22\u5f15 firstReplicaIndex , \u7136\u540e brokerIds[index] \u5c31\u662f\u526f\u672c\u843d\u5230\u7684broker\u4e86 fristReplicaIndex , nextReplicaShift \u4f5c\u4e3a\u4f20\u53c2, \u53c8\u4f20\u5230\u51fd\u6570 prelicaIndex \u91cc\u9762, \u5f97\u5230\u7b2c\u4e8c\u4e2a index \u5faa\u73af\u64cd\u4f5c 4.1.3 \u67e5\u770b\u4e3b\u9898 \u00b6 describe \u6307\u4ee4\u67e5\u770b\u4e3b\u9898\u4fe1\u606f, \u53ef\u989d\u5916\u589e\u52a0 topics-with-overrides (\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u7684\u4e3b\u9898), under-replicated-partitions (\u67e5\u627e\u5931\u6548\u526f\u672c), unavailable-partitions (\u67e5\u627e\u4e0d\u53ef\u7528\u526f\u672c) 4.1.4 \u4fee\u6539\u4e3b\u9898 \u00b6 \u57fa\u672c\u7528 kafka-configs.sh \u4e2d\u7684 alert \u65b9\u6cd5\u6765\u4fee\u6539\u4e3b\u9898, \u4e0d\u652f\u6301\u51cf\u5c11\u5206\u533a 4.1.5 \u914d\u7f6e\u7ba1\u7406 \u00b6 \u57fa\u672c\u8bb2 kafka-configs.sh \u811a\u672c\u7684\u7528\u6cd5 example : \u5220\u9664\u67d0\u4e2a topic \u4e0b\u7684\u914d\u7f6e kafka-configs.sh --zookeeper <zk\u5730\u5740> --alter --entity-type topics --entity-name topic-config --delete-config cleanup.policy,max.message.bytes 4.1.6 \u4e3b\u9898\u7aef\u53c2\u6570 \u00b6 \u683c\u5f0f: \u4e3b\u9898\u7aef\u53c2\u6570 - \u5bf9\u5e94 broker \u7684\u53c2\u6570 = \u91ca\u4e49 cleanup.policy - log.cleanup.policy = \u65e5\u5fd7\u538b\u7f29\u7b56\u7565, \u9ed8\u8ba4 delete , \u53ef\u4e3a compact compression.type - compression.type = \u538b\u7f29\u7c7b\u578b, \u9ed8\u8ba4 producer , \u4fdd\u7559\u4e3a\u751f\u4ea7\u8005\u4f7f\u7528\u7684\u539f\u59cb\u538b\u7f29, \u53ef\u4e3a uncompressed/snappy/gzip/lz4 delete.retention.ms - log.cleaner.delete.retention.ms = \u6807\u8bb0\u4e3a\u5220\u9664\u7684\u6570\u636e\u4fdd\u7559\u7684\u65f6\u95f4, \u9ed8\u8ba486400000, \u5c31\u662f\u4e00\u5929 file.delete.delay.ms - log.segment.delete.delay.ms = \u6e05\u7406\u6587\u4ef6\u524d\u7b49\u5f85\u7684\u65f6\u95f4, \u9ed8\u8ba460000, \u53731\u5206\u949f flush.message - log.flush.interval.messages = \u9700\u8981\u6536\u96c6\u591a\u5c11\u6570\u636e\u624d\u5f3a\u5236\u5237\u76d8, \u9ed8\u8ba4\u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a, \u4e0d\u5efa\u8bae\u66f4\u6539, \u503c\u4e3a Long.MAX_VALUE flush.ms - log.flush.interval.ms = \u9700\u8981\u7b49\u5f85\u591a\u4e45\u624d\u5f3a\u5236\u843d\u76d8, \u9ed8\u8ba4\u4e5f\u662f\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a follower.replication.throttled - follower.replication.throttled = \u914d\u7f6e\u88ab\u9650\u5236\u901f\u7387\u7684\u4e3b\u9898\u6240\u4ee5\u5bf9\u5e94\u7684 follower \u526f\u672c\u5217\u8868 index.interval.bytes - log.index.interval.bytes = \u63a7\u5236\u6dfb\u52a0\u7d22\u5f15\u7684\u9891\u7387, \u9ed8\u8ba4 4096, \u6d88\u606f\u5b57\u8282\u6570\u8d85\u8fc7\u8fd9\u4e2a\u503c\u5c31\u4f1a\u521b\u5efa\u7d22\u5f15 leader.replication.throttled - leader.replication.throttled = \u914d\u7f6e\u88ab\u9650\u5236\u901f\u7387\u7684\u4e3b\u9898\u6240\u4ee5\u5bf9\u5e94\u7684 leader \u526f\u672c\u5217\u8868 ..... 4.1.7 \u5220\u9664\u4e3b\u9898 \u00b6 kafka-topics.sh \u811a\u672c\u64cd\u4f5c\u7684\u8bdd\u5c31\u662f\u8fd9\u6837\u7684 kafka-topics.sh --zookeeper <zk\u5730\u5740> --delete --topic topic-delete zkCli.sh \u64cd\u4f5c\u662f\u8fd9\u6837\u7684 rmr /config/topics/<topic-name> delete /brokers/topics/<topic-name> 4.1.8 zk \u8282\u70b9\u4fe1\u606f\u901f\u67e5 \u00b6 /brokers/topics/ : brokers \u4e2d\u7684\u521b\u5efa\u7684 topics /config/topics/[topic\u540d] : \u67e5\u770b\u6307\u5b9a topic \u7684\u8bbe\u7f6e 4.2 \u521d\u8bc6 KafkaAdminClient \u00b6 4.2.1 Kafka \u57fa\u672c\u4f7f\u7528 \u00b6 \u57fa\u672c\u529f\u80fd\u5982\u4e0b \u521b\u5efa\u4e3b\u9898: CreateTopicsResult createTopics(Collection topics) \u5220\u9664\u4e3b\u9898: DeleteTopicsResult deleteTopics(Collection topics) \u5217\u51fa\u6240\u6709\u53ef\u7528\u7684\u4e3b\u9898: ListTopicsResult listTopics() \u67e5\u770b\u4e3b\u9898\u4fe1\u606f: DescribeConfigsResult describeTopics(Collection topicNames) \u67e5\u8be2\u914d\u7f6e\u4fe1\u606f: DescribeConfigsResult describeConfigs(Collection resources) \u4fee\u6539\u914d\u7f6e\u4fe1\u606f: AlertConfigsResult alterConfigs(Map configs) \u589e\u52a0\u5206\u533a: CreatePartitionsResult createPartitions(Map newPartitions) \u6f14\u793a\u4ee3\u7801\u5982\u4e0b package org.example.admin; import org.apache.kafka.clients.admin.*; import org.apache.kafka.common.config.ConfigResource; import java.util.Collection; import java.util.HashMap; import java.util.List; import java.util.Map; public class MyAdminClient { private static final String BROKER_LIST = \"localhost:19092\"; private static final String TOPIC = \"DELETE_TOPIC\"; private static final String DELETE_TOPIC = \"topic-demo\"; public static void main(String[] args) { Map<String, Object> map = new HashMap<>(); map.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); map.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, 30000); map.put(AdminClientConfig.CLIENT_ID_CONFIG, \"admin.client\"); try (AdminClient client = AdminClient.create(map)) { createTopic(client); listAllTopics(client); deleteTopic(client); describeConfig(client); alterConfig(client); } catch (Exception e) { System.out.println(e.getMessage()); } } private static void listAllTopics(AdminClient client) throws Exception { ListTopicsResult result = client.listTopics(); for (TopicListing tl : result.listings().get()) { System.out.println(tl.toString()); } } private static void createTopic(AdminClient adminClient) throws Exception { adminClient.createTopics(List.of(new NewTopic(TOPIC, 3, (short) 3))).all().get(); } private static void deleteTopic(AdminClient adminClient) throws Exception { adminClient.deleteTopics(List.of(DELETE_TOPIC)).all().get(); } private static void describeConfig(AdminClient adminClient) throws Exception { ConfigResource resource = new ConfigResource(ConfigResource.Type.TOPIC, TOPIC); System.out.println(adminClient.describeConfigs(List.of(resource)).all().get().get(resource)); } private static void alterConfig(AdminClient adminClient) throws Exception { ConfigResource resource = new ConfigResource(ConfigResource.Type.TOPIC, TOPIC); ConfigEntry entry = new ConfigEntry(\"cleanup.policy\", \"compact\"); AlterConfigOp config = new AlterConfigOp(entry, AlterConfigOp.OpType.SET); Map<ConfigResource, Collection<AlterConfigOp>> configs = new HashMap<>(); configs.put(resource, List.of(config)); System.out.println(adminClient.incrementalAlterConfigs(configs).all().get()); } } 4.2.2 \u4e3b\u9898\u5408\u6cd5\u6027\u9a8c\u8bc1 \u00b6 \u751f\u4ea7\u73af\u5883\u4e2d\u7684 auto.create.topics.enable \u4e00\u822c\u662f false , \u6240\u4ee5\u53ea\u80fd\u7528\u811a\u672c\u6216\u8005 KafkaAdmin \u521b\u5efa\u4e3b\u9898 \u6821\u9a8c\u5408\u6cd5\u6027\u7684\u5173\u952e\u53c2\u6570\u662f create.topic.policy.class.name , \u9ed8\u8ba4\u4e3a null , \u7136\u540e\u81ea\u5df1\u5b9e\u73b0 org.apache.kafka.server.policy.CreateTopicPolicy \u63a5\u53e3\u5c31\u884c, \u6700\u540e\u5728 config/server.properties \u914d\u597d\u8fd9\u4e2a\u914d\u7f6e\u5c31\u884c \u4e3b\u9898\u5408\u6cd5\u6027\u6821\u9a8c\u4e00\u822c\u662f\u6821\u9a8c\u521b\u5efa\u7684\u4e3b\u9898\u4e2d\u5176\u4ed6\u53c2\u6570\u5982 partition / replicas-num \u7b49\u7b49, \u53cd\u6b63\u8fd9\u4e2a\u63a5\u53e3\u5165\u53c2\u662f metadata \u6765\u7684, \u62ff\u51fa\u6765\u7528\u5c31\u5f97\u4e86 4.3 \u5206\u533a\u7684\u7ba1\u7406 \u00b6 4.3.1 \u4f18\u5148\u526f\u672c\u7684\u9009\u4e3e \u00b6 \u4f7f\u7528\u573a\u666f: \u5728 leader \u6302\u6389\u4e4b\u540e, \u53ef\u80fd\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c \u76ee\u7684: \u4e3a\u4e86\u9632\u6b62 broker \u96c6\u7fa4\u8d1f\u8f7d\u5931\u8861 \u5177\u4f53\u505a\u6cd5: 1. \u5229\u7528 auto.leader.rebalance.enable=true , Kafka \u63a7\u5236\u5668\u4f1a\u521b\u5efa\u5b9a\u65f6\u5668\u6765\u8ba1\u7b97\u4e0d\u5e73\u8861\u7387, \u5982\u679c\u8d85\u8fc7 leader.imbalance.per.broker.percentage , \u5c31\u4f1a\u81ea\u52a8\u6267\u884c\u6709\u9650\u526f\u672c\u7684\u9009\u4e3e, \u6267\u884c\u5468\u671f\u4e3a leader.imbalance.checke.ientrval.seconds (\u9ed8\u8ba4300s), \u7f3a\u70b9\u662f\u4e0d\u53ef\u63a7, \u4e5f\u6709\u53ef\u80fd\u4f1a\u6709\u6027\u80fd\u95ee\u9898, \u5f15\u8d77\u5ba2\u6237\u7aef\u963b\u585e 2. \u5229\u7528 kafka-perferred-replica-election.sh \u6765\u624b\u52a8\u6267\u884c, \u5982\u679c\u5206\u533a\u6570\u76ee\u591a, \u6027\u80fd\u6709\u5f71\u54cd 3. \u5229\u7528 json \u6587\u4ef6\u6765\u5bf9\u90e8\u5206\u4e3b\u9898\u4e0b\u7684\u90e8\u5206\u5206\u533a\u6267\u884c\u526f\u672c\u4f18\u5148\u9009\u4e3e\u7684\u64cd\u4f5c 4.3.2 \u5206\u533a\u91cd\u5206\u914d \u00b6 \u4f7f\u7528\u573a\u666f: \u65b0\u52a0\u5165\u7684 broker \u4e0d\u4f1a\u5206\u914d\u65e7\u5206\u533a, \u53ea\u80fd\u5206\u914d\u65b0\u4e3b\u9898\u7684\u5206\u533a, \u6240\u4ee5\u9700\u8981\u91cd\u65b0\u5206\u914d\u5206\u533a\u526f\u672c \u76ee\u7684: \u9632\u6b62\u5206\u533a\u5931\u8861 \u5177\u4f53\u505a\u6cd5: \u7528 \" kafka-reassign-partition.sh --generate --topics-to-move-json-file \u6587\u4ef6\u540d --broker-list \u8282\u70b9\u6570\u5b57 \" \u8fd9\u4e2a\u547d\u4ee4\u6765\u5bfc\u51fa\u91cd\u5206\u914d\u65b9\u6848, \u5b58\u6210json\u6587\u4ef6 \u7528 \" kafka-reassign-partition.sh --execute --reassignment-json-file \u4e0a\u9762\u7684\u6587\u4ef6 \" \u8fd9\u4e2a\u547d\u4ee4\u6765\u6267\u884c\u91cd\u5206\u914d\u65b9\u6848, \u4e0a\u4e00\u6b65\u5230\u5904\u662f\u65b9\u4fbf\u624b\u52a8\u66f4\u6539 4.3.3 \u590d\u5236\u9650\u6d41 \u00b6 \u53d1\u751f\u65f6\u673a: \u5206\u533a\u91cd\u5206\u914d\u7684\u65f6\u5019, \u5c31\u662f\u526f\u672c\u5728\u8282\u70b9\u4e4b\u95f4\u590d\u5236\u7684\u65f6\u5019 \u76ee\u7684: \u964d\u4f4e\u56e0\u91cd\u5206\u914d\u65f6\u5e26\u6765\u7684\u6027\u80fd\u524a\u51cf \u5177\u4f53\u505a\u6cd5: \u7528 kafka-config.sh + follower.replication.throttled.rate \u548c leader.replication.throttled.rate \u8bbe\u7f6e, \u5355\u4f4d\u662f B/s \u7528 in/kafka-reassign-partitions.sh --zookeeper localhost:2181/kafka --verify --reassignment-json-file project.json \u67e5\u770b\u8fdb\u5ea6 4.3.4 \u4fee\u6539\u526f\u672c\u56e0\u5b50 \u00b6 \u4f7f\u7528\u573a\u666f: \u521b\u5efa\u4e3b\u9898\u7684\u65f6\u5019\u586b\u9519\u526f\u672c\u56e0\u5b50\u6570/\u8fd0\u884c\u540e\u60f3\u63d0\u9ad8\u53ef\u9760\u6027\u4ee5\u53ca\u5bb9\u9519\u6027 \u5177\u4f53\u505a\u6cd5: \u7528 kafka-reassign-partition.sh --generate --topics-to-move-json-file \u6587\u4ef6\u540d --broker-list \u8282\u70b9\u6570\u5b57 \u6765\u5bfc\u51fa\u5f53\u524d\u5206\u914d\u65b9\u6848 \u6587\u672c\u4fee\u6539, \u4fee\u6539\u7684 json \u8282\u70b9\u662f replicas \u4ee5\u53ca log_dirs 4.4 \u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u5206\u533a\u6570 \u00b6 \u770b\u4e0b\u9762\u7684\u6807\u9898\u5c31\u77e5\u9053\u600e\u4e48\u9009\u4e86 4.4.1 \u6027\u80fd\u6d4b\u8bd5\u5de5\u5177 \u00b6 \u751f\u4ea7\u8005\u7528 kafka-producer-perf-test.sh --topic topic-1 --num-records 1000000 --record-size 1024 --throughput 100 --producer-props bootstrap.servers=localhost:9092 acks=1 throughput = 0 \u4e0d\u9650\u6d41, \u5f53\u524d\u9650\u6d41 100 bytes \u6d88\u8d39\u8005\u7528 kafka-consumer-perf-test.sh --topic topic-1 --messages 1000000 --broker-list localhost:9092 , \u65b9\u6cd5\u8ddf\u4e0a\u9762\u4e00\u6837 4.4.2 \u5206\u533a\u6570\u8d8a\u591a\u541e\u5410\u91cf\u5c31\u8d8a\u9ad8\u5417 \u00b6 \u660e\u7ec6\u4e0d\u662f, \u4f1a\u6709\u5cf0\u503c, \u770b\u56fe\u597d\u50cf\u662f 50 \u4e2a\u5206\u533a\u7684\u65f6\u5019\u6027\u80fd\u6700\u4f73 4.4.3 \u5206\u533a\u6570\u7684\u4e0a\u9650 \u00b6 \u8ddf\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173, \u518d\u591a\u5176\u5b9e\u4e5f\u6ca1\u7528 4.4.4 \u8003\u91cf\u56e0\u7d20 \u00b6 \u770b\u83dc\u5403\u996d\u5f97\u4e86, \u5206\u533a\u53ef\u4ee5\u8bbe\u4e3a\u8282\u70b9\u6570\u7684\u500d\u6570, \u5206\u533a\u4e00\u6765\u5747\u8861, \u4e8c\u6765\u53ef\u9760 \u7b2c5\u7ae0 \u65e5\u5fd7\u5b58\u50a8 \u00b6 5.1 \u6587\u4ef6\u76ee\u5f55\u5e03\u5c40 \u00b6 \u76f4\u63a5\u770b\u56fe\u5c31\u5f97\u4e86, \u6839\u76ee\u5f55\u4e0b\u7684\u65e5\u5fd7\u6587\u4ef6\u5939\u547d\u540d\u89c4\u5219\u662f \\<topic>-\\<partition> 5.2 \u65e5\u5fd7\u683c\u5f0f\u7684\u6f14\u53d8 \u00b6 \u671d\u7740\u5185\u5bb9\u538b\u7f29, \u5c5e\u6027\u6269\u5c55\u7684\u65b9\u5411\u6f14\u53d8 5.2.1 v0\u7248\u672c \u00b6 \u5341\u5206\u57fa\u7840\u7684\u8bbe\u8ba1, \u53ea\u80fd\u8bf4\u8be5\u6709\u7684\u90fd\u6709\u4e86 \u5927\u6982\u6284\u4e00\u4e0b\u5b57\u6bb5\u7684\u89e3\u91ca crc32 (4B) : crc32 \u6821\u9a8c, \u6821\u9a8c magic - value magic (1B) : \u6d88\u606f\u683c\u5f0f\u7248\u672c\u53f7, v0 = 0 , v1 = 1 , v2 = 2 attribute (1B) : \u6d88\u606f\u5c5e\u6027, \u4f4e3\u4f4d\u538b\u7f29\u7c7b\u578b: 0 \u6ca1\u6709\u538b\u7f29 /1 GZIP /2 SNAPPY /3 LZ4 key lenght (4B) : \u6d88\u606f key \u957f\u5ea6, -1 \u8868\u793a\u6ca1\u6709 key key : \u53ef\u9009\u5b57\u6bb5 value length (4B) : \u503c\u957f\u5ea6, -1 \u8868\u793a\u6d88\u606f\u4e3a\u7a7a, \u4eba\u79f0\u5893\u7891\u6d88\u606f value : \u6d88\u606f\u4f53 5.2.2 v1\u7248\u672c \u00b6 attribute (1B) : \u6d88\u606f\u5c5e\u6027, \u4f4e3\u4f4d\u538b\u7f29\u7c7b\u578b: 0 \u6ca1\u6709\u538b\u7f29 /1 GZIP /2 SNAPPY /3 LZ4, \u7b2c\u56db\u4f4d 0 \u8868\u793a timestamp \u7c7b\u578b\u4e3a CreateTime , \u800c1\u8868\u793atimestamp \u7c7b\u578b\u4e3a LogAppendTime , \u5176\u4ed6\u4f4d\u4fdd\u7559 timestamp (8B) : \u65f6\u95f4\u6233, \u8868\u793a\u54ea\u79cd\u65f6\u95f4\u770b\u4e0a\u9762\u7684\u5c5e\u6027 5.2.3 \u6d88\u606f\u538b\u7f29 \u00b6 \u5206\u4e24\u5c42\u6d88\u606f, \u53eb\u505a\u5916\u5c42\u6d88\u606f\u548c\u5185\u5c42\u6d88\u606f \u5916\u5c42\u6d88\u606f\u7684 offset = absolute offset = \u5185\u5c42\u6d88\u606f\u7684\u6700\u540e\u4e00\u6761\u6d88\u606f \u627e\u5185\u5c42\u6d88\u606f\u7684 absolute offset \u5f88\u7b80\u5355, \u5c31\u662f\u5916\u5c42\u7684 offset \u51cf\u5185\u5c42\u7684 offset \u538b\u7f29\u60c5\u51b5\u7684\u65f6\u95f4\u6233\u542b\u4e49\u53c8\u6709\u533a\u522b, \u89e3\u6790\u5982\u4e0b \u5916\u5c42\u6d88\u606f\u7684timestamp\u8bbe\u7f6e\u4e3a: \u5982\u679ctimestamp\u7c7b\u578b\u662fCreateTime, \u90a3\u4e48\u8bbe\u7f6e\u7684\u662f\u5185\u5c42\u6d88\u606f\u4e2d\u6700\u5927\u7684\u65f6\u95f4\u6233\u3002 \u5982\u679ctimestamp\u7c7b\u578b\u662fLogAppendTime, \u90a3\u4e48\u8bbe\u7f6e\u7684\u662fKafka\u670d\u52a1\u5668\u5f53\u524d\u7684\u65f6\u95f4\u6233\u3002 \u5185\u5c42\u6d88\u606f\u7684timestamp\u8bbe\u7f6e\u4e3a: \u5982\u679c\u5916\u5c42\u6d88\u606f\u7684timestamp\u7c7b\u578b\u662fCreateTime, \u90a3\u4e48\u8bbe\u7f6e\u7684\u662f\u751f\u4ea7\u8005\u521b\u5efa\u6d88\u606f\u65f6\u7684\u65f6\u95f4\u6233\u3002 \u5982\u679c\u5916\u5c42\u6d88\u606f\u7684timestamp\u7c7b\u578b\u662fLogAppendTime, \u90a3\u4e48\u6240\u6709\u5185\u5c42\u6d88\u606f\u7684\u65f6\u95f4\u6233\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002 5.2.4 \u53d8\u957f\u5b57\u6bb5 \u00b6 Kafka 3.x \u7684\u6d88\u606f\u683c\u5f0f\u53ea\u652f\u6301\u8fd9\u4e2a\u6d88\u606f\u683c\u5f0f, \u4e14\u8fd9\u4e2a\u7248\u672c\u591a\u4e86 Varints \u548c ZigZag \u7f16\u7801 ZigZag \u7f16\u7801\u7684\u7b97\u6cd5\u6bd4\u8f83\u7b80\u7b54, sint32 \u7684\u7f16\u7801 => (n << 1) ^ (n >> 31), sint64 \u7684\u5219\u662f (n << 1) ^ (n >> 63), \u4e3b\u8981\u7684\u4f5c\u7528\u662f\u538b\u7f29\u8d1f\u6570\u7f16\u7801\u957f\u5ea6 Varints \u8868\u793a\u65b9\u6cd5: \u6bcf\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u4f4d\u4e8e\u6700\u9ad8\u4f4d\u7684 msb \u4f4d\uff08 most significant bit \uff09, \u9664\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5916, \u5176\u4f59 msb \u4f4d\u90fd\u8bbe\u7f6e\u4e3a1, \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684 msb \u4f4d\u4e3a0, Varints \u4e2d\u91c7\u7528\u7684\u662f\u5c0f\u7aef\u5b57\u8282\u5e8f, \u5373\u6700\u5c0f\u7684\u5b57\u8282\u653e\u5728\u6700\u524d\u9762, \u8fd9\u4e2a\u8868\u793a\u6cd5\u53ef\u80fd\u4f1a\u8ba9\u90e8\u5206\u6570\u5b57\u7684\u7f16\u7801\u957f\u5ea6\u53d8\u5927 \u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b \u5047\u8bbe\u4e3a65 => 0100 0001 \u5148 *ZigZag* => 1000 0010 ^ 0000 0000 = 1000 0010 \u56e0\u4e3a\u4f4e7\u4f4d\u6709\u6548, \u6240\u4ee5\u8865\u4f4d\u53d8\u6210 000 0001 000 0010 \u4f4e\u4f4d\u5728\u524d, 000 0010 000 0001, \u6700\u540e\u8865\u4e2a *msb*, \u53d8\u6210 1000 0010 0000 0001 5.2.5 v2\u7248\u672c \u00b6 v2\u7248\u672c length : \u6d88\u606f\u603b\u957f\u5ea6\u3002 attributes : \u5f03\u7528, \u4f46\u8fd8\u662f\u5728\u6d88\u606f\u683c\u5f0f\u4e2d\u5360\u636e1B\u7684\u5927\u5c0f, \u4ee5\u5907\u672a\u6765\u7684\u683c\u5f0f\u6269\u5c55\u3002 timestamp delta : \u65f6\u95f4\u6233\u589e\u91cf\u3002\u901a\u5e38\u4e00\u4e2a timestamp \u9700\u8981\u5360\u75288\u4e2a\u5b57\u8282, \u5982\u679c\u50cf\u8fd9\u91cc\u4e00\u6837\u4fdd\u5b58\u4e0e RecordBatch \u7684\u8d77\u59cb\u65f6\u95f4\u6233\u7684\u5dee\u503c, \u5219\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8282\u7701\u5360\u7528\u7684\u5b57\u8282\u6570\u3002 offset delta : \u4f4d\u79fb\u589e\u91cf\u3002\u4fdd\u5b58\u4e0e RecordBatch \u8d77\u59cb\u4f4d\u79fb\u7684\u5dee\u503c, \u53ef\u4ee5\u8282\u7701\u5360\u7528\u7684\u5b57\u8282\u6570\u3002 headers : \u8fd9\u4e2a\u5b57\u6bb5\u7528\u6765\u652f\u6301\u5e94\u7528\u7ea7\u522b\u7684\u6269\u5c55, \u800c\u4e0d\u9700\u8981\u50cf v0 \u548c v1 \u7248\u672c\u4e00\u6837\u4e0d\u5f97\u4e0d\u5c06\u4e00\u4e9b\u5e94\u7528\u7ea7\u522b\u7684\u5c5e\u6027\u503c\u5d4c\u5165\u6d88\u606f\u4f53\u3002 Header \u7684\u683c\u5f0f\u5982\u56fe5-7\u6700\u53f3\u90e8\u5206\u6240\u793a, \u5305\u542b key \u548c value , \u4e00\u4e2a Record \u91cc\u9762\u53ef\u4ee5\u5305\u542b0\u81f3\u591a\u4e2a Header \u3002 first offset : \u8868\u793a\u5f53\u524d RecordBatch \u7684\u8d77\u59cb\u4f4d\u79fb\u3002 length : \u8ba1\u7b97\u4ece partition leader epoch \u5b57\u6bb5\u5f00\u59cb\u5230\u672b\u5c3e\u7684\u957f\u5ea6\u3002 partition leader epoch : \u5206\u533a leader \u7eaa\u5143, \u53ef\u4ee5\u770b\u4f5c\u5206\u533a leader \u7684\u7248\u672c\u53f7\u6216\u66f4\u65b0\u6b21\u6570, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80038.1.4\u8282\u3002 magic : \u6d88\u606f\u683c\u5f0f\u7684\u7248\u672c\u53f7, \u5bf9v2\u7248\u672c\u800c\u8a00, magic \u7b49\u4e8e2\u3002 attributes : \u6d88\u606f\u5c5e\u6027, \u6ce8\u610f\u8fd9\u91cc\u5360\u7528\u4e86\u4e24\u4e2a\u5b57\u8282\u3002\u4f4e3\u4f4d\u8868\u793a\u538b\u7f29\u683c\u5f0f, \u53ef\u4ee5\u53c2\u8003 v0 \u548c v1 \uff1b\u7b2c4\u4f4d\u8868\u793a\u65f6\u95f4\u6233\u7c7b\u578b\uff1b\u7b2c5\u4f4d\u8868\u793a\u6b64 RecordBatch \u662f\u5426\u5904\u4e8e\u4e8b\u52a1\u4e2d, 0\u8868\u793a\u975e\u4e8b\u52a1, 1\u8868\u793a\u4e8b\u52a1\u3002\u7b2c6\u4f4d\u8868\u793a\u662f\u5426\u662f\u63a7\u5236\u6d88\u606f\uff08 ControlBatch \uff09, 0\u8868\u793a\u975e\u63a7\u5236\u6d88\u606f, \u800c1\u8868\u793a\u662f\u63a7\u5236\u6d88\u606f, \u63a7\u5236\u6d88\u606f\u7528\u6765\u652f\u6301\u4e8b\u52a1\u529f\u80fd, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 last offset delta : RecordBatch \u4e2d\u6700\u540e\u4e00\u4e2a Record \u7684 offset \u4e0e first offset \u7684\u5dee\u503c\u3002\u4e3b\u8981\u88ab broker \u7528\u6765\u786e\u4fdd RecordBatch \u4e2d Record \u7ec4\u88c5\u7684\u6b63\u786e\u6027\u3002 first timestamp : RecordBatch \u4e2d\u7b2c\u4e00\u6761 Record \u7684\u65f6\u95f4\u6233\u3002 max timestamp : RecordBatch \u4e2d\u6700\u5927\u7684\u65f6\u95f4\u6233, \u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u6307\u6700\u540e\u4e00\u4e2a Record \u7684\u65f6\u95f4\u6233, \u548c last offset delta \u7684\u4f5c\u7528\u4e00\u6837, \u7528\u6765\u786e\u4fdd\u6d88\u606f\u7ec4\u88c5\u7684\u6b63\u786e\u6027\u3002 producer id : PID, \u7528\u6765\u652f\u6301\u5e42\u7b49\u548c\u4e8b\u52a1, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 producer epoch : \u548c producer id \u4e00\u6837, \u7528\u6765\u652f\u6301\u5e42\u7b49\u548c\u4e8b\u52a1, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 first sequence : \u548c producer id \u3001 producer epoch \u4e00\u6837, \u7528\u6765\u652f\u6301\u5e42\u7b49\u548c\u4e8b\u52a1, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 records count : RecordBatch \u4e2d Record \u7684\u4e2a\u6570\u3002 5.3 \u65e5\u5fd7\u7d22\u5f15 \u00b6 \u4e3b\u8981\u8bb2 .index \u6587\u4ef6\u548c .timeindex , .index \u6587\u4ef6\u662f\u901a\u8fc7\u6d88\u606f\u504f\u79fb\u91cf\u627e\u6d88\u606f, .timeindex \u5219\u662f\u6839\u636e\u6307\u5b9a\u65f6\u95f4\u6233\u627e\u65f6\u95f4 \u9996\u5148, \u6bcf\u5f53\u5199\u5165\u7684\u6d88\u606f\u91cf > log.index.interval.bytes , \u5c31\u4f1a\u65b0\u589e\u7d22\u5f15\u9879 \u7b26\u5408\u4ee5\u4e0b\u5176\u4e2d\u4e00\u4e2a\u6761\u4ef6, \u65e5\u5fd7\u6587\u4ef6\u90fd\u4f1a\u5207\u5206 \u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6 > broker \u4e2d\u7684 log.segment.bytes (\u9ed8\u8ba41073741824, 1 GB ) \u7cfb\u7edf\u5f53\u524d\u65f6\u95f4 - \u65e5\u5fd7\u5206\u6bb5\u6d88\u606f\u6700\u5927\u65f6\u95f4\u6233 > log.roll.ms/log.roll.hours , \u6b64\u5904 log.roll.ms \u4f18\u5148\u7ea7\u5927\u70b9 (\u9ed8\u8ba4\u53ea\u8bbe\u7f6e log.roll.hours = 7 ) .index \u6587\u4ef6\u5927\u5c0f or .timeindex \u6587\u4ef6\u5927\u5c0f > log.index.size.max.bytes (\u9ed8\u8ba4 10485760=10 MB ) \u8ffd\u52a0\u6d88\u606f offset - baseOffset > Integer.MAX 5.3.1 \u504f\u79fb\u91cf\u7d22\u5f15 \u00b6 8 * 16 = 4 * 32 \u521a\u597d int32, \u524d8\u540e8\u770b\u5c31\u5f97\u4e86 \u524d4\u4e2a\u5b57\u8282\u8868\u793a\u76f8\u5bf9\u504f\u79fb\u91cf, \u540e4\u4e2a\u5b57\u8282\u8868\u793a\u6d88\u606f\u5728\u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6\u5bf9\u5e94\u7684\u7269\u7406\u4f4d\u7f6e \u67e5\u627e\u65b9\u6cd5: \u4e8c\u5206\u6cd5 + \u8df3\u8868 \u504f\u79fb\u91cf\u7d22\u5f15\u793a\u610f\u56fe \u8df3\u8868\u67e5\u627e\u504f\u79fb\u91cf\u6240\u5728\u7684\u65e5\u5fd7\u5206\u6bb5, \u8ba1\u7b97\u76f8\u5bf9\u504f\u79fb\u91cf, \u6700\u540e\u518d\u7528\u524d\u9762\u56fe\u7684\u65b9\u6cd5, \u5c31\u53ef\u4ee5\u627e\u5230\u6d88\u606f 5.3.2 \u65f6\u95f4\u6233\u7d22\u5f15 \u00b6 64\u5b57\u8282 + 32\u5b57\u8282 \u5c06 targetTimeStamp \u548c\u6bcf\u4e2a\u65e5\u5fd7\u5206\u6bb5\u4e2d\u7684\u6700\u5927\u65f6\u95f4\u6233largestTimeStamp\u9010\u4e00\u5bf9\u6bd4\uff0c\u76f4\u5230\u627e\u5230\u4e0d\u5c0f\u4e8e targetTimeStamp \u7684 largestTimeStamp \u6240\u5bf9\u5e94\u7684\u65e5\u5fd7\u5206\u6bb5\u3002\u65e5\u5fd7\u5206\u6bb5\u4e2d\u7684largestTimeStamp\u7684\u8ba1\u7b97\u662f\u5148\u67e5\u8be2\u8be5\u65e5\u5fd7\u5206\u6bb5\u6240\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u7d22\u5f15\u6587\u4ef6\uff0c\u627e\u5230\u6700\u540e\u4e00\u6761\u7d22\u5f15\u9879\uff0c\u82e5\u6700\u540e\u4e00\u6761\u7d22\u5f15\u9879\u7684\u65f6\u95f4\u6233\u5b57\u6bb5\u503c\u5927\u4e8e0\uff0c\u5219\u53d6\u5176\u503c\uff0c\u5426\u5219\u53d6\u8be5\u65e5\u5fd7\u5206\u6bb5\u7684\u6700\u8fd1\u4fee\u6539\u65f6\u95f4\u3002 \u627e\u5230\u76f8\u5e94\u7684\u65e5\u5fd7\u5206\u6bb5\u4e4b\u540e\uff0c\u5728\u65f6\u95f4\u6233\u7d22\u5f15\u6587\u4ef6\u4e2d\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u67e5\u627e\u5230\u4e0d\u5927\u4e8etargetTimeStamp\u7684\u6700\u5927\u7d22\u5f15\u9879\uff0c\u5373[1526384718283\uff0c28]\uff0c\u5982\u6b64\u4fbf\u627e\u5230\u4e86\u4e00\u4e2a\u76f8\u5bf9\u504f\u79fb\u91cf28\u3002 \u5728\u504f\u79fb\u91cf\u7d22\u5f15\u6587\u4ef6\u4e2d\u4f7f\u7528\u4e8c\u5206\u7b97\u6cd5\u67e5\u627e\u5230\u4e0d\u5927\u4e8e28\u7684\u6700\u5927\u7d22\u5f15\u9879\uff0c\u5373[26\uff0c838]\u3002 \u4ece\u6b65\u9aa41\u4e2d\u627e\u5230\u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6\u4e2d\u7684838\u7684\u7269\u7406\u4f4d\u7f6e\u5f00\u59cb\u67e5\u627e\u4e0d\u5c0f\u4e8etargetTimeStamp\u7684\u6d88\u606f\u3002 5.4 \u65e5\u5fd7\u6e05\u7406 \u00b6 \u65e5\u5fd7\u6e05\u7406\u7b56\u7565\u67092, \u65e5\u5fd7\u5220\u9664\u548c\u65e5\u5fd7\u538b\u7f29, \u901a\u8fc7 log.cleanup.policy \u8fdb\u884c\u8bbe\u7f6e, \u9ed8\u8ba4\u662f delete , \u53ef\u4ee5\u540c\u65f6\u652f\u6301\u4e24\u79cd\u7b56\u7565\u3002\u5220\u9664\u7b56\u7565\u662f\u6839\u636e\u4e00\u5b9a\u89c4\u5219\u53bb\u5220\u6570\u636e, \u800c\u538b\u7f29\u5219\u662f\u540c\u4e00\u4e2a key \u4e0b\u4fdd\u7559\u6700\u65b0\u503c 5.4.1 \u65e5\u5fd7\u5220\u9664 \u00b6 \u57fa\u4e8e\u65f6\u95f4: \u901a\u8fc7broker\u7aef\u53c2\u6570 log.retention.hours \u3001 log.retention.minutes \u548c log.retention.ms \u6765\u914d\u7f6e, \u4f18\u5148\u7ea7\u7c92\u5ea6\u8d8a\u5c0f\u8d8a\u5927, \u9ed8\u8ba4\u503c 7 \u5929, \u53ea\u8bbe\u7f6e\u5c0f\u65f6 \u57fa\u4e8e\u65e5\u5fd7\u5927\u5c0f: \u6839\u636e log.retention.bytes \u8fdb\u884c\u8bbe\u7f6e, \u6307\u7684\u662f\u603b\u5927\u5c0f, \u9ed8\u8ba4 1073741824\uff0c\u5373 1GB \u57fa\u4e8e\u65e5\u5fd7\u8d77\u59cb\u504f\u79fb\u91cf: \u901a\u8fc7 DeleteRecordsRequest \u8bf7\u6c42, \u7136\u540e\u5224\u65ad\u65e5\u5fd7\u5206\u6bb5\u7684\u8d77\u59cb\u504f\u79fb\u91cf\u662f\u5426\u5c0f\u4e8e logStartOffset 5.4.2 \u65e5\u5fd7\u538b\u7f29 \u00b6 \u65e5\u5fd7\u538b\u7f29\u8ddf Redis \u7684 RDB \u6a21\u5f0f\u6709\u70b9\u50cf, \u53ef\u4ee5\u63d0\u9ad8\u8d77\u59cb\u52a0\u8f7d\u7684\u901f\u5ea6 clener-offset-checkpoint \u6587\u4ef6\u4f1a\u628a log \u6587\u4ef6\u5206\u4e3a clean \u548c dirty \u4e24\u90e8\u5206(\u6587\u4ef6\u8bb0\u5f55\u7684\u662f firstDirytOffset ), \u5982\u679c\u5ba2\u6237\u7aef\u80fd\u8d76\u4e0a dirty \u90e8\u5206, \u5c31 \u80fd\u8bfb\u5230\u65e5\u5fd7\u6240\u6709\u6d88\u606f\u4e86 \u6e05\u7406\u65f6 broker \u4f1a\u5f00\u7ebf\u7a0b\u6765\u6e05, \u5f00\u591a\u5c11 log.cleaner.thread \u51b3\u5b9a \u6c61\u6d4a\u7387\u51b3\u5b9a\u65e5\u5fd7\u6587\u4ef6\u6e05\u7406\u7684\u4f18\u5148\u7ea7, \u8ba1\u7b97\u516c\u5f0f dirtyRatio = dirtyBytes / (cleanBytes + dirtyBytes), \u53ef\u4ee5\u901a\u8fc7 log.cleaner.min.cleanable.ratio \u63a7\u5236\u89e6\u53d1\u538b\u7f29\u7684\u8d77\u59cb\u6bd4\u4f8b __consumer_offsets \u4e5f\u662f\u7528\u65e5\u5fd7\u538b\u7f29\u7b56\u7565\u8fdb\u884c\u4fdd\u5b58\u7684 \u6e05\u7406\u7b97\u6cd5\u5f88\u7b80\u5355, \u7528\u4e00\u4e2a SkimpyOffsetMap \u8bb0\u5f55 key \u548c offset , \u904d\u5386\u4e24\u6b21 log , \u7b2c\u4e00\u6b21\u8bb0\u5f55\u6700\u5927\u7684 offset , \u7b2c\u4e8c\u6b21\u5f00\u59cb\u5220\u9664 \u5893\u7891\u65e5\u5fd7 ( key != null && value == null ) \u6e05\u7406\u65f6\u673a = \u8be5\u65e5\u5fd7\u5206\u6bb5\u7684 lastModifiedTime + deleteHorizonMs ( broker \u7684 log.cleaner.delete.retention.ms , \u9ed8\u8ba486400000, \u537324\u5c0f\u65f6) < clean \u533a\u57df\u7684 lastModifiedTime \u4e3a\u9632\u6b62 compact \u51fa\u73b0\u788e\u7247\uff0c\u6bcf\u6b21 compact \u4f1a\u628a\u591a\u4e2a\u6587\u4ef6\u5206\u6210\u4e00\u7ec4, \u6bcf\u7ec4\u6587\u4ef6\u5927\u5c0f\u4e0d\u8d85\u8fc7 log.segment.bytes \u6bcf\u4e2a\u65e5\u5fd7\u5206\u7ec4\u6e05\u7406\u540e\u4f1a\u53d8\u6210 log.clean \u6587\u4ef6, \u7ee7\u7eed compact \u5c31\u53d8\u6210 log.swap , \u6700\u540e\u5220\u9664\u539f\u6765\u65e5\u5fd7, log.swap \u5c31\u53bb\u6389 swap \u540e\u7f00, \u5b8c\u6210\u538b\u7f29 5.5 \u78c1\u76d8\u5b58\u50a8 \u00b6 \u8bb2\u8ff0 Kafka \u5728\u843d\u76d8\u65f6\u5019\u7684\u4f18\u5316 5.5.1 \u9875\u7f13\u5b58 \u00b6 Kafka \u4f7f\u7528\u4e86\u5927\u91cf\u9875\u7f13\u5b58, \u5148\u628a\u6570\u636e\u5199\u5230\u9875\u7f13\u5b58, \u7136\u540e\u518d\u6839\u636e\u914d\u7f6e fsync \u5f02\u6b65\u843d\u76d8, \u843d\u76d8\u53ef\u4ee5\u7528 log.flush.interval.messages\u3001log.flush.interval.ms \u63a7\u5236 5.5.2 \u78c1\u76d8 I/O \u6d41\u7a0b \u00b6 \u00b7 \u5199\u64cd\u4f5c\uff1a\u7528\u6237\u8c03\u7528fwrite\u628a\u6570\u636e\u5199\u5165C\u5e93\u6807\u51c6IObuffer\u540e\u5c31\u8fd4\u56de\uff0c\u5373\u5199\u64cd\u4f5c\u901a\u5e38\u662f\u5f02\u6b65\u64cd\u4f5c\uff1b\u6570\u636e\u5199\u5165C\u5e93\u6807\u51c6IObuffer\u540e\uff0c\u4e0d\u4f1a\u7acb\u5373\u5237\u65b0\u5230\u78c1\u76d8\uff0c\u4f1a\u5c06\u591a\u6b21\u5c0f\u6570\u636e\u91cf\u76f8\u90bb\u5199\u64cd\u4f5c\u5148\u7f13\u5b58\u8d77\u6765\u5408\u5e76\uff0c\u6700\u7ec8\u8c03\u7528write\u51fd\u6570\u4e00\u6b21\u6027\u5199\u5165\uff08\u6216\u8005\u5c06\u5927\u5757\u6570\u636e\u5206\u89e3\u591a\u6b21write \u8c03\u7528\uff09\u9875\u7f13\u5b58\uff1b\u6570\u636e\u5230\u8fbe\u9875\u7f13\u5b58\u540e\u4e5f\u4e0d\u4f1a\u7acb\u5373\u5237\u65b0\u5230\u78c1\u76d8\uff0c\u5185\u6838\u6709 pdflush \u7ebf\u7a0b\u5728\u4e0d\u505c\u5730\u68c0\u6d4b\u810f\u9875\uff0c\u5224\u65ad\u662f\u5426\u8981\u5199\u56de\u5230\u78c1\u76d8\uff0c\u5982\u679c\u662f\u5219\u53d1\u8d77\u78c1\u76d8I/O\u8bf7\u6c42\u3002 \u00b7 \u8bfb\u64cd\u4f5c\uff1a\u7528\u6237\u8c03\u7528fread\u5230C\u5e93\u6807\u51c6IObuffer\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de\uff0c\u5426\u5219\u7ee7\u7eed\uff1b\u5230\u9875\u7f13\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de\uff0c\u5426\u5219\u7ee7\u7eed\uff1b\u53d1\u8d77 I/O \u8bf7\u6c42\uff0c\u8bfb\u53d6\u6570\u636e\u540e\u7f13\u5b58buffer\u548cC\u5e93\u6807\u51c6IObuffer\u5e76\u8fd4\u56de\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u8bfb\u64cd\u4f5c\u662f\u540c\u6b65\u8bf7\u6c42\u3002 \u00b7 I/O\u8bf7\u6c42\u5904\u7406\uff1a\u901a\u7528\u5757\u5c42\u6839\u636eI/O\u8bf7\u6c42\u6784\u9020\u4e00\u4e2a\u6216\u591a\u4e2abio\u7ed3\u6784\u5e76\u63d0\u4ea4\u7ed9\u8c03\u5ea6\u5c42\uff1b\u8c03\u5ea6\u5668\u5c06 bio \u7ed3\u6784\u8fdb\u884c\u6392\u5e8f\u548c\u5408\u5e76\u7ec4\u7ec7\u6210\u961f\u5217\u4e14\u786e\u4fdd\u8bfb\u5199\u64cd\u4f5c\u5c3d\u53ef\u80fd\u7406\u60f3\uff1a\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u7684\u8bfb\u64cd\u4f5c\u5408\u5e76\u5230\u4e00\u8d77\u8bfb\uff0c\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u7684\u5199\u64cd\u4f5c\u5408\u5e76\u5230\u4e00\u8d77\u5199\uff0c\u5c3d\u53ef\u80fd\u53d8\u968f\u673a\u4e3a\u987a\u5e8f\uff08\u56e0\u4e3a\u968f\u673a\u8bfb\u5199\u6bd4\u987a\u5e8f\u8bfb\u5199\u8981\u6162\uff09\uff0c\u8bfb\u5fc5\u987b\u4f18\u5148\u6ee1\u8db3\uff0c\u800c\u5199\u4e5f\u4e0d\u80fd\u7b49\u592a\u4e45\u3002 I/O \u8c03\u5ea6\u5206\u4ee5\u4e0b\u51e0\u79cd 1. NOOP: \u7b80\u5355\u7684FIFO\u961f\u5217 2. CFQ: \u6309\u7167I/O\u8bf7\u6c42\u7684\u5730\u5740\u8fdb\u884c\u6392\u5e8f, \u6bcf\u4e2a\u8fdb\u7a0b\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u961f\u5217\u6765\u7ba1\u7406\u8be5\u8fdb\u7a0b\u6240\u4ea7\u751f\u7684\u8bf7\u6c42, \u6839\u636e\u65f6\u95f4\u7247\u53bb\u8c03\u5ea6\uff0c\u4f46\u6709\u53ef\u80fd\u4f1a\u997f\u6b7b 3. DEADLINE: \u9664\u4e86CFQ\u672c\u8eab\u5177\u6709\u7684I/O\u6392\u5e8f\u961f\u5217\uff0cDEADLINE\u989d\u5916\u5206\u522b\u4e3a\u8bfbI/O\u548c\u5199I/O\u63d0\u4f9b\u4e86FIFO\u961f\u5217\u3002\u8bfbFIFO\u961f\u5217\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4\u4e3a500ms\uff0c\u5199FIFO\u961f\u5217\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4\u4e3a5s, READ > WRITE > CFQ 4. ANTICIPATORY: \u5728DEADLINE\u7684\u57fa\u7840\u4e0a\uff0c\u4e3a\u6bcf\u4e2a\u8bfbI/O\u90fd\u8bbe\u7f6e\u4e866ms\u7684\u7b49\u5f85\u65f6\u95f4\u7a97\u53e3\u3002\u5982\u679c\u57286ms\u5185OS\u6536\u5230\u4e86\u76f8\u90bb\u4f4d\u7f6e\u7684\u8bfbI/O\u8bf7\u6c42\uff0c\u5c31\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\u3002ANTICIPATORY\u7b97\u6cd5\u901a\u8fc7\u589e\u52a0\u7b49\u5f85\u65f6\u95f4\u6765\u83b7\u5f97\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u5047\u8bbe\u4e00\u4e2a\u5757\u8bbe\u5907\u53ea\u6709\u4e00\u4e2a\u7269\u7406\u67e5\u627e\u78c1\u5934\uff08\u4f8b\u5982\u4e00\u4e2a\u5355\u72ec\u7684SATA\u786c\u76d8\uff09\uff0c\u5c06\u591a\u4e2a\u968f\u673a\u7684\u5c0f\u5199\u5165\u6d41\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u5199\u5165\u6d41\uff08\u76f8\u5f53\u4e8e\u5c06\u968f\u673a\u8bfb\u5199\u53d8\u987a\u5e8f\u8bfb\u5199\uff09\uff0c\u901a\u8fc7\u8fd9\u4e2a\u539f\u7406\u6765\u4f7f\u7528\u8bfb\u53d6/\u5199\u5165\u7684\u5ef6\u65f6\u6362\u53d6\u6700\u5927\u7684\u8bfb\u53d6/\u5199\u5165\u541e\u5410\u91cf\u3002\u9002\u7528\u4e8e\u5927\u591a\u6570\u73af\u5883\uff0c\u7279\u522b\u662f\u8bfb\u53d6/\u5199\u5165\u8f83\u591a\u7684\u73af\u5883\u3002 5.5.3 \u96f6\u62f7\u8d1d \u00b6 \u5bf9 Linux \u64cd\u4f5c\u7cfb\u7edf\u800c\u8a00\uff0c\u96f6\u62f7\u8d1d\u6280\u672f\u4f9d\u8d56\u4e8e\u5e95\u5c42\u7684 sendfile() \u65b9\u6cd5\u5b9e\u73b0\u3002\u5bf9\u5e94\u4e8e Java \u8bed\u8a00\uff0c FileChannal.transferTo() \u65b9\u6cd5\u7684\u5e95\u5c42\u5b9e\u73b0\u5c31\u662f sendfile() \u65b9\u6cd5 \u7b2c6\u7ae0 \u6df1\u5165\u670d\u52a1\u7aef \u00b6 6.1 \u534f\u8bae\u8bbe\u8ba1 \u00b6 6.2 \u65f6\u95f4\u8f6e \u00b6 6.3 \u5ef6\u65f6\u64cd\u4f5c \u00b6 6.4 \u63a7\u5236\u5668 \u00b6 6.4.1 \u63a7\u5236\u5668\u7684\u9009\u4e3e\u53ca\u5f02\u5e38\u6062\u590d \u00b6 6.4.2 \u4f18\u96c5\u5173\u95ed \u00b6 6.5 \u53c2\u6570\u89e3\u5bc6 \u00b6 6.5.1 broker.id \u00b6 6.5.2 bootstrap.servers \u00b6 6.5.3 \u670d\u52a1\u7aef\u53c2\u6570\u5217\u8868 \u00b6 \u7b2c7\u7ae0 \u6df1\u5165\u5ba2\u6237\u7aef \u00b6 \u7b2c8\u7ae0 \u53ef\u9760\u6027\u63a2\u7a76 \u00b6 \u7b2c9\u7ae0 Kafka\u5e94\u7528 \u00b6 \u7b2c10\u7ae0 Kafka\u76d1\u63a7 \u00b6 \u7b2c11\u7ae0 \u9ad8\u7ea7\u5e94\u7528 \u00b6 \u7b2c12\u7ae0 Kafka\u4e0eSpark\u7684\u96c6\u6210 \u00b6","title":"\u6df1\u5165\u7406\u89e3Kafka\uff1a\u6838\u5fc3\u8bbe\u8ba1\u4e0e\u5b9e\u8df5\u539f\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#-kafka","text":"\u7b80\u5355\u8bb0\u4e0b\u7b14\u8bb0","title":"\u7b14\u8bb0-\u6df1\u5165\u7406\u89e3Kafka: \u6838\u5fc3\u8bbe\u8ba1\u4e0e\u5b9e\u8df5\u539f\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#kafka","text":"\u9996\u5148\u77e5\u9053\u4ed6\u662f\u5565: \u6d88\u606f\u7cfb\u7edf: \u5c31\u662f\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u7cfb\u7edf, \u4f5c\u7528\u65e0\u975e\u5c31\u90a3\u51e0\u4e2a-\u89e3\u8026, \u524a\u5cf0\u3001\u5f02\u6b65, \u7136\u540e\u518d\u52a0\u4e0a\u81ea\u5df1\u7684\u96c6\u7fa4\u7279\u6027, \u505a\u5230\u53ef\u6269\u5c55\u3001\u53ef\u6062\u590d \u6301\u4e45\u5316: log\u6587\u4ef6\u5b58\u6d88\u606f \u6d41\u5f0f\u5904\u7406\u5e73\u53f0: \u63d0\u4f9b\u63a5\u53e3\u6765\u505a\u7a97\u53e3\u3001\u8fde\u63a5\u3001\u53d8\u6362\u548c\u805a\u5408\u7b49\u7b49\u7684\u64cd\u4f5c","title":"\u7b2c\u4e00\u7ae0 \u521d\u8bc6Kafka"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#11","text":"\u770b\u4e0b\u56fe\u5c31\u597d: Producer : \u751f\u4ea7\u8005 Broker : \u5c31\u662f Kafka Server Consumer : \u6d88\u8d39\u8005 Message.Topic : \u6d88\u606f\u662f\u6309Topic\u53bb\u5206\u7684 Message.Topic.Partition : Topic \u5212\u5206\u4e3a\u4e0d\u540c\u7684\u5206\u533a\u5b58\u50a8, \u5206\u533a\u7684\u6570\u91cf\u3001\u5206\u914d\u89c4\u5219, \u80fd\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e, \u540c\u65f6\u8fd8\u80fd\u5728\u8fd0\u884c\u65f6, \u52a8\u6001\u4fee\u6539\u521b\u5efa\u4e3b\u9898\u65f6\u7684\u5206\u533a\u6570\u91cf\uff08\u53ea\u80fd\u589e, \u4e0d\u80fd\u51cf\uff09\u3001\u5206\u914d\u89c4\u5219 Message.Topic.Partition.Replicas : \u5206\u533a\u65f6\u6709\u526f\u672c\u7684, \u6bcf\u4e2a\u5206\u533a\u7684\u526f\u672c\u6570\u91cf, \u5206\u914d\u89c4\u5219\u4e5f\u662f\u8ddf\u4e0a\u9762\u4e00\u6837, \u53ef\u4ee5\u9759\u6001\u8bbe\u7f6e, \u52a8\u6001\u4fee\u6539 AR( Assigned Replicas ) , ISR (In-Sync Replicas) , OSR (Out-Sync Replicas) => AR = ISR + OSR \"Leader Replicas\": \u4e3b\u526f\u672c, \u8d1f\u8d23\u8bfb\u5199 \"Follower Replica\": \u4ece\u526f\u672c, \u8d1f\u8d23\u8bb0\u5f55\u732a\u526f\u672c\u6570\u636e, \u6709\u4e00\u5b9a\u6ede\u540e\u6027 Message.Topic.Partition.Replica.LEO : \u8be5\u5206\u533a\u4e0b\u4e00\u6761\u6d88\u606f\u5f85\u5199\u5165\u7684 Offset Message.Topic.Partition.Replica.HW : HW - 1 = \u6d88\u8d39\u8005\u80fd\u6d88\u8d39\u5230\u7684\u6700\u5927 Offset Message.Topic.Partition.Log : \u5728\u6301\u4e45\u5316\u5c42\u4e0a\u53ef\u4ee5\u628a\u5206\u533a\u770b\u6210\u4e00\u4e2a\u8ffd\u52a0\u7684 Log \u6587\u4ef6 Message.Topic.Partition.Offset : \u6307\u6d88\u606f\u5728\u5206\u533a\u4e2d\u7684\u4e00\u4e2a\u504f\u79fb\u91cf, \u4e14\u662f\u5206\u533a\u4e2d\u7684\u552f\u4e00\u6807\u8bc6, \u4e5f\u5c31\u662f Kafka \u662f\u5206\u533a\u5185\u6709\u5e8f\u7684","title":"1.1 \u57fa\u672c\u6982\u5ff5"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#12","text":"3.x \u7248\u672c\u5b89\u88c5\u6bd4\u8f83\u7b80\u5355, windows/linux \u7248\u672c\u90fd\u662f\u76f4\u63a5\u4e0b\u4e2a\u5305, \u5728\u672c\u5730\u8dd1\u811a\u672c\u5c31\u597d\u4e86","title":"1.2 \u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#13","text":"\u8fd9\u90e8\u5206\u4ee3\u7801\u5728\u540e\u9762\u7684\u7ae0\u8282\u662f\u4f1a\u8d34\u51fa\u6765\u4e86, \u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86","title":"1.3 \u751f\u4ea7\u548c\u6d88\u8d39"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#14","text":"\u8fd9\u91cc\u8d34\u51fa\u6700\u5e38\u89c1\u7684\u51e0\u4e2a\u53c2\u6570\u8bf4\u660e\u4e00\u4e0b, \u914d\u7f6e\u7684\u5185\u5bb9\u90fd\u662f\u5728 config/server.properties \u91cc\u9762, 3.x \u7248\u672c\u7684\u8bdd, \u5982\u679c\u8981\u7528 kraft \u7684\u8bdd, \u5219\u770b config/kraft/server.properties \u6587\u4ef6 process.roles : \u8fdb\u7a0b\u7684\u89d2\u8272\u5217\u8868, \u9017\u53f7\u5206\u5272, \u9ed8\u8ba4: broker,controller node.id : \u8282\u70b9 id , \u7528\u6765\u6807\u8bc6\u8282\u70b9, \u5728\u65e5\u5fd7\u53ef\u4ee5\u7528\u6765\u6392\u67e5\u95ee\u9898 listeners : broker \u76d1\u542c\u5ba2\u6237\u7aef\u7684\u534f\u8bae+\u5730\u5740+\u7aef\u53e3,\u683c\u5f0f\u4e3a : \u534f\u8bae://\u5730\u5740:\u7aef\u53e3, \u534f\u8bae\u503c\u4e3a: PLAINTEXT, SSL, SASL_SSL log.dirs : \u6301\u4e45\u5316\u76ee\u5f55, log.dirs \u4f18\u5148\u7ea7\u5927\u4e8e log.dir","title":"1.4 \u670d\u52a1\u7aef\u53c2\u6570\u914d\u7f6e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#_1","text":"","title":"\u7b2c\u4e8c\u7ae0 \u751f\u4ea7\u8005"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#21","text":"\u8fd9\u91cc\u6211\u5148\u8d34\u6574\u4f53\u7684\u4ee3\u7801, \u7136\u540e\u518d\u7ec6\u8bf4 package org.example.producer; import org.apache.kafka.clients.producer.KafkaProducer; import org.apache.kafka.clients.producer.ProducerConfig; import org.apache.kafka.clients.producer.ProducerRecord; import org.example.entity.UserProto; import java.util.Properties; public class KafkaProducerDemo { public static final String BROKER_LIST = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String TOPIC = \"test\"; public static Properties initConfig() { Properties props = new Properties(); props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\"); props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaProducerSerializer.class.getName()); props.put(ProducerConfig.CLIENT_ID_CONFIG, \"producer.client.id.demo\"); props.put(ProducerConfig.RETRIES_CONFIG, 10); props.put(ProducerConfig.ACKS_CONFIG, \"-1\"); props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaProducerInterceptor.class.getName()); return props; } public static void main(String[] args) { Properties props = initConfig(); try (KafkaProducer<String, UserProto.User> producer = new KafkaProducer<>(props)) { UserProto.User user = UserProto.User.newBuilder().setName(\"andrew\").setSex(1).setCode(\"c1\").build(); ProducerRecord<String, UserProto.User> record = new ProducerRecord<>(TOPIC, user); producer.send(record); } catch (Exception e) { System.out.println(e.getMessage()); } } }","title":"2.1 \u5ba2\u6237\u7aef\u5f00\u53d1"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#211","text":"ProducerInterceptor \u63a5\u53e3\u662f\u8fd9\u6837\u7684 public interface ProducerInterceptor<K, V> extends Configurable, AutoCloseable { ProducerRecord<K, V> onSend(ProducerRecord<K, V> var1); void onAcknowledgement(RecordMetadata var1, Exception var2); void close(); } \u62e6\u622a\u5668\u7684\u6ce8\u5165\u65b9\u5f0f\u662f\u8fd9\u6837\u7684, \u6e90\u7801\u7528\u53cd\u5c04 (getDeclaredConstructor().newInstance()) \u53bb\u5b9e\u4f8b\u5316\u5bf9\u8c61 props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaProducerInterceptor.class.getName()); \u4ee5 kafka-client 3.7.0 \u4e3a\u4f8b onSend \u65b9\u6cd5\u662f\u5728 KafkaProducer \u6e90\u7801 357 \u884c\u6267\u884c\u7684 public Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback) { ProducerRecord<K, V> interceptedRecord = this.interceptors.onSend(record); return this.doSend(interceptedRecord, callback); } onAcknoledgement \u5219\u662f\u5728 703 \u884c\u89e6\u53d1, \u5c31\u662f\u5728 onComplete \u7684\u65f6\u5019\u8c03\u7528 public void onCompletion(RecordMetadata metadata, Exception exception) { if (metadata == null) { metadata = new RecordMetadata(this.topicPartition(), -1L, -1, -1L, -1, -1); } this.interceptors.onAcknowledgement(metadata, exception); if (this.userCallback != null) { this.userCallback.onCompletion(metadata, exception); } }","title":"2.1.1 \u62e6\u622a\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#212","text":"StringSerializer \u6e90\u7801\u5982\u4e0b package org.apache.kafka.common.serialization; import java.io.UnsupportedEncodingException; import java.nio.charset.StandardCharsets; import java.util.Map; import org.apache.kafka.common.errors.SerializationException; public class StringSerializer implements Serializer<String> { private String encoding; public StringSerializer() { this.encoding = StandardCharsets.UTF_8.name(); } public void configure(Map<String, ?> configs, boolean isKey) { String propertyName = isKey ? \"key.serializer.encoding\" : \"value.serializer.encoding\"; Object encodingValue = configs.get(propertyName); if (encodingValue == null) { encodingValue = configs.get(\"serializer.encoding\"); } if (encodingValue instanceof String) { this.encoding = (String)encodingValue; } } public byte[] serialize(String topic, String data) { try { return data == null ? null : data.getBytes(this.encoding); } catch (UnsupportedEncodingException var4) { throw new SerializationException(\"Error when serializing string to byte[] due to unsupported encoding \" + this.encoding); } } } \u6ca1\u5565\u7279\u522b, \u5c31\u662f serialize \u91cc\u8fd4\u56de\u4e86 string.getBytes() \u81ea\u5b9a\u4e49\u7684\u4e5f\u662f\u4e00\u6837, \u8fd4\u56de byte[] \u5c31\u597d, \u53cd\u5e8f\u5217\u5316\u9053\u7406\u4e00\u6837 \u4e00\u822c\u516c\u53f8\u90fd\u662fpb\u6765\u5f04\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684, \u4ee5\u4e0b\u662f\u6211\u81ea\u5df1\u7684demo\u4ee3\u7801, \u5341\u5206\u7b80\u5355 package org.example.producer; import org.apache.kafka.common.serialization.Serializer; import org.example.entity.UserProto; public class KafkaProducerSerializer implements Serializer<UserProto.User> { @Override public byte[] serialize(String s, UserProto.User user) { return user.toByteArray(); } }","title":"2.1.2 \u5e8f\u5217\u5316\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#213","text":"\u5148\u770b\u770b\u6e90\u7801\u5b9a\u4e49 package org.apache.kafka.clients.producer; import java.io.Closeable; import org.apache.kafka.common.Cluster; import org.apache.kafka.common.Configurable; public interface Partitioner extends Configurable, Closeable { int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster); void close(); /** @deprecated */ @Deprecated default void onNewBatch(String topic, Cluster cluster, int prevPartition) { } } \u9ed8\u8ba4\u5206\u533a\u5668 DefaultPartioner \u6e90\u7801\u662f\u8fd9\u6837\u7684 public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster, int numPartitions) { return keyBytes == null ? this.stickyPartitionCache.partition(topic, cluster) : BuiltInPartitioner.partitionForKey(keyBytes, numPartitions); } \u4e3b\u8981\u770bkey\u662f\u5426\u4e3a\u7a7a, \u5982\u679c\u7a7a\u7684\u8bdd\u8c03\u7528 stickyPartitionCache.partition , \u968f\u673a\u4e00\u4e2a\u53ef\u7528\u7684\u5206\u533a\u6765\u5199\u5165 \u975e\u7a7a\u5c31\u7528\u5185\u7f6e\u5206\u533a\u5668, \u5148\u7528 Utils.murmur2 \u6765 hash , \u6700\u540e % numPartitions","title":"2.1.3 \u5206\u533a\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#214","text":"\u53d1\u9001\u6a21\u5f0f\u6709\u4e09\u79cd: \u53d1\u540e\u5373\u5fd8( fire-and-forget )\u3001 \u540c\u6b65 ( sync )\u3001 \u5f02\u6b65( async ), \u5176\u5b9e send \u8fd4\u56de\u7684\u662f Future \u5bf9\u8c61, \u6240\u4ee5\u4f20\u53c2\u80af\u5b9a\u6709 Callback \u7684\u5165\u53c2, \u8981\u540c\u6b65\u6a21\u5f0f\u7684\u8bdd, \u76f4\u63a5 Future.get \u5373\u53ef\u3002 \u8fd9\u91cc\u8bb2\u8bb2\u589e\u52a0\u53ef\u9760\u6027\u7684\u5957\u8def \u6ce8\u610f: \u63d0\u9ad8\u53ef\u9760\u6027\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d props.put(ProducerConfig.RETRIES_CONFIG, 10); // \u589e\u52a0\u91cd\u8bd5\u6b21\u6570 props.put(ProducerConfig.ACKS_CONFIG, -1); // \u786e\u4fdd\u6240\u6709\u526f\u672c\u6709\u54cd\u5e94\u4e86\u624d\u5f53\u6210\u529f","title":"2.1.4 \u6d88\u606f\u53d1\u9001"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#22","text":"","title":"2.2 \u539f\u7406\u5206\u6790"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#221","text":"\u5b8c\u6574\u7684\u53d1\u9001\u6d41\u7a0b\u56fe\u5982\u4e0b: \u6574\u4f53\u6d41\u7a0b\u5206\u4e24\u4e2a\u7ebf\u7a0b\u5b8c\u6210, \u4e00\u4e2a\u4e3b\u7ebf\u7a0b, \u4e00\u4e2a\u53d1\u9001\u7ebf\u7a0b, 1-5 \u4e3b\u7ebf\u7a0b\u5b8c\u6210 \u4e3b\u7ebf\u7a0b\u901a\u8fc7 KafkaProducer \u521b\u5efa\u6d88\u606f \u770b\u5ba2\u6237\u7aef\u6709\u6ca1\u6709\u5b9e\u73b0 ProducerIntercepter \u8fd9\u4e2a\u63a5\u53e3, \u5982\u679c\u6709\u5c31\u5bf9\u6d88\u606f\u8fdb\u884c\u62e6\u622a\u5904\u7406, \u4e00\u822c\u62e6\u622a\u662f\u4e3a\u4e86\u5bf9\u6d88\u606f\u505a\u7b80\u5355\u5904\u7406, \u56e0\u4e3a\u592a\u590d\u6742\u4f1a\u5f71\u54cd\u53d1\u9001\u901f\u5ea6, \u540c\u65f6\u8fd9\u73a9\u610f\u662f\u53ef\u4ee5\u94fe\u5f0f\u7f16\u7a0b\u7684, \u91cc\u9762\u7684 onSend() \u5728\u53d1\u9001\u524d\u89e6\u53d1, onAcknowleagement() \u5728 Selector \u8fd4\u56de Response \u540e\u9a6c\u4e0a\u89e6\u53d1\uff1f \u5bf9\u6d88\u606f\u7684 key , value \u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c, \u8981\u81ea\u5b9a\u4e49, \u5c31\u5b9e\u73b0 org.apache.kafka.common.serlization.Seralizer \u63a5\u53e3, configure() \u914d\u7f6e\u5f53\u524d\u7c7b, serialize(String topic, T data) \u5c31\u662f\u5e8f\u5217\u5316\u65b9\u6cd5, \u8fd4\u56de byte[] , close() \u7528\u6765\u5173\u95ed\u5e8f\u5217\u5316\u5668 \u77e5\u9053 Topic \u4e86, \u5c31\u5f97\u77e5\u9053\u6d88\u606f\u5f80\u54ea\u4e2a\u5206\u533a\u53d1\u4e86, \u5982\u679c\u6ca1\u6709\u81ea\u5b9a\u4e49\u5206\u533a\u5668, \u90a3\u4e48\u5c31\u7528\u9ed8\u8ba4\u65b9\u6cd5\u6765\u786e\u5b9a\u53d1\u9001\u7684\u5206\u533a, \u5982\u679c\u6709\u5c31\u6839\u636e\u81ea\u5b9a\u4e49\u7684\u7ed3\u679c\u786e\u5b9a\u5206\u533a\u53f7 \u4e3b\u7ebf\u7a0b\u628a\u6d88\u606f\u7f13\u5b58\u5230\u5bf9\u5e94\u7684 RecordAccumulator \u4e2d, \u6570\u636e\u7ed3\u6784\u662f Map<Partiion, Deque\\ > , buffer.memory \u63a7\u5236\u5927\u5c0f, \u6d88\u606f\u592a\u591a\u4f1a\u963b\u585e\u53d1\u9001\u65b9\u6cd5, max.block.ms \u63a7\u5236\u963b\u585e\u7b49\u5f85\u65f6\u95f4, batch.size \u63a7\u5236 ProducerBatch \u5927\u5c0f Sender \u7ebf\u7a0b\u521b\u5efa Sender \u5bf9\u8c61, \u628a RecordAccumulator . Map<Partiion, Deque\\ > \u8f6c\u6362\u6210 Map<Node, List\\ > , \u6700\u540e\u5c01\u6210 \u5bf9\u8c61 \u8f6c\u6210 Map<NodeId, Deque\\ > \u653e\u5230 InFlightRequests \u4e2d, \u8fd9\u73a9\u610f\u662f\u7528\u6765\u8bb0\u5f55\u53d1\u4e86, \u4f46\u6ca1\u6709\u54cd\u5e94\u7684 Request , max.in.flight.requests.per.connection \u9ed8\u8ba4\u4e3a5, \u8868\u793a\u6bcf\u4e2a\u8fde\u63a5\u6700\u5927\u7b49\u5f85\u54cd\u5e94\u7684\u8bf7\u6c42\u6570\u662f5, \u8d85\u8fc75\u5c31\u4e0d\u80fd\u53d1\u9001\u4e86\u3002\u8fd8\u80fd\u6839\u636e Deque .size() \u6765\u5224\u65ad\u6bcf\u4e2a Node \u7684\u8d1f\u8f7d\u60c5\u51b5","title":"2.2.1 \u6574\u4f53\u67b6\u6784"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#222","text":"\u5143\u6570\u636e\u6307\u7684\u662f\u5404\u4e2a\u8282\u70b9\u7684\u57fa\u672c\u4fe1\u606f, \u5305\u62ec\u8282\u70b9\u5730\u5740\u3001\u8282\u70b9\u4e3b\u9898\u3001\u8282\u70b9\u7684\u5206\u533a\u3001\u5206\u533a leader/follower \u526f\u672c\u4fe1\u606f, AR/ISR , Controller \u8282\u70b9 \u4e0a\u8ff0\u7684\u5143\u6570\u636e\u662f\u901a\u8fc7 Sender \u7ebf\u7a0b\u6765\u66f4\u65b0\u7684, \u66f4\u65b0\u6b65\u9aa4\u5982\u4e0b 1. \u627e\u51fa leastLoadedNode ( count \u4e00\u4e0b InFlightRequests . Deque .size() ) 2. \u53d1\u9001 MetadataRequest , \u7136\u540e\u7f13\u5b58\u5230 InFlightRequests","title":"2.2.2 \u5143\u6570\u636e\u66f4\u65b0"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#23","text":"\u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u5728\u521b\u5efa Producer \u7684\u65f6\u5019\u653e\u5230 props \u91cc\u9762\u7684 ack : = 1 \u8868\u793a leader \u526f\u672c\u6210\u529f\u5199\u5165, \u5c31\u4f1a\u6536\u5230\u6765\u81ea\u670d\u52a1\u7aef\u7684\u5199\u5165\u6210\u529f\u54cd\u5e94, \u6570\u636e\u6709\u53ef\u80fd\u4f1a\u4e22 = 0 \u8868\u793a\u4e0d\u7528\u7b49\u670d\u52a1\u7aef\u4efb\u4f55\u54cd\u5e94\u3002\u901f\u5ea6\u6700\u5feb\u662f\u5b83\u4e86, \u4f46\u5b83\u6700\u5bb9\u6613\u4e22\u6570\u636e =-1 \u8868\u793a\u6240\u6709 ISR \u6210\u529f\u5199\u5165\u624d\u8fd4\u56de\u6210\u529f, \u6700\u5927\u53ef\u9760\u6027\u662f\u5b83\u4e86 max.request.size : \u5ba2\u6237\u7aef\u80fd\u53d1\u9001\u6d88\u606f\u7684\u6700\u5927\u503c, \u9ed8\u8ba4 1048576 B =1 M , \u5fc5\u987b <= broker . message.max.size retries : \u751f\u4ea7\u8005\u91cd\u8bd5\u6b21\u6570 retry.backoff.ms : \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694, \u9ed8\u8ba4 100 compression.type : \u6d88\u606f\u538b\u7f29\u65b9\u5f0f, \u9ed8\u8ba4 none , \u53ef\u4ee5\u4e3a gzip snappy lz4 connections.max.idle.ms : \u6bcf\u4e2a\u9650\u5236\u8fde\u63a5\u6700\u5927\u5b58\u6d3b\u65f6\u95f4 linger.ms : \u53d1\u9001 ProducerBacth \u4e4b\u524d\u7b49\u5f85\u66f4\u591a\u6d88\u606f\u7684\u65f6\u95f4, \u7528\u6765\u63a7\u5236\u541e\u5410\u91cf\u7684 recieve.buffer.byte : \u63a7\u5236 Socket \u63a5\u6536\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 32768( B )=32 KB send.buffer.byte : \u63a7\u5236 Socket \u53d1\u9001\u7f13\u51b2\u533a\u7684\u5927\u5c0f, \u9ed8\u8ba4\u503c\u662f 131072( B )=128 KB","title":"2.3 \u91cd\u8981\u7684\u751f\u4ea7\u8005\u53c2\u6570"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#_2","text":"","title":"\u7b2c\u4e09\u7ae0 \u6d88\u8d39\u8005"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#31","text":"\u770b\u4e0b\u56fe\u5c31\u77e5\u9053\u5927\u6982\u610f\u601d\u4e86 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4\u3001\u5206\u533a\u7684\u5173\u7cfb\u5c31\u4ee5\u4e0b\u51e0\u70b9: \u6d88\u8d39\u8005\u662f\u4ee5\u5206\u533a\u4e3a\u5355\u4f4d\u8fdb\u884c\u6d88\u8d39 \u540c\u4e00 Topic \u4e0b\u7684\u6d88\u8d39\u7ec4, \u91cc\u9762\u7684\u6d88\u8d39\u8005\u4f1a\u5747\u644a Topic \u5185\u7684 partition , \u6240\u4ee5\u53ef\u80fd\u4f1a\u51fa\u73b0 partition \u4e0d\u591f\u5206\u7684\u60c5\u51b5 \u6d88\u8d39\u7ec4\u5185\u7684\u6d88\u8d39\u8005, \u5728\u6d88\u8d39\u540c\u4e00 topic \u4e0b\u7684\u6d88\u606f, \u663e\u7136\u53ea\u4f1a\u6d88\u8d39\u4e00\u6b21, \u76f8\u5f53\u4e8e p2p \u6a21\u5f0f \u5982\u679c\u662f\u4e0d\u540c\u7ec4\u7684\u6d88\u8d39\u8005, \u5c31\u76f8\u5f53\u4e8e\u5e7f\u64ad\u6a21\u5f0f\u4e86","title":"3.1 \u6d88\u8d39\u8005\u4e0e\u6d88\u8d39\u7ec4"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#32","text":"\u8001\u89c4\u77e9, \u5148\u628a\u6284\u7684\u4ee3\u7801\u8d34\u51fa\u6765 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.clients.consumer.KafkaConsumer; import org.example.entity.UserProto; import java.time.Duration; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.concurrent.atomic.AtomicBoolean; public class KafkaConsumerDemo { public static final String BROKER_LIST = \"localhost:19092,localhost:29092,localhost:39092\"; public static final String TOPIC = \"test\"; private static final String GROUP_ID = \"group.demo\"; public static final AtomicBoolean IS_RUNNING = new AtomicBoolean(true); public static Map<String, Object> initConfig() { Map<String, Object> props = new HashMap<>(); props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, KafkaConsumerDeserializer.class.getName()); props.put(ConsumerConfig.CLIENT_ID_CONFIG, \"producer.client.id.demo\"); props.put(ConsumerConfig.GROUP_ID_CONFIG, GROUP_ID); //\u989d\u5916\u529f\u80fd props.put(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, KafkaConsumerInterceptor.class.getName()); return props; } public static void main(String[] args) { try (KafkaConsumer<String, UserProto.User> consumer = new KafkaConsumer<>(initConfig())) { consumer.subscribe(List.of(TOPIC)); while (IS_RUNNING.get()) { ConsumerRecords<String, UserProto.User> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, UserProto.User> record : records) { System.out.printf(\" TOPIC = %s, partition = %s, offset = %s, key = %s, value = %s \\n\", record.topic(), record.partition(), record.offset(), record.key(), record.value()); } } } catch (Exception e) { System.out.println(e.getMessage()); } } }","title":"3.2 \u5ba2\u6237\u7aef\u5f00\u53d1"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#321","text":"\u4e00\u822c\u90fd\u662f\u90a3\u51e0\u4e2a\u4e86, \u6709\u4e86\u751f\u4ea7\u8005\u4ee3\u7801\u7684\u7ecf\u9a8c\u4e4b\u540e, \u7784\u4e00\u4e0b\u5c31\u597d\u4e86, \u8fd8\u6709\u5c31\u662f\u751f\u4ea7\u4e0a\u6700\u597d\u7528 ConsumerConfig \u7684\u679a\u4e3e, \u81ea\u5df1\u5199\u5bb9\u6613\u51fa\u9519 bootstrap.server : \u8fde\u7684 kafka.brokers \u7684\u5217\u8868 group.id : \u5c31\u662f\u6d88\u8d39\u8005\u7ec4 id , \u5982\u679c\u662f\u7a7a\u7684, \u4f1a\u63d0\u793a To use the group management or offset commit APIs, you must provide a valid group.id in the consumer configuration. ( kafka-client v 3.7.0 ) key.deserializer : key \u7684\u53cd\u5e8f\u5217\u5316\u5668, \u8ddf\u751f\u4ea7\u8005\u7684 key.serializer \u53cd\u8fc7\u6765\u5c31\u884c value.deserializer : value \u7684\u53cd\u5e8f\u5217\u5316\u5668, \u8ddf\u751f\u4ea7\u8005\u7684 value.serializer \u53cd\u8fc7\u6765\u5c31\u884c","title":"3.2.1 \u5fc5\u8981\u7684\u53c2\u6570\u914d\u7f6e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#322_kafkaconsumer","text":"\u8fd9\u90e8\u5206\u5e72\u8d27, \u539f\u4e66\u6ca1\u6709\u7684, \u6211\u662f\u5728\u627e\u62e6\u622a\u5668\u89e6\u53d1\u65f6\u673a\u7684\u65f6\u5019\u770b\u6e90\u7801, \u89c9\u5f97\u633a\u6709\u610f\u601d\u7684, \u635e\u51fa\u6765\u7ed9\u5927\u5bb6\u5206\u4eab KafkaConsumer \u8fd9\u4e2a\u7c7b\u5176\u5b9e\u662f\u7528\u4e86\u4ee3\u7406\u6a21\u5f0f\u751f\u6210\u4e86\u5b9e\u9645\u6267\u884c\u7684 KafkaConsumer \u5bf9\u8c61 public class KafkaConsumer<K, V> implements Consumer<K, V>{ KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { this.delegate = CREATOR.create(config, keyDeserializer, valueDeserializer); } KafkaConsumer(LogContext logContext, Time time, ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer, KafkaClient client, SubscriptionState subscriptions, ConsumerMetadata metadata, List<ConsumerPartitionAssignor> assignors) { this.delegate = CREATOR.create(logContext, time, config, keyDeserializer, valueDeserializer, client, subscriptions, metadata, assignors); } } \u91cc\u9762\u6839\u636e group.protocol \u751f\u6210\u4e24\u79cd\u6d88\u8d39\u8005\u5bf9\u8c61, \u4e00\u4e2a\u662f AsyncKafkaConsumer , \u4e00\u4e2a\u662f legacyKafkaConsumer public <K, V> ConsumerDelegate<K, V> create(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) { try { GroupProtocol groupProtocol = GroupProtocol.valueOf(config.getString(\"group.protocol\").toUpperCase(Locale.ROOT)); return (ConsumerDelegate)(groupProtocol == GroupProtocol.CONSUMER ? new AsyncKafkaConsumer(config, keyDeserializer, valueDeserializer) : new LegacyKafkaConsumer(config, keyDeserializer, valueDeserializer)); } catch (KafkaException var5) { throw var5; } catch (Throwable var6) { throw new KafkaException(\"Failed to construct Kafka consumer\", var6); } }","title":"3.2.2 KafkaConsumer \u521d\u59cb\u5316\u6e90\u7801"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#324","text":"\u8fd9\u4e00\u4e2a\u7ae0\u8282\u4e3b\u8981\u8bb2\u7684\u662f subsribe() \u548c assign() \u65b9\u6cd5 \u4e3b\u9898\u8ba2\u9605\u652f\u6301\u7684\u6a21\u5f0f: AUTO_TOPICS : \u5168\u540d\u79f0\u5339\u914d, \u4f46\u662f\u9700\u8981\u4f20\u4e3b\u9898\u6570\u7ec4\u505a\u4e3a\u4f20\u53c2, AUTO_PATTERN : \u6b63\u5219\u5339\u914d\u6a21\u5f0f USER_ASSIGNED : \u7528\u6237\u5206\u914d\u6a21\u5f0f, \u5206\u914d\u6307\u5b9a topic \u4e0b\u7684 partition \u4e3b\u9898\u8ba2\u9605\u7684\u65f6\u5019\u53ef\u4ee5\u4f20\u5165\u518d\u5e73\u8861\u7684\u56de\u8c03\u65b9\u6cd5","title":"3.2.4 \u8ba2\u9605\u4e3b\u9898\u4e0e\u5206\u533a"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#325","text":"\u8ddf\u539f\u4e66\u987a\u5e8f\u4e0d\u4e00\u6837, \u6211\u662f\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\u6765\u8bb2\u7684 \u62e6\u622a\u5668\u7684\u4f5c\u7528\u5176\u5b9e\u8ddf\u5176\u4ed6\u6846\u67b6\u90fd\u4e00\u6837, \u90fd\u662f\u7ed9\u76ee\u6807\u5bf9\u8c61\u4e00\u4e2a\u5207\u9762, \u5728\u89e6\u53d1\u67d0\u4e9b\u4e8b\u4ef6/\u52a8\u4f5c\u7684\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5, \u5148\u8d34\u4e00\u4e0b ConsumerInterceptor \u7684\u63a5\u53e3\u6e90\u7801 public interface ConsumerInterceptor<K, V> extends Configurable, AutoCloseable { ConsumerRecords<K, V> onConsume(ConsumerRecords<K, V> var1); void onCommit(Map<TopicPartition, OffsetAndMetadata> var1); void close(); } OnConsume \u65b9\u6cd5\u89e6\u53d1\u65f6\u673a\u5728 AsyncKafkaConsumer.poll()/LegacyKafakConsumer.poll() \u4e2d, \u5f53\u6267\u884c\u4e86 pollForFethces \u4e4b\u540e\u4f1a\u8fd4\u56de fetch \u63a5\u7740\u5c31\u6267\u884c onConsume(fetch.records()) \u4f8b\u5b50 package org.example.consumer; import org.apache.kafka.clients.consumer.ConsumerInterceptor; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.common.TopicPartition; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class KafkaConsumerInterceptor implements ConsumerInterceptor<String, String> { private static final long EXPIRE_INTERVAL = 10 * 1000; @Override public ConsumerRecords<String, String> onConsume(ConsumerRecords<String, String> records) { long now = System.currentTimeMillis(); Map<TopicPartition, List<ConsumerRecord<String, String>>> newRecords = new HashMap<>(); for (TopicPartition tp : records.partitions()) { List<ConsumerRecord<String, String>> list = records.records(tp); List<ConsumerRecord<String, String>> filter = new ArrayList<>(); for (ConsumerRecord<String, String> i : list) { if(now - i.timestamp() < EXPIRE_INTERVAL){ filter.add(i); } } newRecords.put(tp, filter); } return new ConsumerRecords<>(newRecords); } @Override public void close() { } @Override public void onCommit(Map map) { } /** * configure\u4e0d\u662f\u76f4\u63a5\u7ee7\u627f\u81eaInterceptor\u7684 * * @param map \u914d\u7f6emap */ @Override public void configure(Map<String, ?> map) { } }","title":"3.2.5 \u6d88\u8d39\u8005\u62e6\u622a\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#326","text":"\u53cd\u5e8f\u5217\u5316\u7684\u8bdd\u53ea\u9700\u8981\u7ee7\u627f Deserializer \u7684 deserialize(String topic, byte[] data) \u65b9\u6cd5\u5373\u53ef \u4e00\u822c\u751f\u4ea7\u90fd\u662f\u7528 ProtocalBuffer \u53bb\u505a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684, \u6700\u7b80\u5355\u7684 demo \u5982\u4e0b package org.example.consumer; import com.google.protobuf.InvalidProtocolBufferException; import org.apache.kafka.common.serialization.Deserializer; import org.example.entity.UserProto; public class KafkaConsumerDeserializer implements Deserializer<UserProto.User> { @Override public UserProto.User deserialize(String topic, byte[] data) { try { return UserProto.User.parseFrom(data); } catch (InvalidProtocolBufferException e) { throw new RuntimeException(e); } } }","title":"3.2.6 \u53cd\u5e8f\u5217\u5316"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#327","text":"\u8fd9\u4e00\u8282\u4e3b\u8981\u8bb2\u7684\u662f poll \u65b9\u6cd5 \u8fd9\u4e2a poll() \u65b9\u6cd5\u662f\u4e2a\u8f6e\u8bad\u65b9\u6cd5, \u4f20\u53c2 Duration \u662f\u6307\u62c9\u53bb\u7ebf\u7a0b\u7684\u6700\u5927\u963b\u585e\u65f6\u95f4(\u56e0\u4e3a\u6ca1\u6709\u6d88\u606f\u53ef\u80fd\u5f97\u7b49\u561b) \u7136\u540e\u8fd4\u56de\u7684 ConsumerRecords \u5bf9\u8c61\u5462\u662f\u53ef\u4ee5\u8fed\u4ee3\u7684","title":"3.2.7 \u6d88\u8d39\u6d88\u606f"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#328","text":"\u8fd9\u4e00\u8282\u4e3b\u8981\u8bb2\u7684\u662f\u5404\u4e2a offset \u7684\u533a\u522b\u4ee5\u53ca\u63d0\u4ea4 offset \u7684\u4e00\u4e9b\u6280\u5de7 \u6d88\u8d39\u8005\u5728\u5b8c\u6210\u6d88\u8d39\u4e4b\u540e\u5176\u5b9e\u662f\u9700\u8981\u63d0\u4ea4 offset (\u544a\u8bc9 broker \u6d88\u8d39\u5230\u54ea\u91cc\u4e86) offset \u6709\u4e09\u4e2a\u6982\u5ff5 consumed offset = last consumed offset = position() = commited offset - 1 \u6bcf\u6b21\u63d0\u4ea4\u7684\u90fd\u662f\u4e0b\u4e2a\u6d88\u8d39\u7684 offset \u5176\u5b9e\u65e0\u8bba\u600e\u4e48\u63d0\u4ea4\u4f4d\u79fb\u91cf, \u90fd\u5b58\u5728\u7740\u91cd\u590d\u6d88\u8d39\u548c\u6d88\u606f\u4e22\u5931\u7684\u98ce\u9669 commit \u5206 sync \u548c async , async \u65f6\u6709\u4e2a\u56de\u8c03\u65b9\u6cd5, \u662f\u5728 commit \u5b8c\u6210\u540e\u89e6\u53d1, \u751f\u4ea7\u4e00\u822c\u7528\u4e8e\u66f4\u6539\u7f13\u5b58/\u6570\u636e\u5e93\u4e2d\u5bf9\u5e94\u6570\u636e\u72b6\u6001 \u964d\u4f4e\u4e0a\u9762\u4e24\u4e2a\u98ce\u9669\u7684\u505a\u6cd5\u5c31\u662f \u81ea\u5df1\u624b\u52a8\u63d0\u4ea4, enable.auto.commit = false \u63d0\u4ea4 offset \u9700\u8981\u6709\u91cd\u8bd5\u673a\u5236\uff08\u53ef\u4ee5\u5728 finally \u5757\u4e2d\u4f7f\u7528\u540c\u6b65\u63d0\u4ea4\uff09, \u9632\u6b62\u63d0\u4ea4\u5931\u8d25 \uff08\u4f46\u4f1a\u6709\u91cd\u590d\u6d88\u8d39\u7684\u98ce\u9669\uff09 \u81ea\u5df1\u505a\u5e42\u7b49\u6027\u5904\u7406, \u5373\u4f7f\u91cd\u590d\u6d88\u8d39\u4e5f\u4e0d\u614c","title":"3.2.8 \u4f4d\u79fb\u63d0\u4ea4"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#329","text":"\u5176\u5b9e\u5c31\u662f\u8bb2\u4e86 pause() / resume() / close() / wakeup() \u65b9\u6cd5 \u56e0\u4e3a idea \u4f1a\u63d0\u793a\u521b\u5efa KafkaConsumer \u5b9e\u4f8b\u5efa\u8bae\u7528 try(resource) \u521b\u5efa, \u6240\u4ee5\u53ef\u4ee5\u4f18\u96c5\u5173\u95ed consumer \u56e0\u4e3a\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684\u65e0\u9650\u5faa\u73af\u7684\u5224\u65ad\u6761\u4ef6\u662f running.get() , \u6240\u4ee5\u4e5f\u53ef\u4ee5\u4f18\u96c5\u9000\u51fa\u5faa\u73af wakeup() \u662f\u901a\u8fc7\u629b\u51fa\u5f02\u5e38( WakeupException )\u6765\u4e2d\u65ad\u6d88\u8d39\u7684, \u6240\u4ee5\u8981\u6ce8\u610f","title":"3.2.9 \u63a7\u5236\u6216\u5173\u95ed\u6d88\u8d39"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#3210","text":"auto.offset.reset \u7c97\u7c92\u5ea6\u63a7\u5236\u6d88\u8d39\u8d77\u59cb\u4f4d\u7f6e, consumer.seek() seek() \u65b9\u6cd5\u53ef\u4ee5\u6307\u5b9a\u4ece\u67d0\u4e2a\u4e3b\u9898\u4e0b\u7684\u67d0\u4e2a\u5206\u533a\u7684 offfset \u8fdb\u884c\u6d88\u8d39, \u5982\u679c\u627e\u4e0d\u5230\u4f4d\u79fb, \u5c31\u89e6\u53d1 auto.offset.reset auto.offset.reset = earliest / latest / none earliest \u4ece 0 \u5f00\u59cb\u6d88\u8d39 latest \u4ece\u5206\u533a\u672b\u5c3e\u5f00\u59cb\u6d88\u8d39 none \u627e\u4e0d\u5230\u6d88\u8d39\u4f4d\u79fb\u7684\u65f6\u5019\u5c31\u629b\u5f02\u5e38 \u53ef\u4ee5\u901a\u8fc7 beginOffsets() / endOffsets() / seekToBegin() / seekToEnd() \u627e\u5230\u5934\u5c3e\u4f4d\u7f6e\u8fdb\u884c\u6d88\u8d39 \u53ef\u901a\u8fc7 consuemr.offsetForTimess( Map ) \u67e5\u627e\u5bf9\u5e94\u7684 offset , \u7136\u540e\u901a\u8fc7 seek() \u5b9a\u4f4d\u6d88\u8d39","title":"3.2.10 \u6307\u5b9a\u4f4d\u79fb\u6d88\u8d39"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#3211","text":"\u6307\u7684\u662f\u5206\u533a\u6240\u5c5e\u6743\u4ece\u4e00\u4e2a\u6d88\u8d39\u8005\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u6d88\u8d39\u8005\u7684\u884c\u4e3a, \u5176\u5b9e\u5c31\u662f\u53d1\u751f\u5728\u6d88\u8d39\u8005\u7ec4\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff08\u7ec4\u5185\u6210\u5458\u6709\u589e\u51cf\uff09, \u5e94\u8be5\u600e\u4e48\u5904\u7406 \u518d\u5747\u8861\u53d1\u751f\u671f\u95f4, \u76f8\u5173\u7684\u6d88\u8d39\u8005\u662f\u65e0\u6cd5\u6d88\u8d39\u7684\uff08\u5373\u5bf9\u5e94\u6d88\u8d39\u8005\u7ec4\u5185\u7684\u6d88\u8d39\u8005\u4e0d\u53ef\u7528\uff09 \u5206\u533a\u91cd\u5206\u914d\u7684\u65f6\u5019, \u5f53\u524d\u6d88\u8d39\u8005\u7684\u72b6\u6001\u4f1a\u4e22\u5931, \u5176\u5b9e\u5c31\u662f A \u6d88\u8d39\u5230\u4e00\u534a\u7684\u65f6\u5019, \u5206\u533a\u53c8\u7ed9 B \u6d88\u8d39, \u5982\u679c\u6d88\u8d39\u4f4d\u79fb\u6ca1\u63d0\u4ea4, \u5c31\u53ef\u80fd\u91cd\u590d\u6d88\u8d39 \u518d\u5747\u8861\u76d1\u542c\u5668\u6709\u4e24\u4e2a\u65b9\u6cd5\u6765\u89c4\u907f\u8fd9\u79cd\u95ee\u9898 1) onPartitionsRevoke(Collcetion ) \u6d88\u8d39\u8005\u505c\u6b62\u6d88\u8d39\u540e, \u91cd\u5206\u914d\u4e4b\u524d\u89e6\u53d1 (\u8fd9\u91cc\u63d0\u4ea4\u5df2\u6d88\u8d39\u5b8c\u7684 offset , \u672c\u5730\u4fdd\u5b58) 2) onPartitionsAssigned(partitions) \u91cd\u5206\u914d\u4e4b\u540e, \u6d88\u8d39\u8005\u5f00\u59cb\u6d88\u8d39\u4e4b\u524d\u89e6\u53d1 (\u672c\u5730\u4fdd\u5b58\u7684 *offset* \u627e\u51fa\u6765, \u518d *seek* )","title":"3.2.11 \u518d\u5747\u8861"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#3212","text":"KafkaProducer \u662f\u7ebf\u7a0b\u5b89\u5168\u7684, KafkaConsumer \u662f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684, \u8fd9\u4e00\u8282\u4e3b\u8981\u8bb2\u6d88\u8d39\u8005\u5982\u4f55\u591a\u7ebf\u7a0b\u6d88\u8d39 \u6ce8\u610f, \u5982\u679c\u751f\u4ea7\u4e2d\u5bf9\u6d88\u606f\u7684\u987a\u5e8f\u6027\u6709\u8981\u6c42, \u4e0d\u5efa\u8bae\u4f7f\u7528\u591a\u7ebf\u7a0b\u6d88\u8d39\u540c\u4e00\u5206\u533a\u7684\u6570\u636e, \u56e0\u4e3a\u8fd8\u5f97\u81ea\u5df1\u7ef4\u62a4\u6570\u636e\u7684\u6709\u5e8f\u6027 \u5b9e\u73b0\u65b9\u5f0f\u5206\u4ee5\u4e0b\u51e0\u79cd \u7ebf\u7a0b\u5c01\u95ed, \u5b9e\u4f8b\u5316\u591a\u4e2a Consumer \u5bf9\u8c61\u8fdb\u884c\u6d88\u8d39 \u591a\u7ebf\u7a0b\u6d88\u8d39\u540c\u4e00\u4e2a\u5206\u533a\uff08\u4e0d\u63a8\u8350\uff09 \u5305\u88c5 ThreadPool \u548c Consumer , \u628a poll() \u5230\u7684 Record \u6254\u5230 ThreadPool \u91cc\u9762, \u5c31\u662f\u4e00\u4e2a Consumer \u62c9\u53d6\u67d0\u4e2a\u4e3b\u9898, \u591a\u7ebf\u7a0b\u6d88\u8d39 \u7b2c\u4e09\u4e2a\u65b9\u6848\u9700\u8981\u6ce8\u610f\u7684\u662f offset \u63d0\u4ea4\u95ee\u9898, \u53ef\u4ee5\u7528\u6ed1\u7a97/ AQS \u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898","title":"3.2.12 \u591a\u7ebf\u7a0b\u5b9e\u73b0"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#3213","text":"fetch.min.bytes = \u6bcf\u6b21\u62c9\u53d6\u6700\u5c0f\u6570\u636e\u91cf, \u63a7\u5236\u541e\u5410\u7528\u7684 fetch.max.bytes = \u6bcf\u6b21\u62c9\u53d6\u6700\u5927\u6570\u636e\u91cf, \u6d88\u606f\u5927\u4e8e\u8be5\u503c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u6d88\u606f\u4e0d\u53ef\u8bfb fetch.max.wait.ms = \u6bcf\u6b21\u62c9\u53d6\u6700\u5927\u7b49\u5f85\u65f6\u95f4, \u4e5f\u662f\u63a7\u5236\u541e\u5410, \u5177\u4f53\u770b\u5b9e\u9645\u5e94\u7528\u573a\u666f max.partition.fetch.bytes = \u6bcf\u4e2a\u5206\u533a\u6bcf\u6b21\u8fd4\u56de\u7ed9 Consumer \u7684\u6700\u5927\u6570\u636e\u91cf, \u6307\u7684\u662f fetch.bytes / partition_num max.poll.record = \u62c9\u53d6\u6700\u5927\u6d88\u606f\u6570, \u9ed8\u8ba4500\u6761 connections.max.idle.ms = \u591a\u4e45\u4e4b\u540e\u5173\u95ed\u9650\u5236\u8fde\u63a5, \u9ed8\u8ba4 540000 ms , \u5c31\u662f 9 min exclude.internal.topics = \u662f\u5426\u5c4f\u853d\u5185\u90e8\u4e3b\u9898, \u9ed8\u8ba4\u662f true , \u8868\u793a\u4e0d\u80fd\u7528\u6b63\u5219\u53bb\u8ba2\u9605\u4e3b\u9898, false \u5219\u76f8\u53cd receives.buffer.bytes = \u63a5\u6536\u7f13\u51b2\u533a\u5927\u5c0f, \u9ed8\u8ba4 65536 B , \u5c31\u662f 64 KB send.buffer.size = \u53d1\u9001\u7f13\u51b2\u533a\u5927\u5c0f, \u9ed8\u8ba4 131072 B , \u5c31\u662f 128 KB request.timeout.ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms metadata.max.age.ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms reconnect.backoff.ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms retry.backo ms = \u7b49\u5f85\u8bf7\u6c42\u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4, \u9ed8\u8ba4 30000 ms isolation.level = \u4e8b\u52a1\u9694\u79bb\u7b49\u7ea7, value = \"read_uncommitted/read_commiitted\" , \u9ed8\u8ba4\u662f read_uncommitted , \u53ef\u4ee5\u6d88\u8d39\u5230 HW","title":"3.2.13 \u91cd\u8981\u7684\u6d88\u8d39\u8005\u53c2\u6570"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#_3","text":"","title":"\u7b2c\u56db\u7ae0 \u4e3b\u9898\u4e0e\u5206\u533a"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#41","text":"\u4e3b\u9898\u7ba1\u7406\u53ef\u4ee5\u7528 kafka-topics.sh(bat) \u6765\u7ba1\u7406, \u5f53\u7136\u8fd8\u80fd\u7528 KafkaAdminClient \u6765\u5b9e\u73b0\u3002","title":"4.1 \u4e3b\u9898\u7684\u7ba1\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#411","text":"\u5982\u679c auto.create.otpics.enable = true , \u5ba2\u6237\u7aef(\u751f\u4ea7\u8005/\u6d88\u8d39\u8005)\u4f1a\u5728\u6ca1\u6709\u521b\u5efa\u5bf9\u5e94\u4e3b\u9898\u7684\u4e0b, \u6839\u636e num.partitions \u548c default.replication.facotr \u6765\u521b\u5efa\u4e3b\u9898, \u547d\u4ee4\u5982\u4e0b kafka-topics.sh --zookeeper <String : hosts> -create topic [String: topic] --partitions <\u5206\u533a\u6570\u91cf> replication-factor <\u526f\u672c\u6570\u91cf> replica-assignment \u547d\u4ee4, \u8fd8\u80fd\u6307\u5b9a\u526f\u672c\u5206\u914d ## \u5047\u5982 partition_num = 3, replica_nums = 2, \u683c\u5f0f\u5982\u4e0b, \u7b2c\u4e00\u4e2a\u662f *part1* \u6240\u5728\u7684 *broker*, \u4ee5\u6b64\u7c7b\u63a8 --replica-assignment <brokerId1:brokerId2, brokerId2:brokerId3, brokerId3:brokerId1......> \u5206\u533a\u540c\u4e00 part \u5fc5\u987b\u653e\u5728\u4e0d\u540c broker \u4e2d, \u5426\u5219\u4f1a\u62a5\u5f02\u5e38 --config \u4e3a\u6307\u5b9a topic \u8bbe\u7f6e\u53c2\u6570 --config <key=value> --config <key=value>... \u5efa\u5b8c\u4e3b\u9898\u540e, \u5b83\u4f1a\u5728 dir.logs / dir.log \u521b\u4e0b\u5bf9\u5e94\u7684\u4e3b\u9898\u548c\u5206\u533a, \u4e00\u822c\u547d\u540d\u683c\u5f0f\u4e3a \\<topic>-\\<partition> topic \u5177\u6709\u552f\u4e00\u6027 \u83b7\u53d6\u5143\u6570\u636e\u4fe1\u606f\u5c31\u80fd\u77e5\u9053\u4e3b\u9898\u3001\u5206\u533a\u3001\u914d\u7f6e\u60c5\u51b5, \u5982\u679c\u662f\u8fde\u4e86 zookeeper \u7684\u8bdd, \u5219\u53ef\u4ee5\u770b\u8282\u70b9\u4fe1\u606f\u83b7\u53d6\u8fd9\u4e9b\u60c5\u51b5","title":"4.1.1 \u521b\u5efa\u4e3b\u9898"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#412","text":"\u81ea\u52a8\u521b\u5efa\u7684\u539f\u7406 \u8f6e\u8be2 partition , \u7136\u540e\u6bcf\u6b21\u5148\u968f\u673a\u4e2a startIndex , nextReplicaShift startIndex \u7b97\u51fa\u7b2c\u4e00\u4e2a\u526f\u672c\u7d22\u5f15 firstReplicaIndex , \u7136\u540e brokerIds[index] \u5c31\u662f\u526f\u672c\u843d\u5230\u7684broker\u4e86 fristReplicaIndex , nextReplicaShift \u4f5c\u4e3a\u4f20\u53c2, \u53c8\u4f20\u5230\u51fd\u6570 prelicaIndex \u91cc\u9762, \u5f97\u5230\u7b2c\u4e8c\u4e2a index \u5faa\u73af\u64cd\u4f5c","title":"4.1.2 \u5206\u533a\u526f\u672c\u7684\u521b\u5efa"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#413","text":"describe \u6307\u4ee4\u67e5\u770b\u4e3b\u9898\u4fe1\u606f, \u53ef\u989d\u5916\u589e\u52a0 topics-with-overrides (\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u7684\u4e3b\u9898), under-replicated-partitions (\u67e5\u627e\u5931\u6548\u526f\u672c), unavailable-partitions (\u67e5\u627e\u4e0d\u53ef\u7528\u526f\u672c)","title":"4.1.3 \u67e5\u770b\u4e3b\u9898"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#414","text":"\u57fa\u672c\u7528 kafka-configs.sh \u4e2d\u7684 alert \u65b9\u6cd5\u6765\u4fee\u6539\u4e3b\u9898, \u4e0d\u652f\u6301\u51cf\u5c11\u5206\u533a","title":"4.1.4 \u4fee\u6539\u4e3b\u9898"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#415","text":"\u57fa\u672c\u8bb2 kafka-configs.sh \u811a\u672c\u7684\u7528\u6cd5 example : \u5220\u9664\u67d0\u4e2a topic \u4e0b\u7684\u914d\u7f6e kafka-configs.sh --zookeeper <zk\u5730\u5740> --alter --entity-type topics --entity-name topic-config --delete-config cleanup.policy,max.message.bytes","title":"4.1.5 \u914d\u7f6e\u7ba1\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#416","text":"\u683c\u5f0f: \u4e3b\u9898\u7aef\u53c2\u6570 - \u5bf9\u5e94 broker \u7684\u53c2\u6570 = \u91ca\u4e49 cleanup.policy - log.cleanup.policy = \u65e5\u5fd7\u538b\u7f29\u7b56\u7565, \u9ed8\u8ba4 delete , \u53ef\u4e3a compact compression.type - compression.type = \u538b\u7f29\u7c7b\u578b, \u9ed8\u8ba4 producer , \u4fdd\u7559\u4e3a\u751f\u4ea7\u8005\u4f7f\u7528\u7684\u539f\u59cb\u538b\u7f29, \u53ef\u4e3a uncompressed/snappy/gzip/lz4 delete.retention.ms - log.cleaner.delete.retention.ms = \u6807\u8bb0\u4e3a\u5220\u9664\u7684\u6570\u636e\u4fdd\u7559\u7684\u65f6\u95f4, \u9ed8\u8ba486400000, \u5c31\u662f\u4e00\u5929 file.delete.delay.ms - log.segment.delete.delay.ms = \u6e05\u7406\u6587\u4ef6\u524d\u7b49\u5f85\u7684\u65f6\u95f4, \u9ed8\u8ba460000, \u53731\u5206\u949f flush.message - log.flush.interval.messages = \u9700\u8981\u6536\u96c6\u591a\u5c11\u6570\u636e\u624d\u5f3a\u5236\u5237\u76d8, \u9ed8\u8ba4\u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a, \u4e0d\u5efa\u8bae\u66f4\u6539, \u503c\u4e3a Long.MAX_VALUE flush.ms - log.flush.interval.ms = \u9700\u8981\u7b49\u5f85\u591a\u4e45\u624d\u5f3a\u5236\u843d\u76d8, \u9ed8\u8ba4\u4e5f\u662f\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a follower.replication.throttled - follower.replication.throttled = \u914d\u7f6e\u88ab\u9650\u5236\u901f\u7387\u7684\u4e3b\u9898\u6240\u4ee5\u5bf9\u5e94\u7684 follower \u526f\u672c\u5217\u8868 index.interval.bytes - log.index.interval.bytes = \u63a7\u5236\u6dfb\u52a0\u7d22\u5f15\u7684\u9891\u7387, \u9ed8\u8ba4 4096, \u6d88\u606f\u5b57\u8282\u6570\u8d85\u8fc7\u8fd9\u4e2a\u503c\u5c31\u4f1a\u521b\u5efa\u7d22\u5f15 leader.replication.throttled - leader.replication.throttled = \u914d\u7f6e\u88ab\u9650\u5236\u901f\u7387\u7684\u4e3b\u9898\u6240\u4ee5\u5bf9\u5e94\u7684 leader \u526f\u672c\u5217\u8868 .....","title":"4.1.6 \u4e3b\u9898\u7aef\u53c2\u6570"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#417","text":"kafka-topics.sh \u811a\u672c\u64cd\u4f5c\u7684\u8bdd\u5c31\u662f\u8fd9\u6837\u7684 kafka-topics.sh --zookeeper <zk\u5730\u5740> --delete --topic topic-delete zkCli.sh \u64cd\u4f5c\u662f\u8fd9\u6837\u7684 rmr /config/topics/<topic-name> delete /brokers/topics/<topic-name>","title":"4.1.7 \u5220\u9664\u4e3b\u9898"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#418_zk","text":"/brokers/topics/ : brokers \u4e2d\u7684\u521b\u5efa\u7684 topics /config/topics/[topic\u540d] : \u67e5\u770b\u6307\u5b9a topic \u7684\u8bbe\u7f6e","title":"4.1.8 zk \u8282\u70b9\u4fe1\u606f\u901f\u67e5"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#42_kafkaadminclient","text":"","title":"4.2 \u521d\u8bc6 KafkaAdminClient"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#421_kafka","text":"\u57fa\u672c\u529f\u80fd\u5982\u4e0b \u521b\u5efa\u4e3b\u9898: CreateTopicsResult createTopics(Collection topics) \u5220\u9664\u4e3b\u9898: DeleteTopicsResult deleteTopics(Collection topics) \u5217\u51fa\u6240\u6709\u53ef\u7528\u7684\u4e3b\u9898: ListTopicsResult listTopics() \u67e5\u770b\u4e3b\u9898\u4fe1\u606f: DescribeConfigsResult describeTopics(Collection topicNames) \u67e5\u8be2\u914d\u7f6e\u4fe1\u606f: DescribeConfigsResult describeConfigs(Collection resources) \u4fee\u6539\u914d\u7f6e\u4fe1\u606f: AlertConfigsResult alterConfigs(Map configs) \u589e\u52a0\u5206\u533a: CreatePartitionsResult createPartitions(Map newPartitions) \u6f14\u793a\u4ee3\u7801\u5982\u4e0b package org.example.admin; import org.apache.kafka.clients.admin.*; import org.apache.kafka.common.config.ConfigResource; import java.util.Collection; import java.util.HashMap; import java.util.List; import java.util.Map; public class MyAdminClient { private static final String BROKER_LIST = \"localhost:19092\"; private static final String TOPIC = \"DELETE_TOPIC\"; private static final String DELETE_TOPIC = \"topic-demo\"; public static void main(String[] args) { Map<String, Object> map = new HashMap<>(); map.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST); map.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, 30000); map.put(AdminClientConfig.CLIENT_ID_CONFIG, \"admin.client\"); try (AdminClient client = AdminClient.create(map)) { createTopic(client); listAllTopics(client); deleteTopic(client); describeConfig(client); alterConfig(client); } catch (Exception e) { System.out.println(e.getMessage()); } } private static void listAllTopics(AdminClient client) throws Exception { ListTopicsResult result = client.listTopics(); for (TopicListing tl : result.listings().get()) { System.out.println(tl.toString()); } } private static void createTopic(AdminClient adminClient) throws Exception { adminClient.createTopics(List.of(new NewTopic(TOPIC, 3, (short) 3))).all().get(); } private static void deleteTopic(AdminClient adminClient) throws Exception { adminClient.deleteTopics(List.of(DELETE_TOPIC)).all().get(); } private static void describeConfig(AdminClient adminClient) throws Exception { ConfigResource resource = new ConfigResource(ConfigResource.Type.TOPIC, TOPIC); System.out.println(adminClient.describeConfigs(List.of(resource)).all().get().get(resource)); } private static void alterConfig(AdminClient adminClient) throws Exception { ConfigResource resource = new ConfigResource(ConfigResource.Type.TOPIC, TOPIC); ConfigEntry entry = new ConfigEntry(\"cleanup.policy\", \"compact\"); AlterConfigOp config = new AlterConfigOp(entry, AlterConfigOp.OpType.SET); Map<ConfigResource, Collection<AlterConfigOp>> configs = new HashMap<>(); configs.put(resource, List.of(config)); System.out.println(adminClient.incrementalAlterConfigs(configs).all().get()); } }","title":"4.2.1 Kafka \u57fa\u672c\u4f7f\u7528"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#422","text":"\u751f\u4ea7\u73af\u5883\u4e2d\u7684 auto.create.topics.enable \u4e00\u822c\u662f false , \u6240\u4ee5\u53ea\u80fd\u7528\u811a\u672c\u6216\u8005 KafkaAdmin \u521b\u5efa\u4e3b\u9898 \u6821\u9a8c\u5408\u6cd5\u6027\u7684\u5173\u952e\u53c2\u6570\u662f create.topic.policy.class.name , \u9ed8\u8ba4\u4e3a null , \u7136\u540e\u81ea\u5df1\u5b9e\u73b0 org.apache.kafka.server.policy.CreateTopicPolicy \u63a5\u53e3\u5c31\u884c, \u6700\u540e\u5728 config/server.properties \u914d\u597d\u8fd9\u4e2a\u914d\u7f6e\u5c31\u884c \u4e3b\u9898\u5408\u6cd5\u6027\u6821\u9a8c\u4e00\u822c\u662f\u6821\u9a8c\u521b\u5efa\u7684\u4e3b\u9898\u4e2d\u5176\u4ed6\u53c2\u6570\u5982 partition / replicas-num \u7b49\u7b49, \u53cd\u6b63\u8fd9\u4e2a\u63a5\u53e3\u5165\u53c2\u662f metadata \u6765\u7684, \u62ff\u51fa\u6765\u7528\u5c31\u5f97\u4e86","title":"4.2.2 \u4e3b\u9898\u5408\u6cd5\u6027\u9a8c\u8bc1"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#43","text":"","title":"4.3 \u5206\u533a\u7684\u7ba1\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#431","text":"\u4f7f\u7528\u573a\u666f: \u5728 leader \u6302\u6389\u4e4b\u540e, \u53ef\u80fd\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c \u76ee\u7684: \u4e3a\u4e86\u9632\u6b62 broker \u96c6\u7fa4\u8d1f\u8f7d\u5931\u8861 \u5177\u4f53\u505a\u6cd5: 1. \u5229\u7528 auto.leader.rebalance.enable=true , Kafka \u63a7\u5236\u5668\u4f1a\u521b\u5efa\u5b9a\u65f6\u5668\u6765\u8ba1\u7b97\u4e0d\u5e73\u8861\u7387, \u5982\u679c\u8d85\u8fc7 leader.imbalance.per.broker.percentage , \u5c31\u4f1a\u81ea\u52a8\u6267\u884c\u6709\u9650\u526f\u672c\u7684\u9009\u4e3e, \u6267\u884c\u5468\u671f\u4e3a leader.imbalance.checke.ientrval.seconds (\u9ed8\u8ba4300s), \u7f3a\u70b9\u662f\u4e0d\u53ef\u63a7, \u4e5f\u6709\u53ef\u80fd\u4f1a\u6709\u6027\u80fd\u95ee\u9898, \u5f15\u8d77\u5ba2\u6237\u7aef\u963b\u585e 2. \u5229\u7528 kafka-perferred-replica-election.sh \u6765\u624b\u52a8\u6267\u884c, \u5982\u679c\u5206\u533a\u6570\u76ee\u591a, \u6027\u80fd\u6709\u5f71\u54cd 3. \u5229\u7528 json \u6587\u4ef6\u6765\u5bf9\u90e8\u5206\u4e3b\u9898\u4e0b\u7684\u90e8\u5206\u5206\u533a\u6267\u884c\u526f\u672c\u4f18\u5148\u9009\u4e3e\u7684\u64cd\u4f5c","title":"4.3.1 \u4f18\u5148\u526f\u672c\u7684\u9009\u4e3e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#432","text":"\u4f7f\u7528\u573a\u666f: \u65b0\u52a0\u5165\u7684 broker \u4e0d\u4f1a\u5206\u914d\u65e7\u5206\u533a, \u53ea\u80fd\u5206\u914d\u65b0\u4e3b\u9898\u7684\u5206\u533a, \u6240\u4ee5\u9700\u8981\u91cd\u65b0\u5206\u914d\u5206\u533a\u526f\u672c \u76ee\u7684: \u9632\u6b62\u5206\u533a\u5931\u8861 \u5177\u4f53\u505a\u6cd5: \u7528 \" kafka-reassign-partition.sh --generate --topics-to-move-json-file \u6587\u4ef6\u540d --broker-list \u8282\u70b9\u6570\u5b57 \" \u8fd9\u4e2a\u547d\u4ee4\u6765\u5bfc\u51fa\u91cd\u5206\u914d\u65b9\u6848, \u5b58\u6210json\u6587\u4ef6 \u7528 \" kafka-reassign-partition.sh --execute --reassignment-json-file \u4e0a\u9762\u7684\u6587\u4ef6 \" \u8fd9\u4e2a\u547d\u4ee4\u6765\u6267\u884c\u91cd\u5206\u914d\u65b9\u6848, \u4e0a\u4e00\u6b65\u5230\u5904\u662f\u65b9\u4fbf\u624b\u52a8\u66f4\u6539","title":"4.3.2 \u5206\u533a\u91cd\u5206\u914d"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#433","text":"\u53d1\u751f\u65f6\u673a: \u5206\u533a\u91cd\u5206\u914d\u7684\u65f6\u5019, \u5c31\u662f\u526f\u672c\u5728\u8282\u70b9\u4e4b\u95f4\u590d\u5236\u7684\u65f6\u5019 \u76ee\u7684: \u964d\u4f4e\u56e0\u91cd\u5206\u914d\u65f6\u5e26\u6765\u7684\u6027\u80fd\u524a\u51cf \u5177\u4f53\u505a\u6cd5: \u7528 kafka-config.sh + follower.replication.throttled.rate \u548c leader.replication.throttled.rate \u8bbe\u7f6e, \u5355\u4f4d\u662f B/s \u7528 in/kafka-reassign-partitions.sh --zookeeper localhost:2181/kafka --verify --reassignment-json-file project.json \u67e5\u770b\u8fdb\u5ea6","title":"4.3.3 \u590d\u5236\u9650\u6d41"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#434","text":"\u4f7f\u7528\u573a\u666f: \u521b\u5efa\u4e3b\u9898\u7684\u65f6\u5019\u586b\u9519\u526f\u672c\u56e0\u5b50\u6570/\u8fd0\u884c\u540e\u60f3\u63d0\u9ad8\u53ef\u9760\u6027\u4ee5\u53ca\u5bb9\u9519\u6027 \u5177\u4f53\u505a\u6cd5: \u7528 kafka-reassign-partition.sh --generate --topics-to-move-json-file \u6587\u4ef6\u540d --broker-list \u8282\u70b9\u6570\u5b57 \u6765\u5bfc\u51fa\u5f53\u524d\u5206\u914d\u65b9\u6848 \u6587\u672c\u4fee\u6539, \u4fee\u6539\u7684 json \u8282\u70b9\u662f replicas \u4ee5\u53ca log_dirs","title":"4.3.4 \u4fee\u6539\u526f\u672c\u56e0\u5b50"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#44","text":"\u770b\u4e0b\u9762\u7684\u6807\u9898\u5c31\u77e5\u9053\u600e\u4e48\u9009\u4e86","title":"4.4 \u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u5206\u533a\u6570"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#441","text":"\u751f\u4ea7\u8005\u7528 kafka-producer-perf-test.sh --topic topic-1 --num-records 1000000 --record-size 1024 --throughput 100 --producer-props bootstrap.servers=localhost:9092 acks=1 throughput = 0 \u4e0d\u9650\u6d41, \u5f53\u524d\u9650\u6d41 100 bytes \u6d88\u8d39\u8005\u7528 kafka-consumer-perf-test.sh --topic topic-1 --messages 1000000 --broker-list localhost:9092 , \u65b9\u6cd5\u8ddf\u4e0a\u9762\u4e00\u6837","title":"4.4.1 \u6027\u80fd\u6d4b\u8bd5\u5de5\u5177"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#442","text":"\u660e\u7ec6\u4e0d\u662f, \u4f1a\u6709\u5cf0\u503c, \u770b\u56fe\u597d\u50cf\u662f 50 \u4e2a\u5206\u533a\u7684\u65f6\u5019\u6027\u80fd\u6700\u4f73","title":"4.4.2 \u5206\u533a\u6570\u8d8a\u591a\u541e\u5410\u91cf\u5c31\u8d8a\u9ad8\u5417"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#443","text":"\u8ddf\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173, \u518d\u591a\u5176\u5b9e\u4e5f\u6ca1\u7528","title":"4.4.3 \u5206\u533a\u6570\u7684\u4e0a\u9650"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#444","text":"\u770b\u83dc\u5403\u996d\u5f97\u4e86, \u5206\u533a\u53ef\u4ee5\u8bbe\u4e3a\u8282\u70b9\u6570\u7684\u500d\u6570, \u5206\u533a\u4e00\u6765\u5747\u8861, \u4e8c\u6765\u53ef\u9760","title":"4.4.4 \u8003\u91cf\u56e0\u7d20"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#5","text":"","title":"\u7b2c5\u7ae0 \u65e5\u5fd7\u5b58\u50a8"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#51","text":"\u76f4\u63a5\u770b\u56fe\u5c31\u5f97\u4e86, \u6839\u76ee\u5f55\u4e0b\u7684\u65e5\u5fd7\u6587\u4ef6\u5939\u547d\u540d\u89c4\u5219\u662f \\<topic>-\\<partition>","title":"5.1 \u6587\u4ef6\u76ee\u5f55\u5e03\u5c40"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#52","text":"\u671d\u7740\u5185\u5bb9\u538b\u7f29, \u5c5e\u6027\u6269\u5c55\u7684\u65b9\u5411\u6f14\u53d8","title":"5.2 \u65e5\u5fd7\u683c\u5f0f\u7684\u6f14\u53d8"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#521_v0","text":"\u5341\u5206\u57fa\u7840\u7684\u8bbe\u8ba1, \u53ea\u80fd\u8bf4\u8be5\u6709\u7684\u90fd\u6709\u4e86 \u5927\u6982\u6284\u4e00\u4e0b\u5b57\u6bb5\u7684\u89e3\u91ca crc32 (4B) : crc32 \u6821\u9a8c, \u6821\u9a8c magic - value magic (1B) : \u6d88\u606f\u683c\u5f0f\u7248\u672c\u53f7, v0 = 0 , v1 = 1 , v2 = 2 attribute (1B) : \u6d88\u606f\u5c5e\u6027, \u4f4e3\u4f4d\u538b\u7f29\u7c7b\u578b: 0 \u6ca1\u6709\u538b\u7f29 /1 GZIP /2 SNAPPY /3 LZ4 key lenght (4B) : \u6d88\u606f key \u957f\u5ea6, -1 \u8868\u793a\u6ca1\u6709 key key : \u53ef\u9009\u5b57\u6bb5 value length (4B) : \u503c\u957f\u5ea6, -1 \u8868\u793a\u6d88\u606f\u4e3a\u7a7a, \u4eba\u79f0\u5893\u7891\u6d88\u606f value : \u6d88\u606f\u4f53","title":"5.2.1 v0\u7248\u672c"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#522_v1","text":"attribute (1B) : \u6d88\u606f\u5c5e\u6027, \u4f4e3\u4f4d\u538b\u7f29\u7c7b\u578b: 0 \u6ca1\u6709\u538b\u7f29 /1 GZIP /2 SNAPPY /3 LZ4, \u7b2c\u56db\u4f4d 0 \u8868\u793a timestamp \u7c7b\u578b\u4e3a CreateTime , \u800c1\u8868\u793atimestamp \u7c7b\u578b\u4e3a LogAppendTime , \u5176\u4ed6\u4f4d\u4fdd\u7559 timestamp (8B) : \u65f6\u95f4\u6233, \u8868\u793a\u54ea\u79cd\u65f6\u95f4\u770b\u4e0a\u9762\u7684\u5c5e\u6027","title":"5.2.2 v1\u7248\u672c"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#523","text":"\u5206\u4e24\u5c42\u6d88\u606f, \u53eb\u505a\u5916\u5c42\u6d88\u606f\u548c\u5185\u5c42\u6d88\u606f \u5916\u5c42\u6d88\u606f\u7684 offset = absolute offset = \u5185\u5c42\u6d88\u606f\u7684\u6700\u540e\u4e00\u6761\u6d88\u606f \u627e\u5185\u5c42\u6d88\u606f\u7684 absolute offset \u5f88\u7b80\u5355, \u5c31\u662f\u5916\u5c42\u7684 offset \u51cf\u5185\u5c42\u7684 offset \u538b\u7f29\u60c5\u51b5\u7684\u65f6\u95f4\u6233\u542b\u4e49\u53c8\u6709\u533a\u522b, \u89e3\u6790\u5982\u4e0b \u5916\u5c42\u6d88\u606f\u7684timestamp\u8bbe\u7f6e\u4e3a: \u5982\u679ctimestamp\u7c7b\u578b\u662fCreateTime, \u90a3\u4e48\u8bbe\u7f6e\u7684\u662f\u5185\u5c42\u6d88\u606f\u4e2d\u6700\u5927\u7684\u65f6\u95f4\u6233\u3002 \u5982\u679ctimestamp\u7c7b\u578b\u662fLogAppendTime, \u90a3\u4e48\u8bbe\u7f6e\u7684\u662fKafka\u670d\u52a1\u5668\u5f53\u524d\u7684\u65f6\u95f4\u6233\u3002 \u5185\u5c42\u6d88\u606f\u7684timestamp\u8bbe\u7f6e\u4e3a: \u5982\u679c\u5916\u5c42\u6d88\u606f\u7684timestamp\u7c7b\u578b\u662fCreateTime, \u90a3\u4e48\u8bbe\u7f6e\u7684\u662f\u751f\u4ea7\u8005\u521b\u5efa\u6d88\u606f\u65f6\u7684\u65f6\u95f4\u6233\u3002 \u5982\u679c\u5916\u5c42\u6d88\u606f\u7684timestamp\u7c7b\u578b\u662fLogAppendTime, \u90a3\u4e48\u6240\u6709\u5185\u5c42\u6d88\u606f\u7684\u65f6\u95f4\u6233\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002","title":"5.2.3 \u6d88\u606f\u538b\u7f29"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#524","text":"Kafka 3.x \u7684\u6d88\u606f\u683c\u5f0f\u53ea\u652f\u6301\u8fd9\u4e2a\u6d88\u606f\u683c\u5f0f, \u4e14\u8fd9\u4e2a\u7248\u672c\u591a\u4e86 Varints \u548c ZigZag \u7f16\u7801 ZigZag \u7f16\u7801\u7684\u7b97\u6cd5\u6bd4\u8f83\u7b80\u7b54, sint32 \u7684\u7f16\u7801 => (n << 1) ^ (n >> 31), sint64 \u7684\u5219\u662f (n << 1) ^ (n >> 63), \u4e3b\u8981\u7684\u4f5c\u7528\u662f\u538b\u7f29\u8d1f\u6570\u7f16\u7801\u957f\u5ea6 Varints \u8868\u793a\u65b9\u6cd5: \u6bcf\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u4f4d\u4e8e\u6700\u9ad8\u4f4d\u7684 msb \u4f4d\uff08 most significant bit \uff09, \u9664\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5916, \u5176\u4f59 msb \u4f4d\u90fd\u8bbe\u7f6e\u4e3a1, \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684 msb \u4f4d\u4e3a0, Varints \u4e2d\u91c7\u7528\u7684\u662f\u5c0f\u7aef\u5b57\u8282\u5e8f, \u5373\u6700\u5c0f\u7684\u5b57\u8282\u653e\u5728\u6700\u524d\u9762, \u8fd9\u4e2a\u8868\u793a\u6cd5\u53ef\u80fd\u4f1a\u8ba9\u90e8\u5206\u6570\u5b57\u7684\u7f16\u7801\u957f\u5ea6\u53d8\u5927 \u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b \u5047\u8bbe\u4e3a65 => 0100 0001 \u5148 *ZigZag* => 1000 0010 ^ 0000 0000 = 1000 0010 \u56e0\u4e3a\u4f4e7\u4f4d\u6709\u6548, \u6240\u4ee5\u8865\u4f4d\u53d8\u6210 000 0001 000 0010 \u4f4e\u4f4d\u5728\u524d, 000 0010 000 0001, \u6700\u540e\u8865\u4e2a *msb*, \u53d8\u6210 1000 0010 0000 0001","title":"5.2.4 \u53d8\u957f\u5b57\u6bb5"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#525_v2","text":"v2\u7248\u672c length : \u6d88\u606f\u603b\u957f\u5ea6\u3002 attributes : \u5f03\u7528, \u4f46\u8fd8\u662f\u5728\u6d88\u606f\u683c\u5f0f\u4e2d\u5360\u636e1B\u7684\u5927\u5c0f, \u4ee5\u5907\u672a\u6765\u7684\u683c\u5f0f\u6269\u5c55\u3002 timestamp delta : \u65f6\u95f4\u6233\u589e\u91cf\u3002\u901a\u5e38\u4e00\u4e2a timestamp \u9700\u8981\u5360\u75288\u4e2a\u5b57\u8282, \u5982\u679c\u50cf\u8fd9\u91cc\u4e00\u6837\u4fdd\u5b58\u4e0e RecordBatch \u7684\u8d77\u59cb\u65f6\u95f4\u6233\u7684\u5dee\u503c, \u5219\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8282\u7701\u5360\u7528\u7684\u5b57\u8282\u6570\u3002 offset delta : \u4f4d\u79fb\u589e\u91cf\u3002\u4fdd\u5b58\u4e0e RecordBatch \u8d77\u59cb\u4f4d\u79fb\u7684\u5dee\u503c, \u53ef\u4ee5\u8282\u7701\u5360\u7528\u7684\u5b57\u8282\u6570\u3002 headers : \u8fd9\u4e2a\u5b57\u6bb5\u7528\u6765\u652f\u6301\u5e94\u7528\u7ea7\u522b\u7684\u6269\u5c55, \u800c\u4e0d\u9700\u8981\u50cf v0 \u548c v1 \u7248\u672c\u4e00\u6837\u4e0d\u5f97\u4e0d\u5c06\u4e00\u4e9b\u5e94\u7528\u7ea7\u522b\u7684\u5c5e\u6027\u503c\u5d4c\u5165\u6d88\u606f\u4f53\u3002 Header \u7684\u683c\u5f0f\u5982\u56fe5-7\u6700\u53f3\u90e8\u5206\u6240\u793a, \u5305\u542b key \u548c value , \u4e00\u4e2a Record \u91cc\u9762\u53ef\u4ee5\u5305\u542b0\u81f3\u591a\u4e2a Header \u3002 first offset : \u8868\u793a\u5f53\u524d RecordBatch \u7684\u8d77\u59cb\u4f4d\u79fb\u3002 length : \u8ba1\u7b97\u4ece partition leader epoch \u5b57\u6bb5\u5f00\u59cb\u5230\u672b\u5c3e\u7684\u957f\u5ea6\u3002 partition leader epoch : \u5206\u533a leader \u7eaa\u5143, \u53ef\u4ee5\u770b\u4f5c\u5206\u533a leader \u7684\u7248\u672c\u53f7\u6216\u66f4\u65b0\u6b21\u6570, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80038.1.4\u8282\u3002 magic : \u6d88\u606f\u683c\u5f0f\u7684\u7248\u672c\u53f7, \u5bf9v2\u7248\u672c\u800c\u8a00, magic \u7b49\u4e8e2\u3002 attributes : \u6d88\u606f\u5c5e\u6027, \u6ce8\u610f\u8fd9\u91cc\u5360\u7528\u4e86\u4e24\u4e2a\u5b57\u8282\u3002\u4f4e3\u4f4d\u8868\u793a\u538b\u7f29\u683c\u5f0f, \u53ef\u4ee5\u53c2\u8003 v0 \u548c v1 \uff1b\u7b2c4\u4f4d\u8868\u793a\u65f6\u95f4\u6233\u7c7b\u578b\uff1b\u7b2c5\u4f4d\u8868\u793a\u6b64 RecordBatch \u662f\u5426\u5904\u4e8e\u4e8b\u52a1\u4e2d, 0\u8868\u793a\u975e\u4e8b\u52a1, 1\u8868\u793a\u4e8b\u52a1\u3002\u7b2c6\u4f4d\u8868\u793a\u662f\u5426\u662f\u63a7\u5236\u6d88\u606f\uff08 ControlBatch \uff09, 0\u8868\u793a\u975e\u63a7\u5236\u6d88\u606f, \u800c1\u8868\u793a\u662f\u63a7\u5236\u6d88\u606f, \u63a7\u5236\u6d88\u606f\u7528\u6765\u652f\u6301\u4e8b\u52a1\u529f\u80fd, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 last offset delta : RecordBatch \u4e2d\u6700\u540e\u4e00\u4e2a Record \u7684 offset \u4e0e first offset \u7684\u5dee\u503c\u3002\u4e3b\u8981\u88ab broker \u7528\u6765\u786e\u4fdd RecordBatch \u4e2d Record \u7ec4\u88c5\u7684\u6b63\u786e\u6027\u3002 first timestamp : RecordBatch \u4e2d\u7b2c\u4e00\u6761 Record \u7684\u65f6\u95f4\u6233\u3002 max timestamp : RecordBatch \u4e2d\u6700\u5927\u7684\u65f6\u95f4\u6233, \u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u6307\u6700\u540e\u4e00\u4e2a Record \u7684\u65f6\u95f4\u6233, \u548c last offset delta \u7684\u4f5c\u7528\u4e00\u6837, \u7528\u6765\u786e\u4fdd\u6d88\u606f\u7ec4\u88c5\u7684\u6b63\u786e\u6027\u3002 producer id : PID, \u7528\u6765\u652f\u6301\u5e42\u7b49\u548c\u4e8b\u52a1, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 producer epoch : \u548c producer id \u4e00\u6837, \u7528\u6765\u652f\u6301\u5e42\u7b49\u548c\u4e8b\u52a1, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 first sequence : \u548c producer id \u3001 producer epoch \u4e00\u6837, \u7528\u6765\u652f\u6301\u5e42\u7b49\u548c\u4e8b\u52a1, \u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u80037.4\u8282\u3002 records count : RecordBatch \u4e2d Record \u7684\u4e2a\u6570\u3002","title":"5.2.5 v2\u7248\u672c"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#53","text":"\u4e3b\u8981\u8bb2 .index \u6587\u4ef6\u548c .timeindex , .index \u6587\u4ef6\u662f\u901a\u8fc7\u6d88\u606f\u504f\u79fb\u91cf\u627e\u6d88\u606f, .timeindex \u5219\u662f\u6839\u636e\u6307\u5b9a\u65f6\u95f4\u6233\u627e\u65f6\u95f4 \u9996\u5148, \u6bcf\u5f53\u5199\u5165\u7684\u6d88\u606f\u91cf > log.index.interval.bytes , \u5c31\u4f1a\u65b0\u589e\u7d22\u5f15\u9879 \u7b26\u5408\u4ee5\u4e0b\u5176\u4e2d\u4e00\u4e2a\u6761\u4ef6, \u65e5\u5fd7\u6587\u4ef6\u90fd\u4f1a\u5207\u5206 \u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6 > broker \u4e2d\u7684 log.segment.bytes (\u9ed8\u8ba41073741824, 1 GB ) \u7cfb\u7edf\u5f53\u524d\u65f6\u95f4 - \u65e5\u5fd7\u5206\u6bb5\u6d88\u606f\u6700\u5927\u65f6\u95f4\u6233 > log.roll.ms/log.roll.hours , \u6b64\u5904 log.roll.ms \u4f18\u5148\u7ea7\u5927\u70b9 (\u9ed8\u8ba4\u53ea\u8bbe\u7f6e log.roll.hours = 7 ) .index \u6587\u4ef6\u5927\u5c0f or .timeindex \u6587\u4ef6\u5927\u5c0f > log.index.size.max.bytes (\u9ed8\u8ba4 10485760=10 MB ) \u8ffd\u52a0\u6d88\u606f offset - baseOffset > Integer.MAX","title":"5.3 \u65e5\u5fd7\u7d22\u5f15"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#531","text":"8 * 16 = 4 * 32 \u521a\u597d int32, \u524d8\u540e8\u770b\u5c31\u5f97\u4e86 \u524d4\u4e2a\u5b57\u8282\u8868\u793a\u76f8\u5bf9\u504f\u79fb\u91cf, \u540e4\u4e2a\u5b57\u8282\u8868\u793a\u6d88\u606f\u5728\u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6\u5bf9\u5e94\u7684\u7269\u7406\u4f4d\u7f6e \u67e5\u627e\u65b9\u6cd5: \u4e8c\u5206\u6cd5 + \u8df3\u8868 \u504f\u79fb\u91cf\u7d22\u5f15\u793a\u610f\u56fe \u8df3\u8868\u67e5\u627e\u504f\u79fb\u91cf\u6240\u5728\u7684\u65e5\u5fd7\u5206\u6bb5, \u8ba1\u7b97\u76f8\u5bf9\u504f\u79fb\u91cf, \u6700\u540e\u518d\u7528\u524d\u9762\u56fe\u7684\u65b9\u6cd5, \u5c31\u53ef\u4ee5\u627e\u5230\u6d88\u606f","title":"5.3.1 \u504f\u79fb\u91cf\u7d22\u5f15"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#532","text":"64\u5b57\u8282 + 32\u5b57\u8282 \u5c06 targetTimeStamp \u548c\u6bcf\u4e2a\u65e5\u5fd7\u5206\u6bb5\u4e2d\u7684\u6700\u5927\u65f6\u95f4\u6233largestTimeStamp\u9010\u4e00\u5bf9\u6bd4\uff0c\u76f4\u5230\u627e\u5230\u4e0d\u5c0f\u4e8e targetTimeStamp \u7684 largestTimeStamp \u6240\u5bf9\u5e94\u7684\u65e5\u5fd7\u5206\u6bb5\u3002\u65e5\u5fd7\u5206\u6bb5\u4e2d\u7684largestTimeStamp\u7684\u8ba1\u7b97\u662f\u5148\u67e5\u8be2\u8be5\u65e5\u5fd7\u5206\u6bb5\u6240\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u7d22\u5f15\u6587\u4ef6\uff0c\u627e\u5230\u6700\u540e\u4e00\u6761\u7d22\u5f15\u9879\uff0c\u82e5\u6700\u540e\u4e00\u6761\u7d22\u5f15\u9879\u7684\u65f6\u95f4\u6233\u5b57\u6bb5\u503c\u5927\u4e8e0\uff0c\u5219\u53d6\u5176\u503c\uff0c\u5426\u5219\u53d6\u8be5\u65e5\u5fd7\u5206\u6bb5\u7684\u6700\u8fd1\u4fee\u6539\u65f6\u95f4\u3002 \u627e\u5230\u76f8\u5e94\u7684\u65e5\u5fd7\u5206\u6bb5\u4e4b\u540e\uff0c\u5728\u65f6\u95f4\u6233\u7d22\u5f15\u6587\u4ef6\u4e2d\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u67e5\u627e\u5230\u4e0d\u5927\u4e8etargetTimeStamp\u7684\u6700\u5927\u7d22\u5f15\u9879\uff0c\u5373[1526384718283\uff0c28]\uff0c\u5982\u6b64\u4fbf\u627e\u5230\u4e86\u4e00\u4e2a\u76f8\u5bf9\u504f\u79fb\u91cf28\u3002 \u5728\u504f\u79fb\u91cf\u7d22\u5f15\u6587\u4ef6\u4e2d\u4f7f\u7528\u4e8c\u5206\u7b97\u6cd5\u67e5\u627e\u5230\u4e0d\u5927\u4e8e28\u7684\u6700\u5927\u7d22\u5f15\u9879\uff0c\u5373[26\uff0c838]\u3002 \u4ece\u6b65\u9aa41\u4e2d\u627e\u5230\u65e5\u5fd7\u5206\u6bb5\u6587\u4ef6\u4e2d\u7684838\u7684\u7269\u7406\u4f4d\u7f6e\u5f00\u59cb\u67e5\u627e\u4e0d\u5c0f\u4e8etargetTimeStamp\u7684\u6d88\u606f\u3002","title":"5.3.2 \u65f6\u95f4\u6233\u7d22\u5f15"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#54","text":"\u65e5\u5fd7\u6e05\u7406\u7b56\u7565\u67092, \u65e5\u5fd7\u5220\u9664\u548c\u65e5\u5fd7\u538b\u7f29, \u901a\u8fc7 log.cleanup.policy \u8fdb\u884c\u8bbe\u7f6e, \u9ed8\u8ba4\u662f delete , \u53ef\u4ee5\u540c\u65f6\u652f\u6301\u4e24\u79cd\u7b56\u7565\u3002\u5220\u9664\u7b56\u7565\u662f\u6839\u636e\u4e00\u5b9a\u89c4\u5219\u53bb\u5220\u6570\u636e, \u800c\u538b\u7f29\u5219\u662f\u540c\u4e00\u4e2a key \u4e0b\u4fdd\u7559\u6700\u65b0\u503c","title":"5.4 \u65e5\u5fd7\u6e05\u7406"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#541","text":"\u57fa\u4e8e\u65f6\u95f4: \u901a\u8fc7broker\u7aef\u53c2\u6570 log.retention.hours \u3001 log.retention.minutes \u548c log.retention.ms \u6765\u914d\u7f6e, \u4f18\u5148\u7ea7\u7c92\u5ea6\u8d8a\u5c0f\u8d8a\u5927, \u9ed8\u8ba4\u503c 7 \u5929, \u53ea\u8bbe\u7f6e\u5c0f\u65f6 \u57fa\u4e8e\u65e5\u5fd7\u5927\u5c0f: \u6839\u636e log.retention.bytes \u8fdb\u884c\u8bbe\u7f6e, \u6307\u7684\u662f\u603b\u5927\u5c0f, \u9ed8\u8ba4 1073741824\uff0c\u5373 1GB \u57fa\u4e8e\u65e5\u5fd7\u8d77\u59cb\u504f\u79fb\u91cf: \u901a\u8fc7 DeleteRecordsRequest \u8bf7\u6c42, \u7136\u540e\u5224\u65ad\u65e5\u5fd7\u5206\u6bb5\u7684\u8d77\u59cb\u504f\u79fb\u91cf\u662f\u5426\u5c0f\u4e8e logStartOffset","title":"5.4.1 \u65e5\u5fd7\u5220\u9664"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#542","text":"\u65e5\u5fd7\u538b\u7f29\u8ddf Redis \u7684 RDB \u6a21\u5f0f\u6709\u70b9\u50cf, \u53ef\u4ee5\u63d0\u9ad8\u8d77\u59cb\u52a0\u8f7d\u7684\u901f\u5ea6 clener-offset-checkpoint \u6587\u4ef6\u4f1a\u628a log \u6587\u4ef6\u5206\u4e3a clean \u548c dirty \u4e24\u90e8\u5206(\u6587\u4ef6\u8bb0\u5f55\u7684\u662f firstDirytOffset ), \u5982\u679c\u5ba2\u6237\u7aef\u80fd\u8d76\u4e0a dirty \u90e8\u5206, \u5c31 \u80fd\u8bfb\u5230\u65e5\u5fd7\u6240\u6709\u6d88\u606f\u4e86 \u6e05\u7406\u65f6 broker \u4f1a\u5f00\u7ebf\u7a0b\u6765\u6e05, \u5f00\u591a\u5c11 log.cleaner.thread \u51b3\u5b9a \u6c61\u6d4a\u7387\u51b3\u5b9a\u65e5\u5fd7\u6587\u4ef6\u6e05\u7406\u7684\u4f18\u5148\u7ea7, \u8ba1\u7b97\u516c\u5f0f dirtyRatio = dirtyBytes / (cleanBytes + dirtyBytes), \u53ef\u4ee5\u901a\u8fc7 log.cleaner.min.cleanable.ratio \u63a7\u5236\u89e6\u53d1\u538b\u7f29\u7684\u8d77\u59cb\u6bd4\u4f8b __consumer_offsets \u4e5f\u662f\u7528\u65e5\u5fd7\u538b\u7f29\u7b56\u7565\u8fdb\u884c\u4fdd\u5b58\u7684 \u6e05\u7406\u7b97\u6cd5\u5f88\u7b80\u5355, \u7528\u4e00\u4e2a SkimpyOffsetMap \u8bb0\u5f55 key \u548c offset , \u904d\u5386\u4e24\u6b21 log , \u7b2c\u4e00\u6b21\u8bb0\u5f55\u6700\u5927\u7684 offset , \u7b2c\u4e8c\u6b21\u5f00\u59cb\u5220\u9664 \u5893\u7891\u65e5\u5fd7 ( key != null && value == null ) \u6e05\u7406\u65f6\u673a = \u8be5\u65e5\u5fd7\u5206\u6bb5\u7684 lastModifiedTime + deleteHorizonMs ( broker \u7684 log.cleaner.delete.retention.ms , \u9ed8\u8ba486400000, \u537324\u5c0f\u65f6) < clean \u533a\u57df\u7684 lastModifiedTime \u4e3a\u9632\u6b62 compact \u51fa\u73b0\u788e\u7247\uff0c\u6bcf\u6b21 compact \u4f1a\u628a\u591a\u4e2a\u6587\u4ef6\u5206\u6210\u4e00\u7ec4, \u6bcf\u7ec4\u6587\u4ef6\u5927\u5c0f\u4e0d\u8d85\u8fc7 log.segment.bytes \u6bcf\u4e2a\u65e5\u5fd7\u5206\u7ec4\u6e05\u7406\u540e\u4f1a\u53d8\u6210 log.clean \u6587\u4ef6, \u7ee7\u7eed compact \u5c31\u53d8\u6210 log.swap , \u6700\u540e\u5220\u9664\u539f\u6765\u65e5\u5fd7, log.swap \u5c31\u53bb\u6389 swap \u540e\u7f00, \u5b8c\u6210\u538b\u7f29","title":"5.4.2 \u65e5\u5fd7\u538b\u7f29"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#55","text":"\u8bb2\u8ff0 Kafka \u5728\u843d\u76d8\u65f6\u5019\u7684\u4f18\u5316","title":"5.5 \u78c1\u76d8\u5b58\u50a8"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#551","text":"Kafka \u4f7f\u7528\u4e86\u5927\u91cf\u9875\u7f13\u5b58, \u5148\u628a\u6570\u636e\u5199\u5230\u9875\u7f13\u5b58, \u7136\u540e\u518d\u6839\u636e\u914d\u7f6e fsync \u5f02\u6b65\u843d\u76d8, \u843d\u76d8\u53ef\u4ee5\u7528 log.flush.interval.messages\u3001log.flush.interval.ms \u63a7\u5236","title":"5.5.1 \u9875\u7f13\u5b58"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#552_io","text":"\u00b7 \u5199\u64cd\u4f5c\uff1a\u7528\u6237\u8c03\u7528fwrite\u628a\u6570\u636e\u5199\u5165C\u5e93\u6807\u51c6IObuffer\u540e\u5c31\u8fd4\u56de\uff0c\u5373\u5199\u64cd\u4f5c\u901a\u5e38\u662f\u5f02\u6b65\u64cd\u4f5c\uff1b\u6570\u636e\u5199\u5165C\u5e93\u6807\u51c6IObuffer\u540e\uff0c\u4e0d\u4f1a\u7acb\u5373\u5237\u65b0\u5230\u78c1\u76d8\uff0c\u4f1a\u5c06\u591a\u6b21\u5c0f\u6570\u636e\u91cf\u76f8\u90bb\u5199\u64cd\u4f5c\u5148\u7f13\u5b58\u8d77\u6765\u5408\u5e76\uff0c\u6700\u7ec8\u8c03\u7528write\u51fd\u6570\u4e00\u6b21\u6027\u5199\u5165\uff08\u6216\u8005\u5c06\u5927\u5757\u6570\u636e\u5206\u89e3\u591a\u6b21write \u8c03\u7528\uff09\u9875\u7f13\u5b58\uff1b\u6570\u636e\u5230\u8fbe\u9875\u7f13\u5b58\u540e\u4e5f\u4e0d\u4f1a\u7acb\u5373\u5237\u65b0\u5230\u78c1\u76d8\uff0c\u5185\u6838\u6709 pdflush \u7ebf\u7a0b\u5728\u4e0d\u505c\u5730\u68c0\u6d4b\u810f\u9875\uff0c\u5224\u65ad\u662f\u5426\u8981\u5199\u56de\u5230\u78c1\u76d8\uff0c\u5982\u679c\u662f\u5219\u53d1\u8d77\u78c1\u76d8I/O\u8bf7\u6c42\u3002 \u00b7 \u8bfb\u64cd\u4f5c\uff1a\u7528\u6237\u8c03\u7528fread\u5230C\u5e93\u6807\u51c6IObuffer\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de\uff0c\u5426\u5219\u7ee7\u7eed\uff1b\u5230\u9875\u7f13\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de\uff0c\u5426\u5219\u7ee7\u7eed\uff1b\u53d1\u8d77 I/O \u8bf7\u6c42\uff0c\u8bfb\u53d6\u6570\u636e\u540e\u7f13\u5b58buffer\u548cC\u5e93\u6807\u51c6IObuffer\u5e76\u8fd4\u56de\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u8bfb\u64cd\u4f5c\u662f\u540c\u6b65\u8bf7\u6c42\u3002 \u00b7 I/O\u8bf7\u6c42\u5904\u7406\uff1a\u901a\u7528\u5757\u5c42\u6839\u636eI/O\u8bf7\u6c42\u6784\u9020\u4e00\u4e2a\u6216\u591a\u4e2abio\u7ed3\u6784\u5e76\u63d0\u4ea4\u7ed9\u8c03\u5ea6\u5c42\uff1b\u8c03\u5ea6\u5668\u5c06 bio \u7ed3\u6784\u8fdb\u884c\u6392\u5e8f\u548c\u5408\u5e76\u7ec4\u7ec7\u6210\u961f\u5217\u4e14\u786e\u4fdd\u8bfb\u5199\u64cd\u4f5c\u5c3d\u53ef\u80fd\u7406\u60f3\uff1a\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u7684\u8bfb\u64cd\u4f5c\u5408\u5e76\u5230\u4e00\u8d77\u8bfb\uff0c\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u7684\u5199\u64cd\u4f5c\u5408\u5e76\u5230\u4e00\u8d77\u5199\uff0c\u5c3d\u53ef\u80fd\u53d8\u968f\u673a\u4e3a\u987a\u5e8f\uff08\u56e0\u4e3a\u968f\u673a\u8bfb\u5199\u6bd4\u987a\u5e8f\u8bfb\u5199\u8981\u6162\uff09\uff0c\u8bfb\u5fc5\u987b\u4f18\u5148\u6ee1\u8db3\uff0c\u800c\u5199\u4e5f\u4e0d\u80fd\u7b49\u592a\u4e45\u3002 I/O \u8c03\u5ea6\u5206\u4ee5\u4e0b\u51e0\u79cd 1. NOOP: \u7b80\u5355\u7684FIFO\u961f\u5217 2. CFQ: \u6309\u7167I/O\u8bf7\u6c42\u7684\u5730\u5740\u8fdb\u884c\u6392\u5e8f, \u6bcf\u4e2a\u8fdb\u7a0b\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u961f\u5217\u6765\u7ba1\u7406\u8be5\u8fdb\u7a0b\u6240\u4ea7\u751f\u7684\u8bf7\u6c42, \u6839\u636e\u65f6\u95f4\u7247\u53bb\u8c03\u5ea6\uff0c\u4f46\u6709\u53ef\u80fd\u4f1a\u997f\u6b7b 3. DEADLINE: \u9664\u4e86CFQ\u672c\u8eab\u5177\u6709\u7684I/O\u6392\u5e8f\u961f\u5217\uff0cDEADLINE\u989d\u5916\u5206\u522b\u4e3a\u8bfbI/O\u548c\u5199I/O\u63d0\u4f9b\u4e86FIFO\u961f\u5217\u3002\u8bfbFIFO\u961f\u5217\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4\u4e3a500ms\uff0c\u5199FIFO\u961f\u5217\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4\u4e3a5s, READ > WRITE > CFQ 4. ANTICIPATORY: \u5728DEADLINE\u7684\u57fa\u7840\u4e0a\uff0c\u4e3a\u6bcf\u4e2a\u8bfbI/O\u90fd\u8bbe\u7f6e\u4e866ms\u7684\u7b49\u5f85\u65f6\u95f4\u7a97\u53e3\u3002\u5982\u679c\u57286ms\u5185OS\u6536\u5230\u4e86\u76f8\u90bb\u4f4d\u7f6e\u7684\u8bfbI/O\u8bf7\u6c42\uff0c\u5c31\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\u3002ANTICIPATORY\u7b97\u6cd5\u901a\u8fc7\u589e\u52a0\u7b49\u5f85\u65f6\u95f4\u6765\u83b7\u5f97\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u5047\u8bbe\u4e00\u4e2a\u5757\u8bbe\u5907\u53ea\u6709\u4e00\u4e2a\u7269\u7406\u67e5\u627e\u78c1\u5934\uff08\u4f8b\u5982\u4e00\u4e2a\u5355\u72ec\u7684SATA\u786c\u76d8\uff09\uff0c\u5c06\u591a\u4e2a\u968f\u673a\u7684\u5c0f\u5199\u5165\u6d41\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u5199\u5165\u6d41\uff08\u76f8\u5f53\u4e8e\u5c06\u968f\u673a\u8bfb\u5199\u53d8\u987a\u5e8f\u8bfb\u5199\uff09\uff0c\u901a\u8fc7\u8fd9\u4e2a\u539f\u7406\u6765\u4f7f\u7528\u8bfb\u53d6/\u5199\u5165\u7684\u5ef6\u65f6\u6362\u53d6\u6700\u5927\u7684\u8bfb\u53d6/\u5199\u5165\u541e\u5410\u91cf\u3002\u9002\u7528\u4e8e\u5927\u591a\u6570\u73af\u5883\uff0c\u7279\u522b\u662f\u8bfb\u53d6/\u5199\u5165\u8f83\u591a\u7684\u73af\u5883\u3002","title":"5.5.2 \u78c1\u76d8 I/O \u6d41\u7a0b"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#553","text":"\u5bf9 Linux \u64cd\u4f5c\u7cfb\u7edf\u800c\u8a00\uff0c\u96f6\u62f7\u8d1d\u6280\u672f\u4f9d\u8d56\u4e8e\u5e95\u5c42\u7684 sendfile() \u65b9\u6cd5\u5b9e\u73b0\u3002\u5bf9\u5e94\u4e8e Java \u8bed\u8a00\uff0c FileChannal.transferTo() \u65b9\u6cd5\u7684\u5e95\u5c42\u5b9e\u73b0\u5c31\u662f sendfile() \u65b9\u6cd5","title":"5.5.3 \u96f6\u62f7\u8d1d"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#6","text":"","title":"\u7b2c6\u7ae0 \u6df1\u5165\u670d\u52a1\u7aef"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#61","text":"","title":"6.1 \u534f\u8bae\u8bbe\u8ba1"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#62","text":"","title":"6.2 \u65f6\u95f4\u8f6e"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#63","text":"","title":"6.3 \u5ef6\u65f6\u64cd\u4f5c"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#64","text":"","title":"6.4 \u63a7\u5236\u5668"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#641","text":"","title":"6.4.1 \u63a7\u5236\u5668\u7684\u9009\u4e3e\u53ca\u5f02\u5e38\u6062\u590d"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#642","text":"","title":"6.4.2 \u4f18\u96c5\u5173\u95ed"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#65","text":"","title":"6.5 \u53c2\u6570\u89e3\u5bc6"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#651_brokerid","text":"","title":"6.5.1 broker.id"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#652_bootstrapservers","text":"","title":"6.5.2 bootstrap.servers"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#653","text":"","title":"6.5.3 \u670d\u52a1\u7aef\u53c2\u6570\u5217\u8868"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#7","text":"","title":"\u7b2c7\u7ae0 \u6df1\u5165\u5ba2\u6237\u7aef"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#8","text":"","title":"\u7b2c8\u7ae0 \u53ef\u9760\u6027\u63a2\u7a76"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#9_kafka","text":"","title":"\u7b2c9\u7ae0 Kafka\u5e94\u7528"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#10_kafka","text":"","title":"\u7b2c10\u7ae0 Kafka\u76d1\u63a7"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#11_1","text":"","title":"\u7b2c11\u7ae0 \u9ad8\u7ea7\u5e94\u7528"},{"location":"middleware/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/#12_kafkaspark","text":"","title":"\u7b2c12\u7ae0 Kafka\u4e0eSpark\u7684\u96c6\u6210"}]}